**-----------------------------------------------------------------------**
PROGRAM: tec2bin
AUTHOR: Cameron Christensen, November 1998
**-----------------------------------------------------------------------**

**-----------------------------------------------------------------------**
SYNOPSIS
**-----------------------------------------------------------------------**

	The tec2bin program reads in a Tecplot formatted ascii file
and converts it to a binary file more appropriate to SCIRun.

Advantages: 	--MUCH faster SCIRun input (more than 100x faster than 
			original ascii reader*).
		--File size reduced to apprx. 1/4 - 1/3 of original size.  

* original reader was optimized to read the ascii file approximately 10 times 
faster, so the binary file read is now only about 10x faster than the ascii
file read, rather than 100x.

**-----------------------------------------------------------------------**
USAGE
**-----------------------------------------------------------------------**

 	tec2bin <infile> [outfile]
	<infile> is a Tecplot readable ascii file.
	[outfile] is an optional output filename. If not specified, outfile
		name will automatically be set to '<infile>.bin'.


**-----------------------------------------------------------------------**
COMPILING
**-----------------------------------------------------------------------**

From the SCIRun/Modules/CFD directory...

 $ make clean
 $ CC -D_NOSCIRUN_ -o tec2bin tec2bin.cc Readtec.cc
 $ make

**-----------------------------------------------------------------------**
DETAILS
**-----------------------------------------------------------------------**

INPUT FILE (TECPLOT) FORMAT:

/*	
 * This is supposed to be the official list of vars:
 * X,Y,Z,P,Tn,En,RHOn,CKSn,THEn,Un,Vn,Wn,MOnX,MOnY,MOnZ
 *    where n is the fluid number and is >= 1.
 *
 * Explanation: X,Y,Z are the coordinates of the grid points.  We don't use
 *              them for anything because these points are implicit in the
 *              size of the grid.
 *              P is pressure and is not dependent on the fluid.
 * For each fluid:
 *              T: temperature
 *              E: energy
 *              RHO: density
 *              CKS: concentration
 *              THE: theta?
 *              U,V,W: velocity vector
 *              MOX,Y,Z: momentum vector
 *
 * Note: UVW and MOXYZ are displayed as a single vector and XYZ aren't
 *       ever displayed (although they could be, but why?).
 *
 */

	The file format is highly confusing.  It would be better to find an
official source of information regarding it, but I will attempt to
explain what I know.
	The first few lines of the file include the name of the plot
and the variable names.  The only pertinent information for us is the
variable names.  The numbered variable names correspond to the
different fluids in the dataset. 
	After this come the data.  There are two types of data,
BLOCKs and POINTs.  BLOCKs and POINTsets are both types of fluids, and
although both BLOCK and POINT data specify values for every fluid,
each BLOCK or POINTset only corresponds to a single fluid, so the
values set for the other fluids are not necessarily valid or
useful. Also, a special problem with POINT data is that each POINT
data set believes that it is the first fluid and specified all of its
values in the first (n=1) fluid's variable slots.
	A BLOCK is a set of scalar and vector data aligned
on a cannonical grid.  The first line of a block specifies the
dimensions of the block, either in 2D or 3D, as I*J*K.  After that,
every variable (including X,Y,Z, essentially redundant in the case of
a BLOCK) is listed, in order, as groups of K sets of J sets of I.  For
example, first the X values will be listed (K sets of J sets of I
values), followed by the Y values, etc. The block would be considered
a fluid, though not necessarily the first fluid.  F
	A POINT (pointset) is a set of scalar and vector values,
originated at specific points, specified by the X, Y, Z variable
entries (the first 3). The first line of a point specifies the number
(I) of points, and then each variable is listed for each point.

BINARY FILE STRUCTURE:

/* Header to determine what the structure looks like **
 * Here is how it will be formatted:
 *
 * (start file)
 * SCIRun CFD binary input file
 * <twoD> 
 * <num_vars>
 * <num_vars var names, space separated, indexed by order of appearance>
 * <num_fluids>
 * <num_blocks>
 * (for each block)<dim_X> <dim_Y> <dim_Z>
 * <num_pointsets>
 * (for each point set)<num_points>
 * [binary dump of blocks followed by point sets]
 * (for blocks)
 *    for all fluids, for all vars, for all x, for all y, dump z points
 * (for pointsets)
 *    dump all (i) X,Y,Z,P, then...
 *    for all fluids, for all vars, dump i points
 * (end file)
 *
 */
/*************************************************************************/

	The data structures created for Readtec are class Block and
class Pointset, corresponding to BLOCK and POINT data sets in the
Tecplot file.
	Their organization follows.

Block:
	// (because P is fluid independent, it is only initialized once)
	vector< vector< float* > > P;  // pressure (the implicit var)
	//   X<      Y<    [Z]
	vector< vector< vector< vector< float* > > > > vars; 
	// var<  fluid<      X<      Y<  [Zval]
// ex index: T[fluid][i,j,k] = vars[fluid][index_of_T_in_varnames][i][j][k].
  
Pointset:
	float *X;                 // the (I) X coordinates for each point
	float *Y;                 // Y coordinates
	float *Z;                 // Z coordinates
	float *P;                 // Pressure, the implicit var
	vector< vector< float* > > points;  // values of vars @ each point
	// flu<    var<   [val]
	// ex index: T[fluid][i] => points[fluid][index_of_P_in_varnames][i].

	Using these data structure makes generating SCIRun-specific
data structures very easy, and they will hopefully be of assistance in
determining an official protocol for storing CFD datasets.

**-----------------------------------------------------------------------**
PERFORMANCE
**-----------------------------------------------------------------------**

A sample output is included to illustrate how it works and the time 
differences. The sample file is a 3D tecplot file that is approximately 22MB.
The resulting binary file is approximately 7MB.

========The old way:

% tec2bin_slow /home/sci/data15/psutton/tecfl20 tecfl20_slow.bin
Opening /home/sci/data15/psutton/tecfl20 for input...
Opening tecfl20_slow.bin for output...
Reading TEC file (the old way)...
Working on ZONE T="BLOCK   1", I=  52, J=  28, K=  50,F=BLOCK . . .
Done.
Working on ZONE T="KF=   1", I=     200, F=POINT . . .
Done.
Working on ZONE T="KF=   3", I=     560, F=POINT . . .
Done.
***Done reading in 141 seconds.
Writing BIN file...
Done writing in 3 seconds.
Testing ReadBINFile...
Opening tecfl20_slow.bin for input...
num_blocks = 1
num_pointsets = 2
***Done reading in 0 seconds.

======The new way:

197 burn:SCIRun/tec2bin> tec2bin /home/sci/data15/psutton/tecfl20 tecfl20.bin
Opening /home/sci/data15/psutton/tecfl20 for input...
Opening tecfl20.bin for output...
Reading TEC file (the optimized way)...
Working on ZONE T="BLOCK   1", I=  52, J=  28, K=  50,F=BLOCK . . .
Done.
Working on ZONE T="KF=   1", I=     200, F=POINT . . .
Done.
Working on ZONE T="KF=   3", I=     560, F=POINT . . .
Done.
***Done reading in 14 seconds.
Writing BIN file...
Done writing in 3 seconds.
Testing ReadBINFile...
Opening tecfl20.bin for input...
num_blocks = 1
num_pointsets = 2
Done reading in 0 seconds.
