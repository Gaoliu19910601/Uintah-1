
inline Point::Point(const Point& p)
{
    _x=p._x;
    _y=p._y;
    _z=p._z;
#if SCI_ASSERTION_LEVEL >= 4
    uninit=0;
#endif
}

inline Point::Point()
{
#if SCI_ASSERTION_LEVEL >= 4
    uninit=1;
#endif
}

inline Point& Point::operator=(const Point& p)
{
    ASSERTL4(!p.uninit);
    _x=p._x;
    _y=p._y;
    _z=p._z;
#if SCI_ASSERTION_LEVEL >= 4
    uninit=0;
#endif
    return *this;
}

inline Vector Point::operator-(const Point& p) const
{
    ASSERTL4(!uninit && !p.uninit);
    return Vector(_x-p._x, _y-p._y, _z-p._z);
}

inline Point Point::operator-() const
{
    ASSERTL4(!uninit);
    return Point(-_x, -_y, -_z);
}

inline Point Point::operator-(const Vector& v) const
{
    ASSERTL4(!uninit && !v.uninit);
    return Point(_x-v._x, _y-v._y, _z-v._z);
}

inline Point& Point::operator-=(const Vector& v)
{
    ASSERTL4(!uninit && !v.uninit);
    _x-=v._x;
    _y-=v._y;
    _z-=v._z;
    return *this;
}

inline Point Point::operator+(const Vector& v) const
{
    ASSERTL4(!uninit && !v.uninit);
    return Point(_x+v._x, _y+v._y, _z+v._z);
}

inline Point Point::operator*(double d) const
{
    ASSERTL4(!uninit);
    return Point(_x*d, _y*d, _z*d);
}

inline Point& Point::operator*=(const double d)
{
    ASSERTL4(!uninit);
    _x*=d;_y*=d;_z*=d;
    return *this;
}

inline Point& Point::operator+=(const Vector& v)
{
    ASSERTL4(!uninit && !v.uninit);
    _x+=v._x;
    _y+=v._y;
    _z+=v._z;
    return *this;
}

inline Point& Point::operator/=(const double d)
{
    ASSERTL4(!uninit);
    _x/=d;
    _y/=d;
    _z/=d;
    return *this;
}

inline Point Point::operator/(const double d) const
{
    ASSERTL4(!uninit);
    return Point(_x/d,_y/d,_z/d);
}

inline void Point::x(const double d)
{
    _x=d;
#if SCI_ASSERTION_LEVEL >= 4
    uninit=0;
#endif
}

inline double Point::x() const
{
    ASSERTL4(!uninit);
    return _x;
}

inline void Point::y(const double d)
{
#if SCI_ASSERTION_LEVEL >= 4
    uninit=0;
#endif
    _y=d;
}

inline double Point::y() const
{
    ASSERTL4(!uninit);
    return _y;
}

inline void Point::z(const double d)
{
#if SCI_ASSERTION_LEVEL >= 4
    uninit=0;
#endif
    _z=d;
}

inline double Point::z() const
{
    ASSERTL4(!uninit);
    return _z;
}

inline Vector Point::vector() const
{
    ASSERTL4(!uninit);
    return Vector(_x,_y,_z);
}

inline Point Min(const Point& p1, const Point& p2)
{
    ASSERTL4(!p1.uninit && !p2.uninit);
    double x=Min(p1._x, p2._x);
    double y=Min(p1._y, p2._y);
    double z=Min(p1._z, p2._z);
    return Point(x,y,z);
}

inline Point Max(const Point& p1, const Point& p2)
{
    ASSERTL4(!p1.uninit && !p2.uninit);
    double x=Max(p1._x, p2._x);
    double y=Max(p1._y, p2._y);
    double z=Max(p1._z, p2._z);
    return Point(x,y,z);
}

inline double Dot(const Point& p, const Vector& v)
{
    ASSERTL4(!p.uninit && !v.uninit);
    return p._x*v._x+p._y*v._y+p._z*v._z;
}

inline double Dot(const Point& p1, const Point& p2)
{
    ASSERTL4(!p1.uninit && !p2.uninit);
    return p1._x*p2._x+p1._y*p2._y+p1._z*p2._z;
}
