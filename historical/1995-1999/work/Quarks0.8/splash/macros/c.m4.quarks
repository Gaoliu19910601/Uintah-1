divert(-1)
define(NEWPROC,) dnl

define(CREATE, `{
       Qk_fork((void *) $1);
}')

define(WAIT_FOR_END, `
   Qk_wait_for_threads();
 ')

define(MAIN_INITENV, ` ')

define(MAIN_END, `{exit(0);}')
define(MAIN_ENV,`
#include <stdio.h>
#include <errno.h>
#include "Quarks.h"
   ')
define(ENV, ` ')
define(EXTERN_ENV, ` ')

define(G_MALLOC, `Qk_create_region(0, $1, (unsigned long *) $2)')
define(G_FREE, `Qk_destroy_region($1)')

define(LOCKDEC, `Id $1;')
define(LOCKINIT, `$1 = Qk_newlock();')
define(LOCK, `Qk_acquire($1);')
define(UNLOCK, `Qk_release($1);')

define(ALOCKDEC, `Id $1[$2];')
define(ALOCKINIT, `
     for(i=0; i<$2; i++)
        $1[i] = Qk_newlock();
       ')
define(ALOCK, `Qk_acquire($1[$2]);')
define(AULOCK, `Qk_release($1[$2]);')

define(BARRIER, `
    Qk_wait_barrier($1,$2);')
define(BARDEC, `Id $1;')
define(BARINIT, `$1=Qk_newbarrier();
')

define(CLOCK, ` $1 = Qk_current_time();')

define(GSDEC, `int *$1;
    Id $1_lock1;
    Id $1_ba1;')
define(GSINIT, `{ 
 $1 = (int *) (sizeof(int));
 $1 =0;
 $1_lock1 = Qk_newlock();
 $1_ba1 = NULL;
}')                 
define(GETSUB, `{ 
  Qk_acquire($1_lock1);
  if (*($1)<=($3)){
    ($2) = (*$1)++;
    Ql_release($1_lock1);
}
  else { 
    ($2) = -1;
    *($1) = 0; 
    if ($1_ba1 == NULL)
      $1_ba1 = Qk_newbarrier($4);
    (Qk_acquire($1_lock1));
    Qk_wait_barrier($1_ba1);
  }
}')

define(NU_GSDEC, `int ($1);')
define(NU_GSINIT, `{ ($1) = 0; }')
define(NU_GETSUB, `GETSUB($1,$2,$3,$4)')

define(ADEC, `int ($1);')
define(AINIT, `{;}')
define(PROBEND, `{;}')

define(NLOCKDEC, `int ($1);')
define(NLOCKINIT, `{;}')
define(NLOCK, `{;}')
define(NUNLOCK, `{;}')

define(PAUSEDEC, ` ')
define(PAUSEINIT, `{;}')
define(CLEARPAUSE, `{;}')
define(SETPAUSE, `{;}')
define(EVENT, `{;}')
define(WAITPAUSE, `{;}')
define(PAUSE, `{;}')

define(AUG_ON, ` ')
define(AUG_OFF, ` ')
define(TRACE_ON, ` ')
define(TRACE_OFF, ` ')
define(REF_TRACE_ON, ` ')
define(REF_TRACE_OFF, ` ')
define(DYN_TRACE_ON, `;')
define(DYN_TRACE_OFF, `;')
define(DYN_REF_TRACE_ON, `;')
define(DYN_REF_TRACE_OFF, `;')
define(DYN_SIM_ON, `;')
define(DYN_SIM_OFF, `;')
define(DYN_SCHED_ON, `;')
define(DYN_SCHED_OFF, `;')
define(AUG_SET_LOLIMIT, `;')
define(AUG_SET_HILIMIT, `;')

define(MENTER, `{;}')
define(DELAY, `{;}')
define(CONTINUE, `{;}')
define(MEXIT, `{;}')
define(MONINIT, `{;}')

define(G_MALLOC_F, `malloc($1)')
define(NU_MALLOC, `malloc($1);')
define(NU_FREE, `;')
define(NU_MALLOC_F, `malloc($1)')

define(GET_HOME, `{($1) = 0;}')
define(GET_PID, `{($1) = 0;}')
define(AUG_DELAY, `{sleep ($1);}')
define(ST_LOG, `{;}')
define(SET_HOME, `{;}')
divert(0)
