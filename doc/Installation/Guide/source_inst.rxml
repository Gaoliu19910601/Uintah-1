<!--
For more information, please see: http://software.sci.utah.edu

The MIT License

Copyright (c) 2004 Scientific Computing and Imaging Institute,
University of Utah.

License for the specific language governing rights and limitations under
Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
-->

<section id="sec.source_inst">
  <title id="title.source_inst">&sr; Installation from Source Code (Linux,
  <acronym>SGI</acronym>, and &osx;)</title>
  <section>
    <title>Introduction</title>

    <para>
      Installation from sources consists of these steps:
      <orderedlist>
	<listitem>
	  <para>Downloading &sr; sources, packages,
	  third party software, sample data sets, and documentation.</para>
	</listitem>
	<listitem>
	  <para>Unpacking sources.</para>
	</listitem>
	<listitem>
	  <para>Building third party software.</para>
	</listitem>
	<listitem>
	  <para>Building optional software.</para>
	</listitem>
	<listitem>
	  <para>Building &sr;</para>
	</listitem>
      </orderedlist>
    </para>

    <note>
      <title>Itanium Architecture</title>
      <para>When building &sr; for the Itanium architecture, the GNU compiler
      collection (gcc) must be used and the values of the environment
      variables <envar>CFLAGS</envar> and <envar>CXXFFLAGS</envar> must be
      set as follows:</para>
      <para>
	for csh-type shells
	<programlisting>
	  setenv CFLAGS fPIC
	  setenv CXXFLAGS fPIC
	</programlisting>
	for sh-type shells
	<programlisting>
	  CFLAGS=fPIC
	  CXXFLAGS=fPIC
	  export CFLAGS CXXFLAGS
	</programlisting>
      </para>
    </note>
  </section>

  <section id="sec.sources">
    <title id="sec.title.sources">Downloading and Unpacking Sources</title>

    <orderedlist>

      <listitem>

	<para>
	  From <acronym>SCI</acronym>'s <ulink
	  url="http://software.sci.utah.edu/archive_entry.html">software
	  archive</ulink> page obtain the following:
	  <itemizedlist>
	    <listitem>
	      <para>
		&sr; sources, <filename>&sr;.<replaceable>x.x.x</replaceable>.tar.gz</filename>
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		&sr; package sources, e.g. <filename>BioPSE.PKG.<replaceable>x.x.x</replaceable>.tar.gz</filename>
	      </para>
	      <note>
		<para>Download
		<filename>Insight.PKG.<replaceable>x.x.x</replaceable>.tar.gz</filename>
		to add support for ITK in &sr;.  See also <link
		endterm="sec.title.obitk" linkend="sec.obitk"/>.
		</para>
	      </note>
	    </listitem>
	    <listitem>
	      <para>
		Third-party sources,
		<filename>Thirdparty_install.<replaceable>x.x.x</replaceable>.tar.gz</filename>
		for
		SGI/Linux and
		<filename>Thirdparty_install_osx.<replaceable>x.x.x</replaceable>.tar.gz</filename>
		for &osx; users.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		&sr; sample data sets, <filename>DataSets.<replaceable>x.x.x</replaceable>.tar.gz</filename>
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		&sr; documentation, <filename>docs.<replaceable>x.x.x</replaceable>.tar.gz</filename>
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>

      </listitem>

      <listitem>
	<para>
	  Unpack the &sr; sources:
	  <literallayout class="monospaced">
gunzip -c &sr;.<replaceable>x.x.x</replaceable>.tar.gz | tar xf -
	  </literallayout>
	  This creates a directory called <filename>&sr;</filename>.  The term
	  <quote>&sr;</quote> refers to this directory.
	</para>
      </listitem>

      <listitem>
	<para>
	  Unpack the compressed package sources into
	  <filename>&sr;/src/Packages</filename>. For example, to unpack the
	  BioPSE package type:
	  <literallayout class="monospaced">
gunzip -c BioPSE.PKG.<replaceable>x.x.x</replaceable>.tar.gz | (cd &sr;/src/Packages &amp;&amp; tar xf -)
	  </literallayout>
	</para>
      </listitem>

      <listitem>
	<para>
	  Unpack the sample datasets:
	  <literallayout class="monospaced">
gunzip -c DataSets.<replaceable>x.x.x</replaceable>.tar.gz | tar xf -
	  </literallayout>
	  This creates the directory <filename>&sr;Data</filename>.
	  <filename>&sr;Data</filename> should be moved to a location accessible to all &sr; users, say
	  <filename>/usr/local</filename>.
	</para>
      </listitem>

      <listitem>
	<para>
	  Unpack third party sources.
	</para>
	<para>
	  For SGI/Linux:
	  <literallayout class="monospaced">
gunzip -c Thirdparty_install.<replaceable>x.x.x</replaceable>.tar.gz | tar xf -
	  </literallayout>
	  This creates the directory
	  <filename>Thirdparty_install.<replaceable>x.x.x</replaceable></filename>.
	  For &osx;:
	  <literallayout class="monospaced">
gunzip -c Thirdparty_install_osx.<replaceable>x.x.x</replaceable>.tar.gz | tar xf -
	  </literallayout>
	  This creates the directory
	  <filename>Thirdparty_install_osx.<replaceable>x.x.x</replaceable></filename>.
	</para>
      </listitem>

      <listitem>
	<para>
	  Unpack the documentation:
	  <literallayout class="monospaced">
gunzip -c docs.<replaceable>x.x.x</replaceable>.tar.gz | tar xf -
	  </literallayout>
	  This creates the directory <filename>&sr;Docs</filename>. This
	  directory can be moved to a new location, say
	  <filename>/usr/local</filename>, accessible to all &sr; users.  Point
	  a browser at <filename>&sr;Docs/doc/index.html</filename> to access
	  &sr;'s online documentation.
	</para>
      </listitem>

    </orderedlist>

    <note>
      <title>Note</title> <para><xref linkend="ap.lsrcvs"/> discusses a
      method for putting the downloaded &sr; sources under control of the
      CVS version control system.  This is useful if the &sr; distribution
      will be used for development.  This is <emphasis>not</emphasis> a
      requirement for installing &sr;</para>
    </note>

  </section>

  &third_party_inst;

  &opt_inst;

  <section id="sec.build-sr">
    <title id="title.build-sr">Building &sr;</title>

    <orderedlist>

      <listitem>

	<para>
	  Run &sr;'s configure script.    Do this from a sub-directory of
	  <filename>&sr;</filename> (but <emphasis>not</emphasis>
	  <filename>&sr;/src</filename>) as follows:

	  <literallayout class="monospaced">
mkdir &sr;/<replaceable>dir</replaceable>
cd &sr;/<replaceable>dir</replaceable>
../src/configure --with-thirdparty=<replaceable>third-party-dir</replaceable> \
--enable-package="<replaceable>package-name1 package-name2 &hellip;</replaceable>"
	  </literallayout>
	  in which case &sr; is built in the directory
	  <filename>&sr;/<replaceable>dir</replaceable></filename> (where
	  <replaceable>dir</replaceable> is a directory name).  Above,
	  <replaceable>third-party-dir</replaceable> is replaced by the name of
	  the third party software installation directory.  For SGI/Linux
	  platforms, use the third-party installation path provided by the
	  third-party installation script.  For the &osx; platform, use the path
	  given to the third-party installation script.  Replace
	  "<replaceable>package-name1 package-name2 &hellip;</replaceable>" by a
	  list of package names , e.g. "BioPSE MatlabInterface".  An example
	  configure command for SGI/Linux platforms is:
	  <literallayout class="monospaced">
../src/configure \
--with-thirdparty=/usr/local/&sr;/Thirdparty/1.8.0/Irix/CC-32bit \
--enable-package="BioPSE MatlabInterface"
	  </literallayout>

	  Use option <option>--with-unipetsc</option> to add support for
	  <acronym>PETSc</acronym>.  Options <option>--with-lapack</option> and
	  <option>--with-blas</option> must be used if the
	  <acronym>BLAS</acronym> and <acronym>LAPACK</acronym> libraries are
	  not in <filename>/usr/lib</filename> (<citetitle><xref
	  endterm="title.petsc_sr_config"
	  linkend="sec.petsc_sr_config"/></citetitle> describes these options).
	  For example:
	  <literallayout class="monospaced">
../src/configure \
--with-thirdparty=/usr/local/&sr;/Thirdparty/1.8.0/Irix/CC-32bit \
--enable-package="BioPSE MatlabInterface" \
--with-unipetsc=/usr/local/petsc \
--with-blas=/usr/local/lib \
--with-lapack=/usr/local/lib
	  </literallayout>
	</para>

	<para>
	  &osx; builds of &sr; require use of configure options
	  <option>--enable-32bit</option> and
	  <option>--disable-sci-malloc</option>.  Also, option
	  The configure command must also include the
	  following environment variable assignments:
	  <userinput>CC=gcc</userinput> and <userinput>CXX=g++</userinput>.  For
	  example:
	  <literallayout class="monospaced">
../src/configure \
--with-thirdparty=/usr/local/&sr;/Thirdparty_osx \
--enable-package="BioPSE MatlabInterface" \
--enable-32bit \
--disable-sci-malloc \
CC=gcc CXX=g++
	  </literallayout>
	</para>

	<para>
	  Not all of <command>configure</command>'s options have been
	  mentioned. Command <command>configure --help</command> lists them all.
	</para>

      </listitem>

      <listitem>
	<para>
	  Run (GNU) make from the previously used directory when running
	  configure (e.g. <filename>&sr;/linux</filename>,
	  <filename>&sr;/sgi32</filename>, <filename>&sr;/sgi64</filename>, or
	  <filename>&sr;/osx</filename>).  Note that the
	  <quote>configure</quote> directory is called
	  <replaceable>build_dir</replaceable> from this point on.
	  <literallayout class="monospaced">
cd <replaceable>build_dir</replaceable>
make
	  </literallayout>
	  Be sure that <command>make</command> invokes GNU make.  GNU is
	  sometimes named <command>gmake</command> or
	  <command>gnumake</command>.
	</para>

	<para>
	  For a multiprocessor system GNU make's <option>-j</option> option can
	  be used to reduce the build time:
	  <literallayout class="monospaced">
make -j <replaceable>N</replaceable>
	  </literallayout>
	  where <replaceable>N</replaceable> is the number of processors
	  available for use by make.  Using this option on a multiprocessor
	  machine can significantly reduce the time to build &sr;.
	</para>
	<para>
	  Be sure to read <citetitle pubwork="section"><xref
	  endterm="title.prepare" linkend="sec.prepare"/></citetitle> before
	  <link linkend="sec.starting">starting</link> &sr;.
	</para>
      </listitem>
    </orderedlist>

    <para>
      After a successful build, <replaceable>build_dir</replaceable>
      will contain the <filename>scirun</filename> executable.
    </para>

    <tip>
      <para>
	It is possible to build &sr; for multiple machine architectures. For instance, 
	a Linux version and 32 bit and 64 bit Irix versions.  If the
	<filename>&sr;</filename> directory resides on a volume shared by all
	machines, do the following:
	<literallayout class="monospaced">
mkdir &sr;/linux
mkdir &sr;/sgi32
mkdir &sr;/sgi64
mkdir &sr;/osx
	</literallayout>
	After logging onto the Linux machine:
	<literallayout class="monospaced">
cd &sr;/linux
../src/configure <replaceable>options</replaceable>
make -j <replaceable>N</replaceable>
	</literallayout>
	Then from the Irix machine(s):
	<literallayout class="monospaced">
cd &sr;/sgi32
../src/configure <replaceable>options</replaceable>
make -j <replaceable>N</replaceable>
cd &sr;/sgi64
../src/configure --enable-64bit <replaceable>options</replaceable>
make -j <replaceable>N</replaceable>
	</literallayout>
	and the &osx; platform(s):
	<literallayout class="monospaced">
cd &sr;/osx
../src/configure <replaceable>options</replaceable> CC=gcc CXX=g++
make -j <replaceable>N</replaceable>
	</literallayout>
      </para>
    </tip>

  </section>

</section>
