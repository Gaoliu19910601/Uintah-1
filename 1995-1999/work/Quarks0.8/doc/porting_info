
    Quarks Distributed Shared Memory system, Ver 0.8, Apr 15 1995
    -------------------------------------------------------------

           Copyright (c) 1995 The University of Utah and
    the Computer Systems Laboratory (CSL).  All rights reserved.
    ------------------------------------------------------------


                 PORTING QUARKS TO OTHER PLATFORMS

Porting Quarks to any system should not be too tough. You only need a 
few things. First, you need to have a threads package. We are using the
Cthreads user level threads library. If you have a version on your machine,
your task is greatly simplified. In any case, the file thread.c
implements a vaneer on top of the threads library. You will probably
end up modifying that file to accomodate any other threads system. We
use the mutex_lock primitive of Cthreads for mutex synchronization.

Quarks is based on virtual memory support for memory coherency. It all
boils down to using mmap to map/unmap/change protection of pages and 
catching SIGSEGV (or SIGBUS) faults to take appropriate coherency
actions. File mem.c is the major piece of code related to this. 

Apart from the above two, it is just a matter of using the correct
calling sequence for system calls for your system, where do you find the
address of the read/write fault from inside the segv handler, can you
idenfity if it is a read fault or a write fault, etc.

Here is a list of major files you should start from. They should
take care of most of the porting work.
    mem.c, port.c, region.c, thread.c

We would be glad to hear from you about your experience porting Quarks
to other platforms. Any suggestions, bugs etc should be directed to 
quarks-bugs@cs.utah.edu.

