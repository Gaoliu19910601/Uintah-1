/*
 * Copyright (c) 2014 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#ifndef PhilCoalTableImporter_h
#define PhilCoalTableImporter_h

#include <vector>
#include <map>
#include <string>

class StateTable;

/**
 *  \class PhilCoalTableImporter
 *  \author James C. Sutherland
 *  \date 2010
 *
 *  \brief Reads a coal reaction table generated by Phil's code and
 *         converts it into TabProps format.
 */
class PhilCoalTableReader
{
public:

  /**
   *  \brief Loads the file from disk and builds it.
   *
   *  \param inputFileName the name of the file produced by Phil's code.
   *  \param outputFilePrefix the name of the prefix for the table.
   *
   *  \param subSampleFirstDim if true, and the table has three
   *         independent variables, then this results in the first
   *         dimension being subsampled to a uniform mesh with double
   *         the number of points in the original table.  This may be
   *         useful in situations where a 3D table has a strongly
   *         varying mesh in the first dimension.
   */
  PhilCoalTableReader( const std::string inputFileName,
                       const std::string outputFilePrefix,
                       const bool subSampleFirstDim = false );

  ~PhilCoalTableReader();

  const std::vector<std::string>& get_dvar_names() const{ return depVarNames_; }
  const std::vector<std::string>& get_ivar_names() const{ return indepVarNames_; }

private:

  int extract_header() const;
  int extract_metadata( const int );
  int set_mesh( const int );
  void read_table();
  void build_table( const std::string fname );
  void verify_table( const StateTable& table );

  const std::string fileName_;
  const bool subSampleFirstDim_;

  const int order_;
  int nIndepVars_, nDepVars_;
  int n0_; // if a 3D table, this stores the original number of points in the first dim.

  std::vector<std::string> depVarNames_, indepVarNames_;
  std::vector<int> nptsIvar_;

  std::vector< std::vector<double>* > ivarGrid_;
  std::vector< std::vector<double>* > dvars_;

  typedef std::map< std::string, double > MetaData;
  MetaData metaData_;
};

#endif // PhilCoalTableImporter_h
