#!/bin/bash
#______________________________________________________________________
# run:  This shell script
#         - runs a component's test
#         - set locks if a component's tests fails.
# environmental Variables: $OS $BUILD_DIR, $BUILDROOT, $HTMLLOG, $PARALLELISM, $WEBLOG $LOCAL_OR_NIGHTLY_TEST $WHICH_TEST

mode=$1
componentTest=$2
failed=0

#__________________________________
# bulletproof the inputs
if [ "$BUILDROOT" = "" -o "$PARALLELISM" = "" -o "$OS" = "" -o "$COMMON_GROUP"  = "" ]; then
  echo "ERROR:run  One of the environmental variables (BUILDROOT, PARALLELISM, OS, COMMON_GROUP) has not been set"
  exit -1
fi

is_dbg="no"
if [ "$mode" = "dbg" ]; then
  is_dbg="yes"
fi

#__________________________________
# create the do<component>tests  python script
cd "${BUILDROOT}/${mode}"
doTestScript="do${componentTest}tests"
echo "#!/bin/tcsh"                                         > "$doTestScript"
echo "setenv PATH $PATH"                                   >> "$doTestScript"
echo "setenv OS $OS"                                       >> "$doTestScript"
echo "setenv SCI_DEBUG \"\""                               >> "$doTestScript"
echo "setenv LOCAL_OR_NIGHTLY_TEST $LOCAL_OR_NIGHTLY_TEST" >> "$doTestScript"
echo "setenv WHICH_TESTS $WHICH_TESTS"                     >> "$doTestScript"
echo "setenv SCI_MALLOC_ENABLED $is_dbg"                   >> "$doTestScript"

echo "python TestScripts/$componentTest.py susdir inputs goldStandard $mode $PARALLELISM "'$1' >> "$doTestScript"

/bin/chmod a+x "$doTestScript"

#__________________________________
# run the python script that contains all
# tests for that component
rm -f "${BUILDROOT}/${mode}/${componentTest}-short.log"
"$doTestScript" > comp.log  2>&1
retval=$?

mv comp.log "${componentTest}.log"
cat "${componentTest}.log" >> summary_log
cat "${componentTest}.log" >> "$HTMLLOG"

#__________________________________
# find plots that were generated for this component copy them to the 
# public.html directory. Add a link to the web page

plotDir=`dirname ${HTMLLOG}`
#plotDir=/tmp

plotDir="$plotDir/Plots/"

compDir="$componentTest-results"

# memory Tests:

# remove previous plots and copy plots to the public directory
/bin/rm -rf $plotDir/Memory/$compDir >&/dev/null
find $compDir -name "memHistory.png" -print0 | cpio -pmd0 --quite $plotDir/Memory/ 

# update the web page
echo "<h4>High water memory usage plots</h4>" >> $HTMLLOG
find $compDir -name "memHistory.png" -printf "<a href = Plots/Memory/%p> %h</a>\n" >> $HTMLLOG

cd TestScripts

#__________________________________
# Setting or removing component locks
if [ $retval = "0" ]; then
  echo "Passed: ${componentTest}-${mode} tests! "

  # It was successful, so it can remove the lock
  if [ -d "${BUILD_DIR}/${componentTest}-${mode}.lock" ]; then
      rm "${BUILD_DIR}/${componentTest}-${mode}.lock"
  fi
elif [ $retval = "3" ]; then
  echo "Skipped: ${componentTest}-$mode tests"
else
  echo "Failed: ${componentTest}-${mode} tests"
  if [ ! -d "${BUILD_DIR}/${componentTest}-${mode}.lock" ]; then
    ln -s "$BUILDROOT" "${BUILD_DIR}/${componentTest}-${mode}.lock" > /dev/null 2>&1
  fi
  if [ -f "${BUILDROOT}/${mode}/${componentTest}-short.log" ]; then
    cat "${BUILDROOT}/${mode}/${componentTest}-short.log"
  fi
  failed=1
fi



exit $failed
