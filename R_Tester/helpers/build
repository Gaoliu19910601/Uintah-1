#!/bin/sh

export OS
mode=$1 # dbg or opt

#__________________________________
# construct the configure_command file

if [ "$OS" == "Linux" ]; then
  export PETSC_ARCH=linux-gnu-amd64
  
  
  DBG_CONFIGURE="    --enable-debug \\
      --enable-64bit \\
      --enable-sci-malloc \\ 
      --enable-scinew-line-numbers \\"
  
  OPT_CONFIGURE="    --enable-64bit \\
      --enable-assertion-level=0 \\
     '--enable-optimize=-O3 -mfpmath=sse' \\"
      
  COMMON="      --with-mpi=/usr/lib/openmpi \\
       --with-hdf5 \\
       --with-tabprops=/usr/local/home/jsutherland/UintahTPL \\
       --with-exprlib=/usr/local/home/jsutherland/UintahTPL \\
       --with-spatialops=/usr/local/home/jsutherland/UintahTPL \\
       --with-boost=/usr/local/share/wasatch/Boost-Install/1.44/gcc4.3.2 \\
       USE_WASATCH=no \\"
  
  ENV="      CC=gcc-4.2 \\
       CXX=g++-4.2 \\
       F77=gfortran-4.2"
       
  
elif [ "$OS" == "Darwin" ]; then
  export PETSC_ARCH=darwin9.4.0-c-real-opt
  COMMON="    --enable-package='Uintah Teem' \\
       --with-petsc=/usr/sci/projects/Uintah/Thirdparty/1.0.0/Darwin/PPC-9.4.0/gcc-4.0.1-openmpi-32bit \\
       --with-hypre=/usr/sci/projects/Uintah/Thirdparty/1.0.0/Darwin/PPC-9.4.0/gcc-4.0.1-openmpi-32bit \\
       --with-mpi=/usr/local/openmpi \\"
  DBG_CONFIGURE="$COMMON $DBG_CONFIGURE"
  OPT_CONFIGURE="$COMMON '--enable-optimize=-mcpu=7450 -O2 -fsigned-char -maltivec -mabi=altivec -mpowerpc-gfxopt' $OPT_CONFIGURE"
fi

echo "#!/bin/csh" > configure_command
echo "../../src/configure --enable-package=Uintah \\" >> configure_command
 
if [ "$mode" = "dbg" ]; then
  echo "$DBG_CONFIGURE" >> configure_command
  echo "$COMMON" >> configure_command
  echo "$ENV" >> configure_command
elif [ "$mode" = "opt" ]; then
  echo "$OPT_CONFIGURE" >> configure_command
  echo "$COMMON" >> configure_command
  echo "$ENV" >> configure_command
fi

chmod a+x configure_command
retval="0"

#__________________________________
echo "" >> $HTMLLOG
echo "Compiling" >> $HTMLLOG
echo "==================================" >> $HTMLLOG
echo "" >> $HTMLLOG
echo "Starting configure on `date`" >> $HTMLLOG
echo "  with command" >> $HTMLLOG
grep configure configure_command >> $HTMLLOG
echo "" >> $HTMLLOG


#__________________________________
# determing which "make" to use
which make
retval=$?
which gmake
retval1=$?

if [ $retval == "0" ]; then
  MAKE=make
elif [ $retval1 == "0" ]; then
  MAKE=gmake
fi

#__________________________________
#  run configure
rm -f "$BUILDROOT"/${mode}/configure.log
./configure_command > "$BUILDROOT"/${mode}/configure.log 2>&1
retval=$?

chgrp csafe *
chmod g+rwX * 


#__________________________________
# configure:  failed
if [ $retval != "0" ]; then
  echo "Configure failed:" >> $HTMLLOG
  cat "${BUILDROOT}"/"${mode}"/configure.log >> $HTMLLOG

  echo "*** Configure failed with code $retval"
  echo ""
# echo "Showing configure log:"
# cat "${BUILDROOT}/${mode}/configure.log"

  cd "${BUILD_DIR}"
  if [ ! -d "configure-${mode}.lock" ]; then
   # failed ${mode} configure, set a lock
   ln -s "$BUILDROOT" "configure-${mode}.lock"
  fi
  exit 1
fi

#__________________________________
# configure:  Passed
echo "Configure successful"

if [ -d "${BUILD_DIR}/configure-${mode}.lock" ]; then
  # configured successfully - remove old configure lock 
  rm "${BUILD_DIR}/configure-${mode}.lock"
fi

echo "Starting build on `date`:" >> $HTMLLOG

cd "${BUILDROOT}/${mode}/build"
    
rm -f "../make.log" "../make_results.log"

$MAKE -k -j$MAKE_PARALLELISM >> ../make.log 2>&1


retval=$?
if [ $retval != "0" ]; then
  # try it again -- it may not go all the way the first time
  echo "Failed first compile, try again"
  $MAKE -k -j$MAKE_PARALLELISM >> ../make.log 2>&1
  retval=$?
fi

if [ $retval != "0" ]; then
  # try it again -- it may not go all the way the first time
  echo "Failed second compile, try again (storing make errors)"
  $MAKE -k -j$MAKE_PARALLELISM > ../remake_with_fortran.log 2>&1
  retval=$?
fi

if [ $retval != "0" ]; then
  # failed 3 times
  if  [ -x "${BUILDROOT}/${mode}/build/StandAlone/sus" ]; then
    # sus compiled alone
    mv ../remake_with_fortran.log ../remake_failed_scirun.log
    echo "*** Make failed, but sus was compiled successfully"
    echo "A log of build errors can be found in"
    echo "${BUILDROOT}/${mode}/remake_failed_scirun.log"
    echo "A full log of trying to compile everything twice can be found in"
    echo "${BUILDROOT}/${mode}/make.log"
    echo ""
  else
    # No sus compiled -- try compiling without fortran - turn off Arches and Models/Radiation
    # Use Todd's make target to turn off fortran"
    echo "Failed third compile, try without fortran."

    FILES="${BUILDROOT}/src/StandAlone/sub.mk" "${BUILDROOT}/src/CCA/Components/sub.mk" "${BUILDROOT}/src/CCA/Components/Dummy/sub.mk" "${BUILDROOT}/src/CCA/Components/Parent/sub.mk" "${BUILDROOT}/src/CCA/Components/Models/sub.mk" "${BUILDROOT}/src/CCA/Components/Models/ModelFactory.cc"

    for file in $FILES; do cp $file $file.orig; done

    $MAKE noFortran > ../remake_without_fortran.log 2>&1
    cd "${BUILDROOT}/${mode}/build"
    $MAKE -k -j$MAKE_PARALLELISM >> ../remake_without_fortran.log 2>&1
    retval=$?

    # Restore original files -- I keep forgetting when fortran is taken out
    # and wondering why tests can't run after the problems been fixed.
     for file in $FILES; do cp $file.orig $file; done

    failed_sus=0
    if [ $retval = "0" ]; then
      echo "*** Make failed with FORTRAN, but passed without it."
      echo ""
      echo "Showing make errors with FORTRAN:" > ../make_results.log
     WithArches="no"
    elif  [ -x "${BUILDROOT}/${mode}/build/StandAlone/sus" ]; then
      echo "*** Make failed, but sus was compiled successfully without FORTRAN"
      echo ""
      echo "Showing make errors with FORTRAN:" > ../make_results.log
      WithArches="no"
    else
        echo "*** Make failed with code $retval"
        echo ""
        echo "Showing make errors:"  > ../make_results.log
        failed_sus=1
    fi
    # show the compile errors (just the stuff it can't compile)
    cat ../remake_with_fortran.log >> ../make_results.log
    echo ""

    # Add compilation problems to webpage
    cat ../make_results.log >> "$HTMLLOG"

    # failed make, set a lock for this build
    if [ ! -d "${BUILD_DIR}/make-${mode}.lock" ]; then
      ln -s "$BUILDROOT" "${BUILD_DIR}/make-${mode}.lock"
    fi

    if [ $failed_sus != "0" ]; then
      exit 1
    fi
  fi
fi

if [ -d "${BUILD_DIR}/make-${mode}.lock" ]; then
  # built successfully - remove old make lock 
  rm "${BUILD_DIR}/make-${mode}.lock"
fi

echo "Sus compiled successfully"
echo "Sus compiled successfully" >> $HTMLLOG
exit 0
