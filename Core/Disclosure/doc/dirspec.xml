<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE dir SYSTEM "../../../../doc/dirspec.dtd">
<?xml-stylesheet href="../../../../doc/dirspec.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
-->

<dir name="Core/Disclosure">
  <fit>
  <!-- describe how this directory fits into SCIRun - why does it 
       exist, how does SCIRun benefit from it, etc. -->
    <p>
       The Disclosure directory contains objects that discover information 
       about types, as well as objects that produce previously uncompiled
       types.
    </p>

    <p>
       This directory also contains the TypeDescription object, as well
       as the DynamicLoader. TypeDescription gives a recursive definition 
       of type at runtime.  One can query a string that indicates the type
       from the this object. It also provides information that can by used 
       by the DynamicLoader to compile types that support TypeDescription.
    </p>
    
    <p>
       The DynamicLoader writes a .cc file, compiles it, then loads in the .so
       all at runtime.  The main function is to compile algorithms that are
       templated on various field types in SCIRun. This gives SCIRun a minimal
       set of template instantiation based on how a user happens to use 
       SCIRun, as opposed to the combinatorial explosion of template bloat 
       that is the alternative.
    </p>
  </fit>
  <use>
    <when>
    <!-- Discuss when or where to use the functions and classes in
         this directory: From within modules?, when a certain event
	 occurs? -->
      <p>
        A developer is likely to use this code from within modules that 
        has a field port. A FieldHandle can be one of *many* types of fields.
        An algorithm can be templated on the field, and use the DynamicLoader 
        to manage compilation and loading of the algorithm without the 
        module code ever needing to know the exact type of the field.
      </p>
    </when>
    <why>
    <!-- Discuss why a developer would need or want to use the
         functions and/or classes in this directory. -->
      <p>
         The main use of code in this directory is to compile and load 
         templated algorithms for use in modules.
      </p>
    </why>
  </use>
  <definition>
    <term>get_type_description</term>
    <p>
       There are many of these functions.  Each is overloaded on the type that
       the returned TypeDescription supports. There must be one of these if
       your type is to be supported in dynamic compilation.
    </p>
    <p>
       An example of a simple get_type_description for int.
    </p>
    <code>
       const TypeDescription* get_type_description(int*)
       {
       	 static TypeDescription* td = 0;
       	 static string nm("int");
       	 static string path("builtin");
       	 if(!td){
       	   td = scinew TypeDescription(nm, path);
       	 }
       	 return td;
       }
    </code>
    <p>
       An example of a templated get_type_description function.
    </p>
    <code>
       template &lt;class T &gt;
       const TypeDescription* get_type_description(vector &lt;T &gt;*)
       {
         static TypeDescription* td = 0;
         static string v("vector");
         static string path("std::vector"); 
         if(!td){
           const TypeDescription *sub = SCIRun::get_type_description((T*)0);
           TypeDescription::td_vec *subs = scinew TypeDescription::td_vec(1);
           (*subs)[0] = sub;
           td = scinew TypeDescription(v, subs, path);
         }
         return td;
       }
    </code>
    <!-- one of (p code) -->
  </definition>
</dir>

