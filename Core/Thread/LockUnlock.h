/*
 * This file was automatically generated by SCC - do NOT edit!
 * You should edit LockUnlock.scc instead 
 */

#ifndef SCI_THREAD_LOCKUNLOCK_H
#define SCI_THREAD_LOCKUNLOCK_H 1

/*
 * Utility class to lock and unlock a <b>Mutex</b> or a <b>CrowdMonitor</b>.
 * The constructor of the <b>LockUnlock</b> object will lock the mutex
 * (or <b>CrowdMonitor</b>), and the destructor will unlock it.
 * <p>
 * This would be used like this:
 * <blockquote><pre>
 * {
 * <blockquote>LockUnlock mlock(&mutex);  // Acquire the mutex
 *     ... critical section ...</blockquote>
 * } // mutex is released when mlock goes out of scope
 * </pre></blockquote>
 */
class CrowdMonitor;
class Mutex;

/**************************************
 
CLASS
   LockUnlock
   
KEYWORDS
   LockUnlock
   
DESCRIPTION
   Utility class to lock and unlock a <b>Mutex</b> or a <b>CrowdMonitor</b>.
   The constructor of the <b>LockUnlock</b> object will lock the mutex
   (or <b>CrowdMonitor</b>), and the destructor will unlock it.
   <p>
   This would be used like this:
   <blockquote><pre>
   {
   <blockquote>LockUnlock mlock(&mutex);  // Acquire the mutex
       ... critical section ...</blockquote>
   } // mutex is released when mlock goes out of scope
   </pre></blockquote>
PATTERNS


WARNING
   
****************************************/

class SCICORESHARE LockUnlock {
    Mutex* mutex;
    CrowdMonitor* monitor;
public:
    //////////
    //Attach the <b>LockUnlock</b> object to the <i>mutex</i> , and acquire the mutex.
    LockUnlock(Mutex* mutex);
    enum Which {
	Read,
	Write
    };
    
    //////////
    //Attach the <b>LockUnlock</b> to the <i>CrowdMonitor</pre> and acquire one of the locks If
    //<i>action</i> is <b>Read</b>, the read lock will be acquired, and if <i>action</i> 
    //is <b>Write</b>, then the write lock will be acquired.  The appropriate lock will then be
    //released by the destructor
    LockUnlock(CrowdMonitor* crowdMonitor, Which action) ;
    
    //////////
    //Release the lock acquired by the constructor.
    ~LockUnlock() ;
private:
    Which action;
};

#endif




