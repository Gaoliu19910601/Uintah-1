/*
 * This file was automatically generated by SCC - do NOT edit!
 * You should edit Semaphore.scc instead 
 */

#ifndef SCI_THREAD_SEMAPHORE_H
#define SCI_THREAD_SEMAPHORE_H 1

/*
 * Counting semaphore synchronization primitive.  A semaphore provides
 * atomic access to a special counter.  The <i>up</i> method is used
 * to increment the counter, and the <i>down</i> method is used to
 * decrement the counter.  If a thread tries to decrement the counter
 * when the counter is zero, that thread will be blocked until another
 * thread calls the <i>up</i> method.
 */




class Semaphore_private;

/**************************************
 
CLASS
   Semaphore
   
KEYWORDS
   Semaphore
   
DESCRIPTION
   Counting semaphore synchronization primitive.  A semaphore provides
   atomic access to a special counter.  The <i>up</i> method is used
   to increment the counter, and the <i>down</i> method is used to
   decrement the counter.  If a thread tries to decrement the counter
   when the counter is zero, that thread will be blocked until another
   thread calls the <i>up</i> method.

PATTERNS


WARNING
   
****************************************/

class Semaphore {
    Semaphore_private* priv;
    const char* name;
public:
    //////////
    //Create the semaphore, and setup the initial <i>count.name</i> should be a static string
    //which describes the primitive for debugging purposes.
    Semaphore(const char* name, int count);

    //////////
    //Destroy the semaphore
    ~Semaphore();

    //////////
    //Increment the semaphore count, unblocking up to one thread that may be blocked in the
    //<i>down</i> method.
    void up();
    
    //////////
    //Decrement the semaphore count.  If the count is zero, this thread will be blocked until
    //another thread calls the <i>up</i> method.  The order in which threads will be unblocked is
    //not defined, but implementors should give preference to those threads that have waited
    //the longest.
    void down();

    //////////
    //Attempt to decrement the semaphore count, but will never block.  If the count was zero,
    //<i>try_down</i> will return false.  Otherwise, <i>try_down</i> will return true.
    bool tryDown();
};

#endif





