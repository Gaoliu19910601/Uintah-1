/*
 * This file was automatically generated by SCC - do NOT edit!
 * You should edit Parallel.scc instead 
 */

#ifndef SCI_THREAD_PARALLEL_H
#define SCI_THREAD_PARALLEL_H 1

/*
 * Helper class to make instantiating threads to perform a parallel
 * task easier.
 */

#include "ParallelBase.h"


/**************************************
 
CLASS
   Parallel
   
KEYWORDS
   Parallel
   
DESCRIPTION
   Helper class to make instantiating threads to perform a parallel
   task easier.
PATTERNS


WARNING
   
****************************************/


template<class T> class Parallel  : public ParallelBase {
    T* obj;
    //////////
    //<i>No Documentation Provided</i>
    void (T::*pmf)(int);
protected:
    //////////
    //<i>No documentation provided</i>
    virtual void run(int proc) ;
public:
    //////////
    //Create the parallel object similar to the above, but using the specified member function
    //instead of <i>parallel</i>.  This will typically be used like-
    //<pre>Thread::parallel(Parallel&ltMyClass> (this, &ampMyClass::mymemberfn), nthreads)</pre>
    Parallel(T* obj, void (T::*pmf)(int)) ;
    
    //////////
    //Destroy the Parallel object - the threads will remain alive.
    ~Parallel() ;
};

template<class T> void Parallel< T>::run(int proc) {
    (obj->*pmf)(proc);
}

template<class T> Parallel< T>::Parallel(T* obj, void (T::*pmf)(int)) : obj(obj), pmf(pmf) {}

template<class T> Parallel< T>::~Parallel() {}

#endif
