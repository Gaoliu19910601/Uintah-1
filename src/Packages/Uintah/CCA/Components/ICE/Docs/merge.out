@@ -690,20 +703,22 @@
   const MaterialSet* ice_matls = d_sharedState->allICEMaterials();
   const MaterialSubset* ice_matls_sub = ice_matls->getUnion();
   if (grav.length() > 0 ) {
-    cout_doing << "Doing ICE::scheduleHydroStaticAdj " << endl;
     Task* t2 = scinew Task("ICE::initializeSubTask_hydrostaticAdj",
                      this, &ICE::initializeSubTask_hydrostaticAdj);
     Ghost::GhostType  gn  = Ghost::None;
-    t2->requires(Task::NewDW,lb->gammaLabel,         ice_matls_sub, gn);
-    t2->requires(Task::NewDW,lb->specific_heatLabel, ice_matls_sub, gn);
-   
-    t2->modifies(lb->rho_micro_CCLabel);
-    t2->modifies(lb->temp_CCLabel);
-    t2->modifies(lb->press_CCLabel, d_press_matl, oims); 
+    t2->requires(Task::NewDW, lb->sp_vol_CCLabel, Ghost::None);
+    t2->modifies(lb->int_eng_CCLabel);
 
+    int numICEMatls = d_sharedState->getNumICEMatls();
+    for(int m = 0;m < numICEMatls; m++){
+      ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+      ice_matl->getThermo()->addTaskDependencies_cv(t2, ThermoInterface::NewState, 0);
+      ice_matl->getThermo()->addTaskDependencies_gamma(t2, ThermoInterface::NewState, 0);
+      ice_matl->getThermo()->addTaskDependencies_int_eng(t2, ThermoInterface::NewState, 0);
+    }
     sched->addTask(t2, level->eachPatch(), ice_matls);
   }
-  
+  scheduleComputeSpeedOfSound(sched, level->eachPatch(), ice_matls);
 }
 
 /* _____________________________________________________________________
@@ -770,13 +785,30 @@
   Ghost::GhostType  gac = Ghost::AroundCells;
   Ghost::GhostType  gn = Ghost::None;
   const MaterialSet* ice_matls = d_sharedState->allICEMaterials();
-                            // COMMON TO EQ AND RATE FORM
-  t->requires(Task::NewDW, lb->vel_CCLabel,        gac, 1);  
-  t->requires(Task::NewDW, lb->speedSound_CCLabel, gac, 1);
-  t->requires(Task::NewDW, lb->thermalCondLabel,   gn,  0);
-  t->requires(Task::NewDW, lb->gammaLabel,         gn,  0);
-  t->requires(Task::NewDW, lb->specific_heatLabel, gn,  0);
-                            
+  // COMMON TO EQ AND RATE FORM
+  int numGhostCells;
+  if (d_delT_scheme == "aggressive") {
+    // Agressive scheme
+    numGhostCells = 0;
+  } else {
+    // Conservative scheme - needs 1 layer of ghost cells on velocity and speed of sound
+    numGhostCells = 1;
+  }
+  Ghost::GhostType ghostType = numGhostCells == 0? Ghost::None:Ghost::AroundCells;
+
+  t->requires(Task::NewDW, lb->speedSound_CCLabel, ghostType, numGhostCells);
+
+  // Thermo/EOS dependencies may vary per material
+  int numICEMatls = d_sharedState->getNumICEMatls();
+  for(int m = 0;m < numICEMatls; m++){
+    ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+    // Require data to compute thermal diffusivity
+    ice_matl->getThermo()->addTaskDependencies_thermalDiffusivity(t, ThermoInterface::NewState, 0);
+  }
+
+  t->requires(Task::NewDW, lb->vel_CCLabel,        ghostType, numGhostCells);  
+  t->requires(Task::NewDW, lb->int_eng_CCLabel, Ghost::None);
+
   if (d_EqForm){            // EQ      
     t->requires(Task::NewDW, lb->sp_vol_CCLabel,   gn,  0);   
     t->requires(Task::NewDW, lb->viscosityLabel,   gn,  0);        
@@ -796,9 +828,90 @@
     }
   }
 }
+
 /* _____________________________________________________________________
+ Function~  ICE::scheduleComputeInternalEnergy--
+_____________________________________________________________________*/
+void ICE::scheduleComputeInternalEnergy(SchedulerP& sched,
+                                        const PatchSet* patches,
+                                        const MaterialSet* ice_matls)
+{
+  int levelIndex = getLevel(patches)->getIndex();
+  if(!doICEOnLevel(levelIndex))
+    return;
+  
+  cout_doing << "ICE::scheduleComputeInternalEnergy \t\t\tL-"
+             << levelIndex << endl;
+  Task* t = scinew Task("ICE::computeInternalEnergy",
+                        this, &ICE::computeInternalEnergy);
+  t->requires(Task::NewDW, lb->ntemp_CCLabel, Ghost::None);
+  t->requires(Task::NewDW, lb->sp_vol_CCLabel, Ghost::None);
+  int numICEMatls = d_sharedState->getNumICEMatls();
+  for(int m = 0;m < numICEMatls; m++){
+    ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+    ice_matl->getThermo()->addTaskDependencies_int_eng(t, ThermoInterface::NewState, 0);
+  }
+  t->computes(lb->int_eng_CCLabel);
+  sched->addTask(t, patches, ice_matls);
+}
+
+/* _____________________________________________________________________
+ Function~  ICE::scheduleComputeTemperature--
+_____________________________________________________________________*/
+void ICE::scheduleComputeTemperature(SchedulerP& sched,
+                                     const PatchSet* patches,
+                                     const MaterialSet* ice_matls)
+{
+  int levelIndex = getLevel(patches)->getIndex();
+  if(!doICEOnLevel(levelIndex))
+    return;
+  
+  cout_doing << "ICE::scheduleComputeTemperature \t\t\tL-"
+             << levelIndex << endl;
+  Task* t = scinew Task("ICE::computeTemperature",
+                        this, &ICE::computeTemperature);
+  t->requires(Task::NewDW, lb->int_eng_CCLabel, Ghost::None);
+  t->requires(Task::NewDW, lb->sp_vol_CCLabel, Ghost::None);
+  int numICEMatls = d_sharedState->getNumICEMatls();
+  for(int m = 0;m < numICEMatls; m++){
+    ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+    ice_matl->getThermo()->addTaskDependencies_int_eng(t, ThermoInterface::NewState, 0);
+  }
+  t->computes(lb->ntemp_CCLabel);
+  sched->addTask(t, patches, ice_matls);
+}
+
+/* _____________________________________________________________________
  Function~  ICE::scheduleTimeAdvance--
 _____________________________________________________________________*/
+void ICE::scheduleComputeSpeedOfSound(SchedulerP& sched,
+                                      const PatchSet* patches,
+                                      const MaterialSet* ice_matls)
+{
+  int levelIndex = getLevel(patches)->getIndex();
+  if(!doICEOnLevel(levelIndex))
+    return;
+  
+  cout_doing << "ICE::scheduleComputeSpeedOfSound \t\t\tL-"
+             << levelIndex << endl;
+  Task* t = scinew Task("ICE::computeSpeedOfSound",
+                        this, &ICE::computeSpeedOfSound);
+  t->requires(Task::NewDW, lb->sp_vol_CCLabel, Ghost::None);
+  t->requires(Task::NewDW, lb->int_eng_CCLabel, Ghost::None);
+  int numICEMatls = d_sharedState->getNumICEMatls();
+  for(int m = 0;m < numICEMatls; m++){
+    ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+    ice_matl->getThermo()->addTaskDependencies_cv(t, ThermoInterface::NewState, 0);
+    ice_matl->getThermo()->addTaskDependencies_gamma(t, ThermoInterface::NewState, 0);
+    ice_matl->getThermo()->addTaskDependencies_Temp(t, ThermoInterface::NewState, 0);
+  }
+  t->computes(lb->speedSound_CCLabel);
+  sched->addTask(t, patches, ice_matls);
+}
+
+/* _____________________________________________________________________
+ Function~  ICE::scheduleTimeAdvance--
+_____________________________________________________________________*/
 void
 ICE::scheduleTimeAdvance( const LevelP& level, SchedulerP& sched, 
                           int step, int nsteps )
@@ -837,6 +950,13 @@
   scheduleMaxMach_on_Lodi_BC_Faces(       sched, level,   ice_matls, 
                                                           maxMach_PSS);
                                                           
+  // schedule reactions
+  int numICEMatls = d_sharedState->getNumICEMatls();
+  for(int m = 0;m < numICEMatls; m++){
+    ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+    ice_matl->getThermo()->scheduleReactions(sched, level->eachPatch());
+  }
+  
   scheduleComputeThermoTransportProperties(sched, level,  ice_matls);
   
   scheduleComputePressure(                sched, patches, d_press_matl,
@@ -920,7 +1040,7 @@
                                                           all_matls);
 
   scheduleComputeLagrangian_Transported_Vars(sched, patches,
-                                                          all_matls);
+                                             all_matls);
                                    
   scheduleAdvectAndAdvanceInTime(         sched, patches, AMR_subCycleProgressVar,
                                                           ice_matls_sub,
@@ -931,6 +1051,8 @@
   scheduleTestConservation(               sched, patches, ice_matls_sub,
                                                           all_matls); 
 
+  scheduleComputeTemperature(             sched, patches, ice_matls);
+
   if(d_canAddICEMaterial){
     //  This checks to see if the model on THIS patch says that it's
     //  time to add a new material
@@ -947,9 +1069,10 @@
  Function~  ICE::scheduleComputeThermoTransportProperties--
 _____________________________________________________________________*/
 void ICE::scheduleComputeThermoTransportProperties(SchedulerP& sched,
-                                const LevelP& level,
-                                const MaterialSet* ice_matls)
+                                                   const LevelP& level,
+                                                   const MaterialSet* ice_matls)
 { 
+  cerr << "WARNING: computeThermoTransportProperties should go away\n";
   if(!doICEOnLevel(level->getIndex()))
     return;
 
@@ -966,12 +1089,10 @@
   //}           
   
   t->computes(lb->viscosityLabel);
-  t->computes(lb->thermalCondLabel);
-  t->computes(lb->gammaLabel);
-  t->computes(lb->specific_heatLabel);
   
   sched->addTask(t, level->eachPatch(), ice_matls);
 
+#if 0
   //__________________________________
   //  Each model *can* modify the properties
   if(d_models.size() != 0){
@@ -983,6 +1104,7 @@
       } 
     }
   }
+#endif
 }
 
 /* _____________________________________________________________________
@@ -1014,10 +1136,8 @@
   Ghost::GhostType  gn = Ghost::None;
   t->requires(Task::OldDW,lb->press_CCLabel, press_matl, oims, gn);
   t->requires(Task::OldDW,lb->rho_CCLabel,               gn);
-  t->requires(Task::OldDW,lb->temp_CCLabel,              gn); 
+  t->requires(Task::OldDW,lb->int_eng_CCLabel,              gn); 
   t->requires(Task::OldDW,lb->sp_vol_CCLabel,            gn);
-  t->requires(Task::NewDW,lb->gammaLabel,                gn);
-  t->requires(Task::NewDW,lb->specific_heatLabel,        gn);
   
   t->computes(lb->f_theta_CCLabel); 
   t->computes(lb->speedSound_CCLabel);
@@ -1029,6 +1149,14 @@
   t->computes(lb->press_equil_CCLabel, press_matl, oims);
   t->computes(lb->press_CCLabel,       press_matl, oims);  // needed by implicit
  
+  int numICEMatls = d_sharedState->getNumICEMatls();
+  for(int m = 0;m < numICEMatls; m++){
+    ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+    ice_matl->getThermo()->addTaskDependencies_cv(t, ThermoInterface::IntermediateState, 0);
+    ice_matl->getThermo()->addTaskDependencies_gamma(t, ThermoInterface::IntermediateState, 0);
+    ice_matl->getThermo()->addTaskDependencies_Temp(t, ThermoInterface::IntermediateState, 0);
+  }
+
   if (d_RateForm) {     // RATE FORM
     t->computes(lb->matl_press_CCLabel, press_matl,oims);
   }
@@ -1048,6 +1176,8 @@
                                 const MaterialSubset* mpm_matls,
                                 const MaterialSet* all_matls)
 { 
+  cerr << "WARNING: scheduleComputeTempFC not finished\n";
+#if 0
   int levelIndex = getLevel(patches)->getIndex();
   if(!doICEOnLevel(levelIndex))
     return;
@@ -1067,7 +1197,9 @@
   t->computes(lb->TempY_FCLabel);
   t->computes(lb->TempZ_FCLabel);
   sched->addTask(t, patches, all_matls);
+#endif
 }
+
 /* _____________________________________________________________________
  Function~  ICE::scheduleComputeVel_FC--
 _____________________________________________________________________*/
@@ -1403,13 +1535,20 @@
 //  t->requires(Task::OldDW, lb->delTLabel);  FOR AMR
   t->requires(Task::NewDW, lb->press_CCLabel,     press_matl,oims, gn);
   t->requires(Task::NewDW, lb->compressiblityLabel,                gn);
-  t->requires(Task::OldDW, lb->temp_CCLabel,      ice_matls, gac,1);
-  t->requires(Task::NewDW, lb->thermalCondLabel,  ice_matls, gac,1);
   t->requires(Task::NewDW, lb->rho_CCLabel,                  gac,1);
+  t->requires(Task::OldDW, lb->int_eng_CCLabel,              gac,1);
   t->requires(Task::NewDW, lb->sp_vol_CCLabel,               gac,1);
   t->requires(Task::NewDW, lb->vol_fracX_FCLabel, ice_matls, gac,2);
   t->requires(Task::NewDW, lb->vol_fracY_FCLabel, ice_matls, gac,2);
   t->requires(Task::NewDW, lb->vol_fracZ_FCLabel, ice_matls, gac,2);
+  int numICEMatls = d_sharedState->getNumICEMatls();
+  for(int m = 0;m < numICEMatls; m++){
+    ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+    // Require data to compute thermal conduction
+    ice_matl->getThermo()->addTaskDependencies_thermalConductivity(t, ThermoInterface::IntermediateState, 0);
+    ice_matl->getThermo()->addTaskDependencies_Temp(t, ThermoInterface::IntermediateState, 0);
+  }
+  
 
   if (d_EqForm) {       //EQ FORM
     t->requires(Task::NewDW, lb->delP_DilatateLabel,press_matl,oims, gn);
@@ -1453,10 +1592,9 @@
   Task* t = scinew Task("ICE::computeLagrangianValues",
                       this,&ICE::computeLagrangianValues);
   Ghost::GhostType  gn  = Ghost::None;
-  t->requires(Task::NewDW,lb->specific_heatLabel,      gn); 
   t->requires(Task::NewDW,lb->rho_CCLabel,             gn);
   t->requires(Task::OldDW,lb->vel_CCLabel,             gn);
-  t->requires(Task::OldDW,lb->temp_CCLabel,            gn);
+  t->requires(Task::OldDW,lb->int_eng_CCLabel,         gn);
   t->requires(Task::NewDW,lb->mom_source_CCLabel,      gn);
   t->requires(Task::NewDW,lb->int_eng_source_CCLabel,  gn);
 
@@ -1511,8 +1649,15 @@
   t->requires(Task::NewDW, lb->Tdot_CCLabel,              gn);  
   t->requires(Task::NewDW, lb->f_theta_CCLabel,           gn);
   t->requires(Task::NewDW, lb->vol_frac_CCLabel,          gac,1);
-  t->requires(Task::OldDW, lb->temp_CCLabel,   ice_matls, gn);
-  t->requires(Task::NewDW, lb->temp_CCLabel,   mpm_matls, gn); 
+  t->requires(Task::NewDW, lb->otemp_CCLabel,   mpm_matls, gn); 
+  t->requires(Task::OldDW, lb->int_eng_CCLabel, ice_matls, gn);
+  int numICEMatls = d_sharedState->getNumICEMatls();
+  for(int m = 0;m < numICEMatls; m++){
+    ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+    ice_matl->getThermo()->addTaskDependencies_Temp(t, ThermoInterface::IntermediateState, 0);
+    ice_matl->getThermo()->addTaskDependencies_cv(t, ThermoInterface::IntermediateState, 0);
+  }
+
   if (d_RateForm) {         // RATE FORM
     t->requires(Task::NewDW, lb->uvel_FCMELabel,      gac,1);
     t->requires(Task::NewDW, lb->vvel_FCMELabel,      gac,1);
@@ -1520,7 +1665,6 @@
   }
   if (d_EqForm) {           // EQ FORM
     t->requires(Task::NewDW, lb->compressiblityLabel,          gn);
-    t->requires(Task::NewDW, lb->specific_heatLabel,ice_matls, gn);
     t->requires(Task::NewDW, lb->delP_DilatateLabel,press_matl,oims,gn);
   }
   if(d_models.size() > 0){
@@ -1547,7 +1691,7 @@
   if(!doICEOnLevel(levelIndex))
     return;
 
-  if(d_models.size() > 0 && d_modelSetup->tvars.size() > 0){
+  if(d_modelSetup->tvars.size() > 0){
     cout_doing << "ICE::scheduleComputeLagrangian_Transported_Vars" 
                << "\t\t\tL-"<<levelIndex<< endl;
                
@@ -1563,7 +1707,7 @@
         t_iter != d_modelSetup->tvars.end(); t_iter++){
       TransportedVariable* tvar = *t_iter;
                          // require q_old
-      t->requires(Task::OldDW, tvar->var,   tvar->matls, gn, 0);
+      t->requires(tvar->fromDW, tvar->fromVar,   tvar->matls, gn, 0);
 
       if(tvar->src){     // require q_src
         t->requires(Task::NewDW, tvar->src, tvar->matls, gn, 0);
@@ -1610,9 +1754,8 @@
     t->requires(Task::OldDW,MIlb->NC_CCweightLabel, press_matl, gac, 1);
   }
                                 // I C E
-  t->requires(Task::OldDW,  lb->temp_CCLabel,      ice_matls, gn);
-  t->requires(Task::NewDW,  lb->specific_heatLabel,ice_matls, gn);
-  t->requires(Task::NewDW,  lb->gammaLabel,        ice_matls, gn);
+  cerr << "scheduleAddExchangeToMomentumAndEnergy not finished\n";
+  //t->requires(Task::NewDW,  lb->otemp_CCLabel,     ice_matls, gn);
                                 // A L L  M A T L S
   t->requires(Task::NewDW,  lb->mass_L_CCLabel,           gn);      
   t->requires(Task::NewDW,  lb->mom_L_CCLabel,            gn);      
@@ -1628,6 +1771,14 @@
     t->requires(Task::OldDW, lb->vel_CCLabel,       ice_matls,  gn); 
   }
 
+  int numICEMatls = d_sharedState->getNumICEMatls();
+  for(int m = 0;m < numICEMatls; m++){
+    ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+    ice_matl->getThermo()->addTaskDependencies_Temp(t, ThermoInterface::OldState, 0);
+    ice_matl->getThermo()->addTaskDependencies_Temp(t, ThermoInterface::IntermediateState, 0);
+  }
+
+
   computesRequires_CustomBCs(t, "CC_Exchange", lb, ice_matls,
                              d_customBC_var_basket); 
 
@@ -1636,7 +1787,7 @@
   t->computes(lb->eng_L_ME_CCLabel); 
   
   if (mpm_matls->size() > 0){  
-    t->modifies(lb->temp_CCLabel, mpm_matls);
+    t->modifies(lb->otemp_CCLabel, mpm_matls);
     t->modifies(lb->vel_CCLabel,  mpm_matls);
   }
   sched->addTask(t, patches, all_matls);
@@ -1777,7 +1928,6 @@
   task->requires(Task::NewDW, lb->mass_L_CCLabel,      gac,2);
   task->requires(Task::NewDW, lb->eng_L_ME_CCLabel,    gac,2);
   task->requires(Task::NewDW, lb->sp_vol_L_CCLabel,    gac,2);
-  task->requires(Task::NewDW, lb->specific_heatLabel,  gac,2);  
   task->requires(Task::NewDW, lb->speedSound_CCLabel,  gn, 0);
   task->requires(Task::NewDW, lb->vol_frac_CCLabel,    gn, 0);
   
@@ -1790,13 +1940,13 @@
   
   task->modifies(lb->rho_CCLabel);
   task->modifies(lb->sp_vol_CCLabel);
-  task->computes(lb->temp_CCLabel);
+  task->computes(lb->int_eng_CCLabel);
   task->computes(lb->vel_CCLabel);
   task->computes(lb->machLabel);    
   
   //__________________________________
   // Model Variables.
-  if(d_modelSetup && d_modelSetup->tvars.size() > 0){
+  if(d_modelSetup->tvars.size() > 0){
     vector<TransportedVariable*>::iterator iter;
     
     for(iter = d_modelSetup->tvars.begin();
@@ -1833,8 +1983,7 @@
 //  t->requires(Task::OldDW, lb->delTLabel);     for AMR                  
     t->requires(Task::NewDW,lb->rho_CCLabel,        ice_matls, gn);
     t->requires(Task::NewDW,lb->vel_CCLabel,        ice_matls, gn);
-    t->requires(Task::NewDW,lb->temp_CCLabel,       ice_matls, gn);
-    t->requires(Task::NewDW,lb->specific_heatLabel, ice_matls, gn);
+    t->requires(Task::NewDW,lb->int_eng_CCLabel,       ice_matls, gn);
     t->requires(Task::NewDW,lb->uvel_FCMELabel,     ice_matls, gn);
     t->requires(Task::NewDW,lb->vvel_FCMELabel,     ice_matls, gn);
     t->requires(Task::NewDW,lb->wvel_FCMELabel,     ice_matls, gn);
@@ -1888,11 +2037,18 @@
     double inv_sum_invDelx_sqr = 1.0/( 1.0/(delX * delX) 
                                      + 1.0/(delY * delY) 
                                      + 1.0/(delZ * delZ) );
-    constCCVariable<double> speedSound, sp_vol_CC, thermalCond, viscosity;
-    constCCVariable<double> cv, gamma;
+    constCCVariable<double> speedSound, sp_vol_CC, int_eng;
     constCCVariable<Vector> vel_CC;
     Ghost::GhostType  gn  = Ghost::None; 
     Ghost::GhostType  gac = Ghost::AroundCells;
+    int numGhostCells;
+    if (d_delT_scheme == "aggressive") {
+      // Agressive scheme
+      numGhostCells = 0;
+    } else {
+      // Conservative scheme - needs 1 layer of ghost cells on velocity and speed of sound
+      numGhostCells = 1;
+    }
 
     double dCFL = d_CFL;
     delt_CFL = 1000.0; 
@@ -1901,13 +2057,17 @@
       Material* matl = d_sharedState->getICEMaterial(m);
       ICEMaterial* ice_matl = dynamic_cast<ICEMaterial*>(matl);
       int indx = matl->getDWIndex(); 
-      new_dw->get(speedSound, lb->speedSound_CCLabel, indx,patch,gac, 1);
-      new_dw->get(vel_CC,     lb->vel_CCLabel,        indx,patch,gac, 1);
+      new_dw->get(speedSound, lb->speedSound_CCLabel, indx,patch,gac, numGhostCells);
+      new_dw->get(vel_CC,     lb->vel_CCLabel,        indx,patch,gac, numGhostCells);
       new_dw->get(sp_vol_CC,  lb->sp_vol_CCLabel,     indx,patch,gn,  0);
-      new_dw->get(viscosity,  lb->viscosityLabel,     indx,patch,gn,  0);
-      new_dw->get(thermalCond,lb->thermalCondLabel,   indx,patch,gn,  0);
-      new_dw->get(gamma,      lb->gammaLabel,         indx,patch,gn,  0);
-      new_dw->get(cv,         lb->specific_heatLabel, indx,patch,gn,  0);
+      new_dw->get(int_eng,    lb->int_eng_CCLabel,    indx,patch,gn,  0);
+      CCVariable<double> thermalDiffusivity;
+      new_dw->allocateTemporary(thermalDiffusivity, patch);
+      ice_matl->getThermo()->compute_thermalDiffusivity(patch->getCellIterator(),
+                                                        thermalDiffusivity,
+                                                        0, new_dw, ThermoInterface::NewState,
+                                                        patch, indx, 0,
+                                                        int_eng, sp_vol_CC);
       
       if (d_delT_scheme == "aggressive") {     //      A G G R E S S I V E
         for(CellIterator iter=patch->getCellIterator(); !iter.done(); iter++){
@@ -1923,10 +2083,13 @@
           delt_CFL = std::min(B, delt_CFL);
           delt_CFL = std::min(C, delt_CFL);
         }
-//      cout << " Aggressive delT Based on currant number "<< delt_CFL << endl;
+//      cout << " Aggressive delT Based on courant number "<< delt_CFL << endl;
       } 
 
       if (d_delT_scheme == "conservative") {  //      C O N S E R V A T I V E
+        constCCVariable<double> viscosity;
+        new_dw->get(viscosity,  lb->viscosityLabel,     indx,patch,gn,  0);
+
         //__________________________________
         // Use a characteristic velocity
         // to compute a sweptvolume. The
@@ -1952,7 +2115,6 @@
         for(CellIterator iter=patch->getCellIterator(); !iter.done(); iter++){
           double sumSwept_Vol = 0.0;
           IntVector c = *iter;
-          double cp = cv[c] * gamma[c];
           
           for (int dir = 0; dir <3; dir++) {  //loop over all three directions
             IntVector L = c - adj_offset[dir];
@@ -1971,8 +2133,7 @@
 
             double relative_vel       = fabs(vel_R - vel_L);
 
-            double thermalDiffusivity = thermalCond[c] * sp_vol_CC[c]/cp;
-            double diffusion_vel    = std::max(thermalDiffusivity, viscosity[c])
+            double diffusion_vel    = std::max(thermalDiffusivity[c], viscosity[c])
                                       /dx_length;
 
             double characteristicVel_R = vel_FC_R 
@@ -2003,14 +2164,10 @@
       //__________________________________
       // stability constraint due to heat conduction
       //  I C E  O N L Y
-      double thermalCond_test = ice_matl->getThermalConductivity();
-      if (thermalCond_test !=0) {
-
+      if (ice_matl->getThermo()->doThermalConduction()) {
         for(CellIterator iter=patch->getCellIterator(); !iter.done(); iter++){
           IntVector c = *iter;
-          double cp = cv[c] * gamma[c];
-          double inv_thermalDiffusivity = cp/(sp_vol_CC[c] * thermalCond[c]);
-          double A = d_CFL * 0.5 * inv_sum_invDelx_sqr * inv_thermalDiffusivity;
+          double A = d_CFL * 0.5 * inv_sum_invDelx_sqr / thermalDiffusivity[c];
           delt_cond = std::min(A, delt_cond);
         }
       }  //
@@ -2077,11 +2234,8 @@
     StaticArray<CCVariable<double>   > sp_vol_CC(numMatls);
     StaticArray<CCVariable<double>   > rho_CC(numMatls); 
     StaticArray<CCVariable<double>   > Temp_CC(numMatls);
-    StaticArray<CCVariable<double>   > speedSound(numMatls);
     StaticArray<CCVariable<double>   > vol_frac_CC(numMatls);
     StaticArray<CCVariable<Vector>   > vel_CC(numMatls);
-    StaticArray<CCVariable<double>   > cv(numMatls);
-    StaticArray<CCVariable<double>   > gamma(numMatls);
     CCVariable<double>    press_CC, imp_initialGuess;
     
     new_dw->allocateAndPut(press_CC,         lb->press_CCLabel,     0,patch);
@@ -2093,16 +2247,10 @@
     for (int m = 0; m < numMatls; m++ ) {
       ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
       int indx= ice_matl->getDWIndex();
-      CCVariable<double> viscosity, thermalCond;
+      CCVariable<double> viscosity;
       new_dw->allocateAndPut(viscosity,     lb->viscosityLabel,    indx,patch);
-      new_dw->allocateAndPut(thermalCond,   lb->thermalCondLabel,  indx,patch);
-      new_dw->allocateAndPut(cv[m],         lb->specific_heatLabel,indx,patch);
-      new_dw->allocateAndPut(gamma[m],      lb->gammaLabel,        indx,patch);
       
-      gamma[m].initialize(    ice_matl->getGamma());
-      cv[m].initialize(       ice_matl->getSpecificHeat());    
       viscosity.initialize  ( ice_matl->getViscosity());
-      thermalCond.initialize( ice_matl->getThermalConductivity());
       
       if(ice_matl->isSurroundingMatl()) {
         d_surroundingMatl_indx = indx;  //which matl. is the surrounding matl
@@ -2127,8 +2275,7 @@
       new_dw->allocateAndPut(rho_micro[m],  lb->rho_micro_CCLabel, indx,patch); 
       new_dw->allocateAndPut(sp_vol_CC[m],  lb->sp_vol_CCLabel,    indx,patch); 
       new_dw->allocateAndPut(rho_CC[m],     lb->rho_CCLabel,       indx,patch); 
-      new_dw->allocateAndPut(Temp_CC[m],    lb->temp_CCLabel,      indx,patch); 
-      new_dw->allocateAndPut(speedSound[m], lb->speedSound_CCLabel,indx,patch); 
+      new_dw->allocateAndPut(Temp_CC[m],    lb->ntemp_CCLabel,      indx,patch); 
       new_dw->allocateAndPut(vol_frac_CC[m],lb->vol_frac_CCLabel,  indx,patch); 
       new_dw->allocateAndPut(vel_CC[m],     lb->vel_CCLabel,       indx,patch);
     }
@@ -2140,7 +2287,7 @@
       ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
       int indx = ice_matl->getDWIndex();
       ice_matl->initializeCells(rho_micro[m],  rho_CC[m],
-                                Temp_CC[m],    speedSound[m], 
+                                Temp_CC[m],
                                 vol_frac_CC[m], vel_CC[m], 
                                 press_CC, numALLMatls, patch, new_dw);
       
@@ -2150,8 +2297,6 @@
                                                     
       setBC(rho_CC[m],     "Density",     patch, d_sharedState, indx, new_dw);
       setBC(rho_micro[m],  "Density",     patch, d_sharedState, indx, new_dw);
-      setBC(Temp_CC[m],    "Temperature", patch, d_sharedState, indx, new_dw);
-      setBC(speedSound[m], "zeroNeumann", patch, d_sharedState, indx, new_dw); 
       setBC(vel_CC[m],     "Velocity",    patch, d_sharedState, indx, new_dw); 
       setBC(press_CC, rho_micro, placeHolder, d_surroundingMatl_indx, 
             "rho_micro","Pressure", patch, d_sharedState, 0, new_dw);
@@ -2225,34 +2370,59 @@
    
     Ghost::GhostType  gn = Ghost::None;
     int numMatls = d_sharedState->getNumICEMatls();
+    
     //__________________________________
     // adjust the pressure field
-    CCVariable<double> rho_micro, press_CC;
+    CCVariable<double> sp_vol, press_CC;
     new_dw->getModifiable(press_CC, lb->press_CCLabel,0, patch);
-    new_dw->getModifiable(rho_micro,lb->rho_micro_CCLabel,
+    new_dw->getModifiable(sp_vol,lb->sp_vol_CCLabel,
                                             d_surroundingMatl_indx, patch);
     
-    hydrostaticPressureAdjustment(patch, rho_micro, press_CC);
-    
+    hydrostaticPressureAdjustment(patch, sp_vol, press_CC);
+
     //__________________________________
     //  Adjust Temp field if g != 0
     //  so fields are thermodynamically consistent
     for (int m = 0; m < numMatls; m++) {
       ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
       int indx = ice_matl->getDWIndex();
-      constCCVariable<double> gamma, cv;
-      CCVariable<double> Temp;   
- 
-      new_dw->get(gamma, lb->gammaLabel,         indx, patch,gn,0);   
-      new_dw->get(cv,    lb->specific_heatLabel, indx, patch,gn,0);
-      new_dw->getModifiable(Temp,     lb->temp_CCLabel,       indx, patch);  
-      new_dw->getModifiable(rho_micro,lb->rho_micro_CCLabel,  indx, patch); 
- 
+      EquationOfState* eos = ice_matl->getEOS();
+
+      CCVariable<double> int_eng;
+      new_dw->getModifiable(int_eng, lb->int_eng_CCLabel, indx, patch);
+      constCCVariable<double> int_eng_const = int_eng;
+      constCCVariable<double> sp_vol;
+      new_dw->get(sp_vol, lb->sp_vol_CCLabel, indx, patch, Ghost::None, 0);
+      CCVariable<double> cv;
+      new_dw->allocateTemporary(cv, patch);
+      ice_matl->getThermo()->compute_cv(patch->getExtraCellIterator(), cv,
+                                        0, new_dw, ThermoInterface::NewState,
+                                        patch, indx, 0,
+                                        int_eng_const, sp_vol);
+      CCVariable<double> gamma;
+      new_dw->allocateTemporary(gamma, patch);
+      ice_matl->getThermo()->compute_gamma(patch->getExtraCellIterator(), gamma,
+                                           0, new_dw, ThermoInterface::NewState,
+                                           patch, indx, 0,
+                                           int_eng_const, sp_vol);
+
+      CCVariable<double> newTemp;
+      new_dw->allocateTemporary(newTemp, patch);
+        // This may not be quite right because the gamma/cv are not necessarily valid
+        // at the new temperature.  However, we hope it is close enough...
+      cerr << "(benign) WARNING: hydrostaticPressureAdj may not be right\n";
       Patch::FaceType dummy = Patch::invalidFace; // This is a dummy variable
       ice_matl->getEOS()->computeTempCC( patch, "WholeDomain",
 					 press_CC, gamma, cv,
-					 rho_micro, Temp, dummy );
+					 sp_vol, newTemp, dummy );
 
+      // Convert back to internal energy
+      constCCVariable<double> constNewTemp = newTemp;
+      ice_matl->getThermo()->compute_int_eng(patch->getExtraCellIterator(), int_eng,
+                                             0, new_dw, ThermoInterface::NewState,
+                                             patch, indx, 0,
+                                             constNewTemp, sp_vol);
+
       //__________________________________
       //  Print Data
       if (switchDebugInitialize){     
@@ -2263,8 +2433,9 @@
           ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
           int indx = ice_matl->getDWIndex();      
           desc1 << "hydroStaticAdj_Mat_" << indx << "_patch_"<< patch->getID();
-          printData(indx, patch,   1, desc.str(), "rho_micro_CC",rho_micro);
-          printData(indx, patch,   1, desc.str(), "Temp_CC",     Temp);
+          printData(indx, patch,   1, desc.str(), "sp_vol_CC", sp_vol);
+          printData(indx, patch,   1, desc.str(), "Temp_CC",   newTemp);
+          printData(indx, patch,   1, desc.str(), "int_eng",   int_eng);
         }   
       }
     }
@@ -2272,6 +2443,150 @@
 } 
 
 /* _____________________________________________________________________
+ Function~  ICE::computeInternalEnergy
+ Purpose~   
+ _____________________________________________________________________  */
+void ICE::computeInternalEnergy(const ProcessorGroup*,
+                                const PatchSubset* patches,
+                                const MaterialSubset* /*ice_matls*/,
+                                DataWarehouse* /*old_dw*/,
+                                DataWarehouse* new_dw)
+{
+  const Level* level = getLevel(patches);
+  
+  for(int p=0;p<patches->size();p++){
+    const Patch* patch = patches->get(p);
+    cout_doing << "Doing computeInternalEnergy on patch "
+               << patch->getID() << "\t ICE \tL-" <<level->getIndex()<< endl;
+   
+    int numMatls = d_sharedState->getNumICEMatls();
+    
+    for (int m = 0; m < numMatls; m++) {
+      ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+      int indx = ice_matl->getDWIndex();
+      CCVariable<double> int_eng;
+      constCCVariable<double> Temp, sp_vol;
+      new_dw->allocateAndPut(int_eng, lb->int_eng_CCLabel, indx, patch);
+      new_dw->get(Temp, lb->ntemp_CCLabel, indx, patch, Ghost::None, 0);
+      new_dw->get(sp_vol, lb->sp_vol_CCLabel, indx, patch, Ghost::None, 0);
+      ice_matl->getThermo()->compute_int_eng(patch->getCellIterator(), int_eng,
+                                             0, new_dw, ThermoInterface::NewState,
+                                             patch, indx, 0,
+                                             Temp, sp_vol);
+      setBC_Temperature(int_eng, patch, d_sharedState, indx, 0, new_dw,
+                        ThermoInterface::NewState, sp_vol);
+      //__________________________________
+      //  Print Data
+      if (switchDebugInitialize){     
+        ostringstream desc, desc1;
+        desc << "computeInternalEnergy_patch_"<< patch->getID();
+        for (int m = 0; m < numMatls; m++ ) { 
+          ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+          int indx = ice_matl->getDWIndex();      
+          desc1 << "computeInternalEnergy_Mat_" << indx << "_patch_"<< patch->getID();
+          printData(indx, patch,   1, desc.str(), "Temp", Temp);
+          printData(indx, patch,   1, desc.str(), "int_eng",   int_eng);
+        }   
+      }
+    }
+  }
+}
+
+/* _____________________________________________________________________
+ Function~  ICE::computeTemperature
+ Purpose~   
+ _____________________________________________________________________  */
+void ICE::computeTemperature(const ProcessorGroup*,
+                             const PatchSubset* patches,
+                             const MaterialSubset* /*ice_matls*/,
+                             DataWarehouse* /*old_dw*/,
+                             DataWarehouse* new_dw)
+{
+  const Level* level = getLevel(patches);
+  
+  for(int p=0;p<patches->size();p++){
+    const Patch* patch = patches->get(p);
+    cout_doing << "Doing computeTemperature on patch "
+               << patch->getID() << "\t ICE \tL-" <<level->getIndex()<< endl;
+   
+    int numMatls = d_sharedState->getNumICEMatls();
+    
+    for (int m = 0; m < numMatls; m++) {
+      ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+      int indx = ice_matl->getDWIndex();
+      CCVariable<double> Temp;
+      constCCVariable<double> int_eng, sp_vol;
+      new_dw->allocateAndPut(Temp, lb->ntemp_CCLabel, indx, patch);
+      new_dw->get(int_eng, lb->int_eng_CCLabel, indx, patch, Ghost::None, 0);
+      new_dw->get(sp_vol, lb->sp_vol_CCLabel, indx, patch, Ghost::None, 0);
+      ice_matl->getThermo()->compute_Temp(patch->getCellIterator(), Temp,
+                                          0, new_dw, ThermoInterface::NewState,
+                                          patch, indx, 0,
+                                          int_eng, sp_vol);
+    }
+  }
+}
+
+/* _____________________________________________________________________
+ Function~  ICE::computeSpeedOfSound
+ Purpose~   
+ _____________________________________________________________________  */
+void ICE::computeSpeedOfSound(const ProcessorGroup*,
+                              const PatchSubset* patches,
+                              const MaterialSubset* /*ice_matls*/,
+                              DataWarehouse* /*old_dw*/,
+                              DataWarehouse* new_dw)
+{
+  const Level* level = getLevel(patches);
+  
+  for(int p=0;p<patches->size();p++){
+    const Patch* patch = patches->get(p);
+    cout_doing << "Doing computeSpeedOfSound on patch "
+               << patch->getID() << "\t ICE \tL-" <<level->getIndex()<< endl;
+   
+    int numMatls = d_sharedState->getNumICEMatls();
+    
+    for (int m = 0; m < numMatls; m++) {
+      ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+      EquationOfState* eos = ice_matl->getEOS();
+      int indx = ice_matl->getDWIndex();
+      CCVariable<double> speedSound;
+      constCCVariable<double> sp_vol, int_eng;
+      new_dw->allocateAndPut(speedSound, lb->speedSound_CCLabel, indx, patch);
+      new_dw->get(sp_vol, lb->sp_vol_CCLabel, indx, patch, Ghost::None, 0);
+      new_dw->get(int_eng, lb->int_eng_CCLabel, indx, patch, Ghost::None, 0);
+      CCVariable<double> cv;
+      new_dw->allocateTemporary(cv, patch);
+      ice_matl->getThermo()->compute_cv(patch->getCellIterator(), cv,
+                                        0, new_dw, ThermoInterface::NewState,
+                                        patch, indx, 0,
+                                        int_eng, sp_vol);
+      CCVariable<double> gamma;
+      new_dw->allocateTemporary(gamma, patch);
+      ice_matl->getThermo()->compute_gamma(patch->getCellIterator(), gamma,
+                                           0, new_dw, ThermoInterface::NewState,
+                                           patch, indx, 0,
+                                           int_eng, sp_vol);
+      CCVariable<double> temp;
+      new_dw->allocateTemporary(temp, patch);
+      ice_matl->getThermo()->compute_Temp(patch->getCellIterator(), temp,
+                                          0, new_dw, ThermoInterface::NewState,
+                                          patch, indx, 0,
+                                          int_eng, sp_vol);
+
+      for(CellIterator iter = patch->getCellIterator(); !iter.done(); iter++){
+        const IntVector& c = *iter;
+        double rhoM = 1./sp_vol[c];
+        double press_eos, dp_drho, dp_de;
+        eos->computePressEOS(rhoM, gamma[c], cv[c], temp[c], press_eos, dp_drho, dp_de);
+        double cSquared = dp_drho + dp_de * press_eos * sp_vol[c] * sp_vol[c];
+        speedSound[c] = sqrt(cSquared);
+      }
+    }
+  }
+}
+
+/* _____________________________________________________________________
  Function~  ICE::computeThermoTransportProperties
  Purpose~   
  _____________________________________________________________________  */
@@ -2295,14 +2610,8 @@
       int indx = ice_matl->getDWIndex();
       CCVariable<double> viscosity, thermalCond, gamma, cv;
       
-      new_dw->allocateAndPut(thermalCond, lb->thermalCondLabel,  indx, patch);  
       new_dw->allocateAndPut(viscosity,   lb->viscosityLabel,    indx, patch);
-      new_dw->allocateAndPut(cv,          lb->specific_heatLabel,indx, patch);
-      new_dw->allocateAndPut(gamma,       lb->gammaLabel,        indx, patch); 
       viscosity.initialize  ( ice_matl->getViscosity());
-      thermalCond.initialize( ice_matl->getThermalConductivity());
-      gamma.initialize  (     ice_matl->getGamma());
-      cv.initialize(          ice_matl->getSpecificHeat());
     }
 
     //__________________________________
@@ -2324,6 +2633,7 @@
     }
   }
 }
+
 /* _____________________________________________________________________ 
  Function~  ICE::computeEquilibrationPressure--
  Purpose~   Find the equilibration pressure  
@@ -2378,11 +2688,12 @@
     StaticArray<CCVariable<double> > speedSound_new(numMatls);
     StaticArray<CCVariable<double> > f_theta(numMatls); 
     StaticArray<CCVariable<double> > kappa(numMatls);
-    StaticArray<constCCVariable<double> > Temp(numMatls);
+    StaticArray<constCCVariable<double> > int_eng(numMatls);
     StaticArray<constCCVariable<double> > rho_CC(numMatls);
     StaticArray<constCCVariable<double> > sp_vol_CC(numMatls);
-    StaticArray<constCCVariable<double> > cv(numMatls);
-    StaticArray<constCCVariable<double> > gamma(numMatls); 
+    StaticArray<CCVariable<double> > cv(numMatls);
+    StaticArray<CCVariable<double> > gamma(numMatls); 
+    StaticArray<CCVariable<double> > Temp(numMatls); 
     StaticArray<constCCVariable<double> > placeHolder(0);   
 
     CCVariable<int> n_iters_equil_press;
@@ -2400,12 +2711,10 @@
     for (int m = 0; m < numMatls; m++) {
       ICEMaterial* matl = d_sharedState->getICEMaterial(m);
       int indx = matl->getDWIndex();
-      old_dw->get(Temp[m],      lb->temp_CCLabel,      indx,patch, gn,0);
+      old_dw->get(int_eng[m],   lb->int_eng_CCLabel,      indx,patch, gn,0);
       old_dw->get(rho_CC[m],    lb->rho_CCLabel,       indx,patch, gn,0);
       old_dw->get(sp_vol_CC[m], lb->sp_vol_CCLabel,    indx,patch, gn,0);
-      new_dw->get(cv[m],        lb->specific_heatLabel,indx,patch, gn,0);
-      new_dw->get(gamma[m],     lb->gammaLabel,        indx,patch, gn,0);
-            
+      
       new_dw->allocateTemporary(rho_micro[m],  patch);
       new_dw->allocateAndPut(vol_frac[m],  lb->vol_frac_CCLabel,   indx,patch);    
       new_dw->allocateAndPut(rho_CC_new[m],lb->rho_CCLabel,        indx,patch);    
@@ -2441,12 +2750,35 @@
        desc << "TOP_equilibration_Mat_" << indx << "_patch_"<<patch->getID();
        printData(indx, patch, 1, desc.str(), "rho_CC",       rho_CC[m]);    
        printData(indx, patch, 1, desc.str(), "rho_micro_CC", rho_micro[m]);  
-       printData(indx, patch, 1, desc.str(), "speedSound",   speedSound_new[m]);
-       printData(indx, patch, 1, desc.str(), "Temp_CC",      Temp[m]);       
+       printData(indx, patch, 1, desc.str(), "int_eng_CC",   int_eng[m]);
        printData(indx, patch, 1, desc.str(), "vol_frac_CC",  vol_frac[m]);   
       }
     }
 
+    // Compute temp, gamma, cv
+    for (int m = 0; m < numMatls; m++) {
+      cerr << "(benign) WARNING: computeTemp not finished for MPMICE\n";
+      ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+      int indx = ice_matl->getDWIndex();
+
+      new_dw->allocateTemporary(cv[m], patch);
+      ice_matl->getThermo()->compute_cv(patch->getExtraCellIterator(), cv[m],
+                                        old_dw, new_dw, ThermoInterface::IntermediateState,
+                                        patch, indx, 0,
+                                        int_eng[m], sp_vol_CC[m]);
+      new_dw->allocateTemporary(gamma[m], patch);
+      ice_matl->getThermo()->compute_gamma(patch->getExtraCellIterator(), gamma[m],
+                                           old_dw, new_dw, ThermoInterface::IntermediateState,
+                                           patch, indx, 0,
+                                           int_eng[m], sp_vol_CC[m]);
+      new_dw->allocateTemporary(Temp[m], patch);
+      ice_matl->getThermo()->compute_Temp(patch->getExtraCellIterator(), Temp[m],
+                                          old_dw, new_dw, ThermoInterface::IntermediateState,
+                                          patch, indx, 0,
+                                          int_eng[m], sp_vol_CC[m]);
+    }
+    
+
   //______________________________________________________________________
   // Done with preliminary calcs, now loop over every cell
     int count, test_max_iter = 0;
@@ -2628,7 +2960,7 @@
        printData( indx, patch, 1, desc.str(), "sp_vol_CC",    sp_vol_new[m]); 
        printData( indx, patch, 1, desc.str(), "rho_micro_CC", rho_micro[m]);
        printData( indx, patch, 1, desc.str(), "vol_frac_CC",  vol_frac[m]);
-       
+       printData(indx, patch, 1, desc.str(), "speedSound",   speedSound_new[m]);       
      }
     }
   }  // patch loop
@@ -2707,6 +3039,8 @@
                         DataWarehouse* old_dw,                          
                         DataWarehouse* new_dw)                          
 {
+  throw InternalError("computeTempFC not finished", __FILE__, __LINE__);
+#if 0
   const Level* level = getLevel(patches);
   
   for(int p = 0; p<patches->size(); p++){
@@ -2798,6 +3132,7 @@
       }
     } // matls loop
   }  // patch loop
+#endif
 }                       
 //______________________________________________________________________
 //                       
@@ -3809,16 +4144,32 @@
       //__________________________________
       //  Source due to conduction ICE only
       if(ice_matl){
-        double thermalCond_test = ice_matl->getThermalConductivity();
-        if(thermalCond_test != 0.0 ){
+        if(ice_matl->getThermo()->doThermalConduction()) {
+
           if(numMatls > 1){
             cout <<"ICE:Compute heat diffusion:  currently the heat diffusion" 
             " calculation doesn't work for multiple materials. Set the ICE: thermal conductivity to 0.0 --Todd"<< endl;
           }
-          constCCVariable<double> Temp_CC;
-          constCCVariable<double> thermalCond;
-          new_dw->get(thermalCond, lb->thermalCondLabel, indx,patch,gac,1); 
-          old_dw->get(Temp_CC,     lb->temp_CCLabel,     indx,patch,gac,1); 
+          constCCVariable<double> int_eng;
+          old_dw->get(int_eng,     lb->int_eng_CCLabel,    indx,patch,gac,1); 
+          CCVariable<double> Temp_CC;
+          new_dw->allocateTemporary(Temp_CC, patch, Ghost::AroundCells, 1);
+          cerr << "int_eng: " << int_eng.getWindow()->getLowIndex() << " " << int_eng.getWindow()->getHighIndex() << '\n';
+          cerr << "Temp_CC: " << Temp_CC.getWindow()->getLowIndex() << " " << Temp_CC.getWindow()->getHighIndex() << '\n';
+          cerr << "iterator: " << patch->getExtraCellIterator(IntVector(0,0,0)).begin() << " " << patch->getExtraCellIterator(IntVector(0,0,0)).end() << '\n';
+          cerr << "WARNING: iterators likely wrong for multipatch problems\n";
+          ice_matl->getThermo()->compute_Temp(patch->getExtraCellIterator(IntVector(0,0,0)),
+                                              Temp_CC,
+                                              old_dw, new_dw, ThermoInterface::IntermediateState,
+                                              patch, indx, 0,
+                                              int_eng, sp_vol_CC);
+          CCVariable<double> thermalCond;
+          new_dw->allocateTemporary(thermalCond, patch, Ghost::AroundCells, 1);
+          ice_matl->getThermo()->compute_thermalConductivity(patch->getExtraCellIterator(IntVector(0,0,0)),
+                                                             thermalCond,
+                                                             old_dw, new_dw, ThermoInterface::IntermediateState,
+                                                             patch, indx, 0,
+                                                             int_eng, sp_vol_CC);
 
           constSFCXVariable<double> vol_fracX_FC;
           constSFCYVariable<double> vol_fracY_FC;
@@ -3910,14 +4261,13 @@
      CCVariable<double> int_eng_L; 
      CCVariable<double> mass_L;
      if(ice_matl)  {               //  I C E
-      constCCVariable<double> rho_CC, temp_CC, cv, int_eng_source;
+      constCCVariable<double> rho_CC, int_eng_CC, int_eng_source;
       constCCVariable<Vector> vel_CC, mom_source, mom_comb;
 
       Ghost::GhostType  gn = Ghost::None;
-      new_dw->get(cv,             lb->specific_heatLabel,    indx,patch,gn,0);
       new_dw->get(rho_CC,         lb->rho_CCLabel,           indx,patch,gn,0);  
       old_dw->get(vel_CC,         lb->vel_CCLabel,           indx,patch,gn,0);  
-      old_dw->get(temp_CC,        lb->temp_CCLabel,          indx,patch,gn,0);  
+      old_dw->get(int_eng_CC,     lb->int_eng_CCLabel,          indx,patch,gn,0);  
       new_dw->get(mom_source,     lb->mom_source_CCLabel,    indx,patch,gn,0);
       new_dw->get(int_eng_source, lb->int_eng_source_CCLabel,indx,patch,gn,0);  
       new_dw->allocateAndPut(mom_L,     lb->mom_L_CCLabel,     indx,patch);
@@ -3932,7 +4282,7 @@
           double mass = rho_CC[c] * vol;
           mass_L[c] = mass;
           mom_L[c] = vel_CC[c] * mass + mom_source[c];
-          int_eng_L[c] = mass*cv[c] * temp_CC[c] + int_eng_source[c];
+          int_eng_L[c] = mass * int_eng_CC[c] + int_eng_source[c];
         }
       }
 
@@ -3979,6 +4329,8 @@
                   plus_minus_one * std::max( fabs(mom_L_tmp), min_mom_L );
           }
           // must have a minimum int_eng   
+          throw InternalError("model based exchange not finished", __FILE__, __LINE__);
+#if 0
           double min_int_eng = min_mass * cv[c] * temp_CC[c];
           double int_eng_tmp = mass * cv[c] * temp_CC[c];
 
@@ -3999,7 +4351,7 @@
                              modelEng_src[c];
 
           int_eng_L[c] = std::max(int_eng_L[c], min_int_eng);
-          
+#endif     
          }
          if(massGain > 0.0){
           cout << "Mass gained by the models this timestep = " 
@@ -4019,6 +4371,8 @@
         }
         //____ B U L L E T   P R O O F I N G----
         // catch negative internal energies
+      cerr << "(benign) WARNING: check for negative internal energy disabled\n";
+#if 0
         IntVector neg_cell;
         if (!areAllValuesPositive(int_eng_L, neg_cell) ) {
          ostringstream warn;
@@ -4027,6 +4381,7 @@
              <<neg_cell<<" Negative int_eng_L \n";
          throw InvalidValue(warn.str(), __FILE__, __LINE__);
         }
+#endif
       }  // if (ice_matl)
     }  // end numALLMatl loop
   }  // patch loop
@@ -4060,8 +4415,9 @@
     StaticArray<constCCVariable<double> > Tdot(numALLMatls);
     StaticArray<constCCVariable<double> > vol_frac(numALLMatls);
     StaticArray<constCCVariable<double> > Temp_CC(numALLMatls);
+    StaticArray<constCCVariable<double> > sp_vol_CC(numALLMatls);
     StaticArray<CCVariable<double> > alpha(numALLMatls);
-    constCCVariable<double> rho_CC, f_theta, sp_vol_CC, cv;
+    constCCVariable<double> rho_CC, f_theta;
     constCCVariable<double> delP, P;
     CCVariable<double> sum_therm_exp;
     vector<double> if_mpm_matl_ignore(numALLMatls);
@@ -4077,14 +4433,23 @@
       ICEMaterial* ice_matl = dynamic_cast<ICEMaterial*>(matl);
       int indx = matl->getDWIndex();
       
+      new_dw->get(sp_vol_CC[m], lb->sp_vol_CCLabel,    indx,patch,gn, 0);
       new_dw->get(Tdot[m],    lb->Tdot_CCLabel,    indx,patch, gn,0);
       new_dw->get(vol_frac[m],lb->vol_frac_CCLabel,indx,patch, gac, 1);
       new_dw->allocateTemporary(alpha[m],patch);
       if (ice_matl) {
-        old_dw->get(Temp_CC[m], lb->temp_CCLabel,  indx,patch, gn,0);
+        CCVariable<double> tmp;
+        new_dw->allocateTemporary(tmp, patch);
+        constCCVariable<double> int_eng;
+        old_dw->get(int_eng, lb->int_eng_CCLabel, indx, patch, Ghost::None, 0);
+        ice_matl->getThermo()->compute_Temp(patch->getCellIterator(), tmp,
+                                            old_dw, new_dw, ThermoInterface::IntermediateState,
+                                            patch, indx, 0,
+                                            int_eng, sp_vol_CC[m]);
+        Temp_CC[m] = tmp;
       }
       if (mpm_matl) {
-        new_dw->get(Temp_CC[m],lb->temp_CCLabel,   indx,patch, gn,0);
+        new_dw->get(Temp_CC[m],lb->otemp_CCLabel,   indx,patch, gn,0);
       }
     }
 
@@ -4099,13 +4464,19 @@
       
       if (ice_matl) {
        if_mpm_matl_ignore[m]=1.0;
-       new_dw->get(sp_vol_CC, lb->sp_vol_CCLabel,    indx,patch,gn, 0);
-       new_dw->get(cv,        lb->specific_heatLabel,indx,patch,gn, 0);
+       constCCVariable<double> int_eng;
+       old_dw->get(int_eng, lb->int_eng_CCLabel,    indx,patch,gn, 0);
+       CCVariable<double> cv;
+       old_dw->allocateTemporary(cv, patch);
+       ice_matl->getThermo()->compute_cv(patch->getCellIterator(), cv,
+                                         old_dw, new_dw, ThermoInterface::IntermediateState,
+                                         patch, indx, 0,
+                                         int_eng, sp_vol_CC[m]);
 
        for(CellIterator iter=patch->getExtraCellIterator();!iter.done();iter++){
           IntVector c = *iter;
           alpha[m][c]=
-            ice_matl->getEOS()->getAlpha(Temp_CC[m][c],sp_vol_CC[c],P[c],cv[c]);
+            ice_matl->getEOS()->getAlpha(Temp_CC[m][c],sp_vol_CC[m][c],P[c],cv[c]);
           sum_therm_exp[c] += vol_frac[m][c]*alpha[m][c]*Tdot[m][c];
         } 
       } else {
@@ -4125,7 +4496,6 @@
       new_dw->allocateAndPut(sp_vol_src,lb->sp_vol_src_CCLabel, indx,patch);
       sp_vol_src.initialize(0.);
 
-      new_dw->get(sp_vol_CC,  lb->sp_vol_CCLabel,     indx,patch,gn, 0);
       new_dw->get(rho_CC,     lb->rho_CCLabel,        indx,patch,gn, 0);
       new_dw->get(f_theta,    lb->f_theta_CCLabel,    indx,patch,gn, 0);
       new_dw->get(kappa,      lb->compressiblityLabel,indx,patch,gn, 0);
@@ -4134,7 +4504,7 @@
       //  compute sp_vol_L * mass
       for(CellIterator iter=patch->getExtraCellIterator();!iter.done();iter++){
         IntVector c = *iter;
-        sp_vol_L[c] = (rho_CC[c] * vol)*sp_vol_CC[c];
+        sp_vol_L[c] = (rho_CC[c] * vol)*sp_vol_CC[m][c];
       }
       
       //---- P R I N T   D A T A ------ 
@@ -4142,7 +4512,7 @@
         ostringstream desc;
         desc <<"TOP_Lagrangian_sp_vol_Mat_"<<indx<< "_patch_"<<patch->getID();
          printData( indx, patch,1, desc.str(), "rho_CC",     rho_CC);      
-         printData( indx, patch,1, desc.str(), "sp_vol_CC",  sp_vol_CC);     
+         printData( indx, patch,1, desc.str(), "sp_vol_CC",  sp_vol_CC[m]);
          printData( indx, patch,1, desc.str(), "sp_vol_L",   sp_vol_L);      
       }
       //__________________________________
@@ -4173,7 +4543,7 @@
 
 /*`==========TESTING==========*/
 //    do we really want this?  -Todd        
-        sp_vol_L[c] = max(sp_vol_L[c], d_TINY_RHO * vol * sp_vol_CC[c]);
+        sp_vol_L[c] = max(sp_vol_L[c], d_TINY_RHO * vol * sp_vol_CC[m][c]);
 /*==========TESTING==========`*/
      }
 
@@ -4200,7 +4570,7 @@
         cout << "sp_vol_src        "<< sp_vol_src[neg_cell] << endl;
         cout << "mass sp_vol_L     "<< sp_vol_L[neg_cell] << endl;
         cout << "mass sp_vol_L_old "
-             << (rho_CC[neg_cell]*vol*sp_vol_CC[neg_cell]) << endl;
+             << (rho_CC[neg_cell]*vol*sp_vol_CC[m][neg_cell]) << endl;
         ostringstream warn;
         int L = level->getIndex();
         warn<<"ERROR ICE:("<<L<<"):computeLagrangianSpecificVolumeRF, mat "<<indx
@@ -4209,7 +4579,6 @@
      }
     }  // end numALLMatl loop
   }  // patch loop
-
 }
 
 /* _____________________________________________________________________
@@ -4252,7 +4621,8 @@
         if(tvar->matls->contains(indx)){  
           constCCVariable<double> q_old,q_src;
           CCVariable<double> q_L_CC;
-          old_dw->get(q_old,             tvar->var, indx, patch, gn, 0);
+          DataWarehouse* fromdw = tvar->fromDW == Task::OldDW?old_dw:new_dw;
+          fromdw->get(q_old,             tvar->fromVar, indx, patch, gn, 0);
           new_dw->allocateAndPut(q_L_CC, tvar->var_Lagrangian, indx, patch);
 
           // initialize q_L to q_old
@@ -4348,9 +4718,7 @@
     //Vector zero(0.,0.,0.);
 
     // Create arrays for the grid data
-    StaticArray<CCVariable<double> > cv(numALLMatls);
     StaticArray<CCVariable<double> > Temp_CC(numALLMatls);
-    StaticArray<constCCVariable<double> > gamma(numALLMatls);  
     StaticArray<constCCVariable<double> > vol_frac_CC(numALLMatls);
     StaticArray<constCCVariable<double> > sp_vol_CC(numALLMatls);
     StaticArray<constCCVariable<Vector> > mom_L(numALLMatls);
@@ -4386,29 +4754,36 @@
       ICEMaterial* ice_matl = dynamic_cast<ICEMaterial*>(matl);
       MPMMaterial* mpm_matl = dynamic_cast<MPMMaterial*>(matl);
       int indx = matl->getDWIndex();
-      new_dw->allocateTemporary(cv[m], patch);
       
+      new_dw->get(sp_vol_CC[m],     lb->sp_vol_CCLabel,   indx, patch,gn, 0);
+
       if(mpm_matl){                 // M P M
         CCVariable<double> oldTemp;
-        new_dw->getCopy(oldTemp,          lb->temp_CCLabel,indx,patch,gn,0);
+        new_dw->getCopy(oldTemp,          lb->otemp_CCLabel,indx,patch,gn,0);
         new_dw->getModifiable(vel_CC[m],  lb->vel_CCLabel, indx,patch);
-        new_dw->getModifiable(Temp_CC[m], lb->temp_CCLabel,indx,patch);
+        new_dw->getModifiable(Temp_CC[m], lb->otemp_CCLabel,indx,patch);
         old_temp[m] = oldTemp;
-        cv[m].initialize(mpm_matl->getSpecificHeat());
+        cerr << "WARNING: need to do something about MPM cv\n";
+        //cv[m].initialize(mpm_matl->getSpecificHeat());
       }
       if(ice_matl){                 // I C E
-        constCCVariable<double> cv_ice;
-        old_dw->get(old_temp[m],   lb->temp_CCLabel,      indx, patch,gn,0);
-        new_dw->get(cv_ice,        lb->specific_heatLabel,indx, patch,gn,0);
-        new_dw->get(gamma[m],      lb->gammaLabel,        indx, patch,gn,0);
+        cerr << "Dependencies not finished for addExchangeToMomentumAndEnergy\n";
+        constCCVariable<double> int_eng;
+        old_dw->get(int_eng,   lb->int_eng_CCLabel,      indx, patch,gn,0);
+        CCVariable<double> otemp;
+        new_dw->allocateTemporary(otemp, patch);
+        // old state
+        ice_matl->getThermo()->compute_Temp(patch->getExtraCellIterator(), otemp,
+                                            old_dw, new_dw, ThermoInterface::OldState,
+                                            patch, indx, 0,
+                                            int_eng, sp_vol_CC[m]);
+        old_temp[m] = otemp;
        
         new_dw->allocateTemporary(vel_CC[m],  patch);
         new_dw->allocateTemporary(Temp_CC[m], patch); 
-        cv[m].copyData(cv_ice);
       }                             // A L L  M A T L S
 
       new_dw->get(mass_L[m],        lb->mass_L_CCLabel,   indx, patch,gn, 0);
-      new_dw->get(sp_vol_CC[m],     lb->sp_vol_CCLabel,   indx, patch,gn, 0);
       new_dw->get(mom_L[m],         lb->mom_L_CCLabel,    indx, patch,gn, 0);
       new_dw->get(int_eng_L[m],     lb->int_eng_L_CCLabel,indx, patch,gn, 0);
       new_dw->get(vol_frac_CC[m],   lb->vol_frac_CCLabel, indx, patch,gn, 0);
@@ -4418,12 +4793,21 @@
     }
 
     // Convert momenta to velocities and internal energy to Temp
-    for(CellIterator iter = patch->getExtraCellIterator(); !iter.done();iter++){
-      IntVector c = *iter;
-      for (int m = 0; m < numALLMatls; m++) {
-        Temp_CC[m][c] = int_eng_L[m][c]/(mass_L[m][c]*cv[m][c]);
+    for (int m = 0; m < numALLMatls; m++) {
+      CCVariable<double> spec_int_eng_L;
+      new_dw->allocateTemporary(spec_int_eng_L, patch);
+      for(CellIterator iter = patch->getExtraCellIterator(); !iter.done();iter++){
+        IntVector c = *iter;
+        spec_int_eng_L[c] = int_eng_L[m][c]/mass_L[m][c];
         vel_CC[m][c]  = mom_L[m][c]/mass_L[m][c];
       }
+      ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
+      constCCVariable<double> tmpE = spec_int_eng_L;
+      int indx = ice_matl->getDWIndex();
+      ice_matl->getThermo()->compute_Temp(patch->getExtraCellIterator(), Temp_CC[m],
+                                          old_dw, new_dw, ThermoInterface::IntermediateState,
+                                          patch, indx, 0,
+                                          tmpE, sp_vol_CC[m]);
     }
     //---- P R I N T   D A T A ------ 
     if (switchDebugMomentumExchange_CC ) {
@@ -4442,6 +4826,8 @@
       }
     }
 
+    cerr << "(benign) WARNING: energy/momentum exchange disabled\n";
+#if 0
     for(CellIterator iter = patch->getCellIterator(); !iter.done();iter++){
       IntVector c = *iter;
       //---------- M O M E N T U M   E X C H A N G E
@@ -4506,8 +4892,11 @@
         Temp_CC[m][c] = Temp_CC[m][c] + b[m];
       }
     }  //end CellIterator loop
+#endif
 
   if(d_convective){
+    cerr << "WARNING: convector heat transfer broken\n";
+#if 0
     //  Loop over matls
     //  if (mpm_matl)
     //  Loop over cells
@@ -4624,6 +5013,7 @@
         }    // cellIterator
       }      // if mpm_matl
     }        // for ALL matls
+#endif
    }
 
     /*`==========TESTING==========*/ 
@@ -4651,13 +5041,13 @@
       int indx = matl->getDWIndex();
       setBC(vel_CC[m], "Velocity",   patch, d_sharedState, indx, new_dw,
                                                         d_customBC_var_basket);
-      setBC(Temp_CC[m],"Temperature",gamma[m], cv[m], patch, d_sharedState, 
-                                         indx, new_dw,  d_customBC_var_basket);
     }
     
     delete_CustomBCs(d_customBC_var_basket);
     //__________________________________
     // Convert vars. primitive-> flux 
+    cerr << "(benign) WARNING: exchange really broken\n";
+#if 0
     for(CellIterator iter = patch->getExtraCellIterator(); !iter.done();iter++){
       IntVector c = *iter;
       for (int m = 0; m < numALLMatls; m++) {
@@ -4666,7 +5056,39 @@
         Tdot[m][c]         = (Temp_CC[m][c] - old_temp[m][c])/delT;
       }
     }
+#else
+    for(CellIterator iter = patch->getExtraCellIterator(); !iter.done();iter++){
+      IntVector c = *iter;
+      for (int m = 0; m < numALLMatls; m++) {
+        int_eng_L_ME[m][c] = int_eng_L[m][c];
+        mom_L_ME[m][c]     = vel_CC[m][c]           * mass_L[m][c];
+        Tdot[m][c]         = (Temp_CC[m][c] - old_temp[m][c])/delT;
+      }
+    }
+#endif
 
+    // Set bcs on temperature before multiplying by mass
+    // I do not like this because we bounce back and forth between the
+    // mass-independent energy and the mass-weighted energy.  There should
+    // be a better way - possibly by changing the way that the bcs work - Steve
+    for (int m = 0; m < numALLMatls; m++)  {
+      Material* matl = d_sharedState->getMaterial( m );
+      int indx = matl->getDWIndex();
+      CCVariable<double> spec_int_eng_L_ME;
+      new_dw->allocateTemporary(spec_int_eng_L_ME, patch);
+      for(CellIterator iter = patch->getExtraCellIterator(); !iter.done();iter++){
+        IntVector c = *iter;
+        spec_int_eng_L_ME[c] = int_eng_L_ME[m][c]/mass_L[m][c];
+      }
+      setBC_Temperature(spec_int_eng_L_ME, patch, d_sharedState, 
+                        indx, old_dw, new_dw,  ThermoInterface::IntermediateState,
+                        sp_vol_CC[m], d_customBC_var_basket);
+      for(CellIterator iter = patch->getExtraCellIterator(); !iter.done();iter++){
+        IntVector c = *iter;
+        int_eng_L_ME[m][c] = spec_int_eng_L_ME[c]*mass_L[m][c];
+      }
+    }
+
     //---- P R I N T   D A T A ------ 
     if (switchDebugMomentumExchange_CC ) {
       for(int m = 0; m < numALLMatls; m++) {
@@ -4758,31 +5180,20 @@
 Purpose~   This function tacks on the advection of q_CC. 
 _____________________________________________________________________  */
 template< class V, class T>
-void ICE::update_q_CC(const std::string& desc,
-                      CCVariable<T>& Q_CC,
+void ICE::update_q_CC(CCVariable<T>& Q_CC,
                       V& Q_Lagrangian,
                       const CCVariable<T>& Q_advected,
                       const CCVariable<double>& mass_new,
-                      const CCVariable<double>& cv_new,
                       const Patch* patch) 
 {
   //__________________________________
-  //  all Q quantites except Temperature
-  if (desc != "energy"){
-    for(CellIterator iter = patch->getCellIterator(); !iter.done();  iter++){
-      IntVector c = *iter;
-      Q_CC[c] = (Q_Lagrangian[c] + Q_advected[c])/mass_new[c] ;
-    }
+  //  all Q quantites 
+  for(CellIterator iter = patch->getCellIterator(); !iter.done();  iter++){
+    IntVector c = *iter;
+    Q_CC[c] = (Q_Lagrangian[c] + Q_advected[c])/mass_new[c] ;
   }
-  //__________________________________
-  //  Temperature
-  if(desc == "energy" ) {
-    for(CellIterator iter = patch->getCellIterator(); !iter.done();  iter++){
-      IntVector c = *iter;
-      Q_CC[c] = (Q_Lagrangian[c] + Q_advected[c])/(mass_new[c] * cv_new[c]) ;
-    }
-  }
 } 
+
 /* _____________________________________________________________________ 
  Function~  ICE::advectAndAdvanceInTime--
  Purpose~
@@ -4836,23 +5247,21 @@
       Material* matl = d_sharedState->getICEMaterial( m );
       int indx = matl->getDWIndex(); 
 
-      CCVariable<double> rho_CC, temp, sp_vol_CC,mach;
+      CCVariable<double> rho_CC, int_eng, sp_vol_CC,mach;
       CCVariable<Vector> vel_CC;
-      constCCVariable<double> int_eng_L_ME, mass_L,sp_vol_L,speedSound, cv;
-      constCCVariable<double> gamma, placeHolder, vol_frac;
+      constCCVariable<double> int_eng_L_ME, mass_L,sp_vol_L;
+      constCCVariable<double> placeHolder, vol_frac;
       constCCVariable<Vector> mom_L_ME;
       constSFCXVariable<double > uvel_FC;
       constSFCYVariable<double > vvel_FC;
       constSFCZVariable<double > wvel_FC;
 
-      new_dw->get(gamma,       lb->gammaLabel,            indx,patch,gn,0);
-      new_dw->get(speedSound,  lb->speedSound_CCLabel,    indx,patch,gn,0);
+      //new_dw->get(speedSound,  lb->speedSound_CCLabel,    indx,patch,gn,0);
       new_dw->get(vol_frac,    lb->vol_frac_CCLabel,      indx,patch,gn,0);
       new_dw->get(uvel_FC,     lb->uvel_FCMELabel,        indx,patch,gac,2);  
       new_dw->get(vvel_FC,     lb->vvel_FCMELabel,        indx,patch,gac,2);  
       new_dw->get(wvel_FC,     lb->wvel_FCMELabel,        indx,patch,gac,2);  
       new_dw->get(mass_L,      lb->mass_L_CCLabel,        indx,patch,gac,2);
-      new_dw->get(cv,          lb->specific_heatLabel,    indx,patch,gac,2);
 
       new_dw->get(mom_L_ME,    lb->mom_L_ME_CCLabel,      indx,patch,gac,2);
       new_dw->get(sp_vol_L,    lb->sp_vol_L_CCLabel,      indx,patch,gac,2);
@@ -4860,12 +5269,11 @@
       new_dw->getModifiable(sp_vol_CC, lb->sp_vol_CCLabel,indx,patch);
       new_dw->getModifiable(rho_CC,    lb->rho_CCLabel,   indx,patch);
 
-      new_dw->allocateAndPut(temp,   lb->temp_CCLabel,  indx,patch);          
+      new_dw->allocateAndPut(int_eng, lb->int_eng_CCLabel,  indx,patch);          
       new_dw->allocateAndPut(vel_CC, lb->vel_CCLabel,   indx,patch);
       new_dw->allocateAndPut(mach,   lb->machLabel,     indx,patch);  
 
       rho_CC.initialize(0.0);
-      temp.initialize(0.0);
       q_advected.initialize(0.0);  
       mass_advected.initialize(0.0);
       vel_CC.initialize(Vector(0.0,0.0,0.0));
@@ -4908,7 +5316,7 @@
       advector->advectQ(mom_L_ME,mass_L,qV_advected, varBasket);
 
       update_q_CC<constCCVariable<Vector>, Vector>
-                 ("velocity",vel_CC, mom_L_ME, qV_advected, mass_new,cv, patch);
+             (vel_CC, mom_L_ME, qV_advected, mass_new, patch);
 
       //__________________________________
       //    Jim's tweak
@@ -4928,11 +5336,11 @@
       advector->advectQ(sp_vol_L,mass_L, q_advected, varBasket); 
 
       update_q_CC<constCCVariable<double>, double>
-             ("sp_vol",sp_vol_CC, sp_vol_L, q_advected, mass_new, cv,patch);       
+             (sp_vol_CC, sp_vol_L, q_advected, mass_new, patch);
 
       //__________________________________
       // Advect model variables 
-      if(d_models.size() > 0 && d_modelSetup->tvars.size() > 0){
+      if(d_modelSetup->tvars.size() > 0){
         vector<TransportedVariable*>::iterator t_iter;
         for( t_iter  = d_modelSetup->tvars.begin();
              t_iter != d_modelSetup->tvars.end(); t_iter++){
@@ -4951,7 +5359,7 @@
             advector->advectQ(q_L_CC,mass_L,q_advected, varBasket);  
    
             update_q_CC<constCCVariable<double>, double>
-                 ("q_L_CC",q_CC, q_L_CC, q_advected, mass_new, cv, patch);
+                 (q_CC, q_L_CC, q_advected, mass_new, patch);
                   
             //  Set Boundary Conditions
             setBC(q_CC, Labelname,  patch, d_sharedState, indx, new_dw);  
@@ -4970,53 +5378,41 @@
       } 
 
       //__________________________________
-      // A model *can* compute the specific heat
-      CCVariable<double> cv_new;
-      new_dw->allocateTemporary(cv_new, patch,gac,2);
-      cv_new.copyData(cv);
-      
-      if(d_models.size() != 0){
-        for(vector<ModelInterface*>::iterator iter = d_models.begin();
-                                              iter != d_models.end(); iter++){ 
-          ModelInterface* model = *iter;
-          if(model->computesThermoTransportProps() ) {
-            model->computeSpecificHeat(cv_new, patch, new_dw, indx);
-          }
-        }
-      }
-
-      //__________________________________
-      // Advect internal energy and backout Temp_CC
+      // Advect internal energy
       varBasket->is_Q_massSpecific = true;
       varBasket->desc = "int_eng";
       advector->advectQ(int_eng_L_ME, mass_L, q_advected, varBasket);
       
       update_q_CC<constCCVariable<double>, double>
-            ("energy",temp, int_eng_L_ME, q_advected, mass_new, cv_new, patch);
+            (int_eng, int_eng_L_ME, q_advected, mass_new, patch);
+
       
       //__________________________________
       // set the boundary conditions
       preprocess_CustomBCs("Advection",old_dw, new_dw, lb,  patch, 999,
                            d_customBC_var_basket);
        
-      setBC(rho_CC, "Density",  placeHolder, placeHolder,
+      setBC(rho_CC, "Density",
             patch,d_sharedState, indx, new_dw, d_customBC_var_basket);
       setBC(vel_CC, "Velocity", 
             patch,d_sharedState, indx, new_dw, d_customBC_var_basket);       
-      setBC(temp,"Temperature",gamma, cv,
-            patch,d_sharedState, indx, new_dw, d_customBC_var_basket);
-            
       setSpecificVolBC(sp_vol_CC, "SpecificVol", false,rho_CC,vol_frac,
                        patch,d_sharedState, indx);     
+      setBC_Temperature(int_eng, patch,d_sharedState, indx, old_dw, new_dw,
+                        ThermoInterface::NewState, sp_vol_CC, d_customBC_var_basket);
+            
       delete_CustomBCs(d_customBC_var_basket);
                                
       //__________________________________
       // Compute Auxilary quantities
+      cerr << "(benign) WARNING: mach number not finished\n";
+#if 0
       for(CellIterator iter = patch->getExtraCellIterator();
                                                         !iter.done(); iter++){
         IntVector c = *iter;
         mach[c]  = vel_CC[c].length()/speedSound[c];
       }
+#endif
 
       //---- P R I N T   D A T A ------   
       if (switchDebug_advance_advect ) {
@@ -5028,7 +5424,7 @@
        printData(   indx, patch,1, desc.str(), "sp_vol_L",    sp_vol_L);
        printData(   indx, patch,1, desc.str(), "int_eng_L_CC",int_eng_L_ME);
        printData(   indx, patch,1, desc.str(), "rho_CC",      rho_CC);
-       printData(   indx, patch,1, desc.str(), "Temp_CC",     temp);
+       printData(   indx, patch,1, desc.str(), "int_eng_CC",  int_eng);
        printData(   indx, patch,1, desc.str(), "sp_vol_CC",   sp_vol_CC);
        printVector( indx, patch,1, desc.str(), "vel_CC", 0,   vel_CC);
       }
@@ -5041,10 +5437,13 @@
         warn << base.str() << neg_cell << " negative rho_CC\n ";
         throw InvalidValue(warn.str(), __FILE__, __LINE__);
       }
-      if (!areAllValuesPositive(temp, neg_cell)) {
-        warn << base.str() << neg_cell << " negative temp_CC\n ";
+      cerr << "(benign) WARNING: check for negative internal energy disabled\n";
+#if 0
+      if (!areAllValuesPositive(int_eng, neg_cell)) {
+        warn << base.str() << neg_cell << " negative int_eng_CC\n ";
         throw InvalidValue(warn.str(), __FILE__, __LINE__);
       }
+#endif
       if (!areAllValuesPositive(sp_vol_CC, neg_cell)) {
        warn << base.str() << neg_cell << " negative sp_vol_CC\n ";        
        throw InvalidValue(warn.str(), __FILE__, __LINE__);
@@ -5054,6 +5453,7 @@
     delete advector;
   }  // patch loop
 }
+
 /*_______________________________________________________________________
  Function:  TestConservation--
  Purpose:   Test for conservation of mass, momentum, energy.   
@@ -5150,24 +5550,20 @@
     // conservation of internal_energy
     if(d_conservationTest->energy){
       CCVariable<double> int_eng;
-      constCCVariable<double> temp_CC;
-      constCCVariable<double> cv;
-      new_dw->allocateTemporary(int_eng,patch);
-
+      constCCVariable<double> spec_int_eng;
+      new_dw->allocateTemporary(int_eng, patch);
+      
       for (int m = 0; m < numICEmatls; m++ ) {
-
         ICEMaterial* ice_matl = d_sharedState->getICEMaterial(m);
         int indx = ice_matl->getDWIndex();
-        new_dw->get(temp_CC, lb->temp_CCLabel,      indx, patch, gn,0);
-        new_dw->get(cv,      lb->specific_heatLabel,indx, patch, gn,0);
-        
+        new_dw->get(spec_int_eng, lb->int_eng_CCLabel,      indx, patch, gn,0);
+
         for (CellIterator iter=patch->getExtraCellIterator();!iter.done();iter++){
           IntVector c = *iter;
-          int_eng[c] = mass[m][c] * cv[c] * temp_CC[c];
+          int_eng[c] = mass[m][c] * spec_int_eng[c];
         }
-        
+
         double mat_int_eng(0);
-        
         conservationTest<double>(patch, delT, int_eng,
                                  uvel_FC[m],vvel_FC[m],wvel_FC[m], mat_int_eng);
         total_int_eng += mat_int_eng;
@@ -5242,8 +5638,8 @@
  Notes:     press_hydro = rho_micro_CC[SURROUNDING_MAT] * grav * some_distance
 _______________________________________________________________________ */
 void ICE::hydrostaticPressureAdjustment(const Patch* patch,
-                                const CCVariable<double>& rho_micro_CC,
-                                CCVariable<double>& press_CC)
+                                        const CCVariable<double>& sp_vol_CC,
+                                        CCVariable<double>& press_CC)
 {
   Vector gravity = d_sharedState->getGravity();
   // find the upper and lower point of the domain.
@@ -5272,7 +5668,7 @@
     Point here = level->getCellPosition(c);
     Vector dist_from_p_ref = (here.asVector() - press_ref_pt);
 
-    double press_hydro = rho_micro_CC[c] * gravity[dir] * dist_from_p_ref[dir];
+    double press_hydro =  gravity[dir] * dist_from_p_ref[dir] / sp_vol_CC[c];
     press_CC[c] += press_hydro;
   }
 }
