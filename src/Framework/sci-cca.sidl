/*
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/

package sci {
  package cca version 0.2.1 {

    /** Exception used by EventService, Topic and WildcardTopic methods. */
    interface EventServiceException extends gov.cca.CCAException {
    }

    interface AbstractFramework extends gov.cca.AbstractFramework {
      //non-spec interface
      /**
       * Registers the slave framework with the master framework. Intended to be called
       * only by the representative slave framework process.
       * @param size Total number of parallel slave frameworks.
       * @param slaveURLs Urls of the slave framework.
       * @param slaveName Name of the slave resource.
       * @return A positive number or zero if framework was registered
       *   successfully, negative number on error.
       */
      int registerLoader(in string slaveName, in array<string,1> slaveURLs);
      int unregisterLoader(in string slaveName);

      /** start to share the CCA components with other CCA frameworks by
          1. broadcasting its own framework URL
          2. listening to other frameworks' broadcasting
          3. query the CCA components set available in other frameworks.
      */
      //void share(in gov.cca.Services svc);
      /** This one is in test for distributed computing

      */
      //string createComponent(in string name, in string type);
    }

    interface ComponentClassDescription extends gov.cca.ComponentClassDescription {
      // non-official interfaces
      string getComponentModelName() throws gov.cca.CCAException;

      string getLoaderName() throws gov.cca.CCAException;
    }

    /**
     * Stores event header and event body:
     * Header: should not be empty, may contain delivery metadata
     *              about the event, framework, component etc.
     * Body: may be empty, may contain event data
     */
    interface Event {
      //void setHeader(in gov.cca.TypeMap header);
      //void setBody(in gov.cca.TypeMap body);

      gov.cca.TypeMap getHeader();
      gov.cca.TypeMap getBody();
    }

    /** Interface implemented by components interested in events. */
    interface EventListener {
      /** This is where event processing by a listener takes place. */
      void processEvent(in string topicName, in Event theEvent);
    }

    interface Topic {
      /**
       * @return Topic name (from EventService.createTopic)
       */
      string getTopicName();

      /** Publish an event. */
      void sendEvent(in string name, in gov.cca.TypeMap eventBody) throws EventServiceException;
    }

    /** Mechanism for grouping hierarchically related Topics for subscribers. */
    interface Subscription {
      /**
       * Register an EventListener on a Topic or a group of Topics (through Subscription).
       * @exception if listenerKey is null or empty or if listener is null
       */
      void registerEventListener(in string listenerKey, in EventListener theListener) throws EventServiceException;

      /**
        * Unregister an EventListener on a Topic or a group of Topics (through Subscription).
        * @exception if listenerKey is null or empty
        */

      void unregisterEventListener(in string listenerKey);
      /**
        * @return Topic name (from EventService.createTopic)
        */
      string getSubscriptionName();
    }

    interface Builder extends gov.cca.Component {
      string getFrameworkURL();
      string getConfigDir();

      // wrapper for ComponentRepository
      void getComponentClassDescriptions(out array<ComponentClassDescription> descArray);

      // wrappers for BuilderService mostly
      void getPortInfo(in gov.cca.ComponentID cid, in string portName, out string model, out string type);

      // manage component creation/destruction
      gov.cca.ComponentID createInstance(in ComponentClassDescription classDesc);
      void destroyInstance(in gov.cca.ComponentID cid, in float timeout);
      int destroyInstances(in array<gov.cca.ComponentID> cidArray, in float timeout);

      gov.cca.ComponentID generateBridge(in gov.cca.ComponentID user,
                                                                  in string usesPortName,
                                                                  in gov.cca.ComponentID provider,
                                                                  in string providesPortName,
                                                                  out gov.cca.ConnectionID connID1,
                                                                  out gov.cca.ConnectionID connID2);

      void getUsedPortNames(in gov.cca.ComponentID cid, out array<string> nameArray);
      void getProvidedPortNames(in gov.cca.ComponentID cid, out array<string> nameArray);

      void getCompatiblePortList(in gov.cca.ComponentID c1,
                                                  in string port1,
                                                  in gov.cca.ComponentID c2,
                                                  out array<string> portArray);

      void getBridgeablePortList(in gov.cca.ComponentID c1,
                                                in string port1,
                                                in gov.cca.ComponentID c2,
                                                out array<string> portArray);

      // manage connections
      gov.cca.ConnectionID connect(in gov.cca.ComponentID usesCID,
                                                       in string usesPortName,
                                                       in gov.cca.ComponentID providesCID,
                                                       in string providesPortName);
      void disconnect(in gov.cca.ConnectionID connID, in float timeout); // note: don't support timeout yet
      // void disconnectAll(); note: not implemented in BuilderService yet

      void addComponentFromXML(in string filePath, in string componentModel);

      void addFrameworkProxy(in string loaderName,
                                              in string user,
                                              in string domain,
                                              in string loaderPath);
      void removeFrameworkProxy(in string name);

      // manage go ports for the UI
      bool connectGoPort(in string usesName,
                                      in string providesPortName,
                                      in gov.cca.ComponentID cid,
                                      out string usesPortName);
      void disconnectGoPort(in string goPortName);
      int go(in string goPortName);

      bool applicationFileExists();
      void loadApplication(in string fileName,
                                       out array<gov.cca.ComponentID> cidList,
                                       out array<gov.cca.ConnectionID> connList);
      void saveApplication();
      void saveApplication[As](in string fileName);
    }

    package ports {

      interface BuilderService extends gov.cca.ports.BuilderService {
        /** Get available ports in c2 that can be connected to port1 of c1. */
        array<string> getCompatiblePortList(in gov.cca.ComponentID c1, in string port1, in gov.cca.ComponentID c2);

        //Bridge methods:
        /**
          * TODO: document getBridgeablePortList
          * @param cid1
          * @param port1
          * @param  cid2
          */
        array<string> getBridgeablePortList(in gov.cca.ComponentID cid1,
                                                                 in string port1,
                                                                 in gov.cca.ComponentID cid2);

        string generateBridge(in gov.cca.ComponentID user,
                                           in string usingPortName,
                                           in gov.cca.ComponentID provider,
                                           in string providingPortName);
      }

      interface ComponentRepository extends gov.cca.ports.ComponentRepository {
        /**
          * Add a component class to the framework at runtime.
          * @param componentClassName The name of a component.
          * @throws CCAException in the event of error.
          */
          void addComponentClass(in string componentClassName) throws gov.cca.CCAException;
      }

      /**
        * The proposed event service is based on a publish-subscribe model:
        * events are organized into a namespace of topics.
        * This service is responsible for organizing the namespace of topics,
        * setting and enforcing event policies,
        * and maintaining the resources needed for event distribution.
        */
      interface EventService extends gov.cca.Port {

        /**
          * @return the Topic if it already exists,
          * @exception EventServiceException if creating Topic fails
          */
        sci.cca.Topic createTopic(in string topicName) throws sci.cca.EventServiceException;

        /**
          * Get a Topic by name.
          * @return Topic,
          * @exception EventServiceException if topicName is empty or if not found
          */
        sci.cca.Topic getTopic(in string topicName) throws sci.cca.EventServiceException;

        /**
          * @return the Subscription if it already exists,
          * @exception EventServiceException if creating Subscription fails
          */
        sci.cca.Subscription subscribeToEvents(in string topicName) throws sci.cca.EventServiceException;

        /**
          * Notifies the EventService that this Topic is no longer used.
          * @exception EventServiceException if topicName is empty or if not found
          */
        void releaseTopic(in string topicName) throws sci.cca.EventServiceException;

        /**
          * Notifies the EventService that this Subscription is no longer used.
          * @exception EventServiceException if topicName is empty or if not found
          */
        void releaseSubscription(in sci.cca.Subscription subscription) throws sci.cca.EventServiceException;

        /** Process published events. */
        void processEvents();
      }

    } // package ports
  } // package cca
} // package sci
