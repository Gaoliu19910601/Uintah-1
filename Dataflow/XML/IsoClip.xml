<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "component.dtd">
<?xml-stylesheet href="component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->



<component name="IsoClip" category="FieldsCreate">
  <overview>
    <authors>
      <author>Michael Callahan</author>
    </authors>
    <summary>Clip a scalar field to a specified isovalue.</summary>
    <description>

    <p>The IsoClip module is used to clip a TetVol or TriSurf field
    along a particular isovalue.  The isovalue is specified by the
    entry in the GUI.  The new field can contain either the values
    less than or greater than the isovalue, as selected by the user. </p>

    <p> In order to compute where the cuts
    are to be made, the input field must contain scalar values at the
    nodes.  If the input field contains element centered data then either
    just use <modref package="SCIRun" name="ClipByFunction"/> to determine which elements to keep or
    interpolate the elements onto a node-centered field. </p>

    <p> Only TetVol and TriSurf fields are supported by this general
    clipping.  Other fields should be converted into these types if
    they are to be clipped.  See <modref package="SCIRun" name="HexToTet"/>, <modref package="SCIRun" name="QuadToTri"/>, and <modref package="SCIRun" name="Unstructure"/>
    for an idea of how to do this conversion. </p>

    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
	<name>Input Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
      <port>
	<name>Optional Isovalue</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
	<name>Output Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
      <port>
	<name>Interpolant</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
    </outputs>
  </io>
  <testing>
  </testing>
</component>
