/*
 *  ManipFields.cc:
 *
 *  Written by:
 *   moulding
 *   TODAY'S DATE HERE
 *
 */

#include <Dataflow/Network/Module.h>
#include <Core/Malloc/Allocator.h>
#include <Core/Util/soloader.h>
#include <Dataflow/Network/NetworkEditor.h>
#include <Core/Util/sci_system.h>
#include <Dataflow/Network/FileUtils.h>
#include <stdio.h>

#include <Dataflow/share/share.h>

namespace SCIRun {

char skel_cc[] = \
"#include <Dataflow/Network/Module.h>\n" 
"#include <Dataflow/Network/NetworkEditor.h>\n" 
"#include <iostream>\n" 
"\n"
"#include <Dataflow/share/share.h>\n"
"\n" 
"namespace SCIRun {\n" 
"\n"
"extern \"C\" PSECORESHARE void %s(Module *m)\n" /* manip name */ 
"{\n" 
"}\n" 
"\n" 
"} // namespace SCIRun\n" 
"\n";  

char skel_tcl[] = \
"proc fm_ui_%s { p modname } {\n" /* manip name */ 
"    label $p.note -text \"This GUI was auto generated by ManipFields\"\n" 
"    pack $p.note\n" 
"}\n" 
"\n";

using namespace SCIRun;

typedef void (*manip_func)(Module*);

class PSECORESHARE ManipFields : public Module {
  LIBRARY_HANDLE lib;
  clString lib_error;
  clString cur_frame;
  manip_func manip;
  TCLstring manips;
public:
  ManipFields(const clString& id);

  virtual ~ManipFields();

  virtual void execute();

  virtual void tcl_command(TCLArgs&, void*);

  void reloadLib();
  int GenFiles(clString,clString);
};

extern "C" PSECORESHARE Module* make_ManipFields(const clString& id) {
  return scinew ManipFields(id);
}

ManipFields::ManipFields(const clString& id)
  : Module("ManipFields", id, Source, "Fields", "SCIRun"),
    manips("manips",id,this)
{
#ifdef _WIN32
  lib = GetLibraryHandle("libManipFields.dll");
#else
  lib = GetLibraryHandle("libManipFields.so");
#endif
  if (!lib)
    lib_error = SOError();
}

ManipFields::~ManipFields(){
}

void ManipFields::execute(){

  clString tcl_manip;

  if (!lib) {
    postMessage(clString("ManipFields: couldn't open manipulation "
			 "library:\n - ")+
		lib_error);
    return;
  } else {
    TCL::eval(id+" getCurManip",tcl_manip);
    manip = (manip_func)GetHandleSymbolAddress(lib,tcl_manip());
  }

  if (!manip) {
    postMessage(clString("ManipFields: manipulation '")+tcl_manip+
		"' not defined.");
    return;
  }

  manip(this);
}

void ManipFields::tcl_command(TCLArgs& args, void* userdata)
{
  clString command;
  if (args[1] == "getManips") {
    // These are examples.  later on, get these from an .xml file
    manips.set("Rescale Relocate");
  } else if (args[1] == "edit") {
    command = clString("emacs ")+args[2];
    sci_system(command());
  } else if (args[1] == "generate") {
    GenFiles(args[2],args[3]);
  } else if (args[1] == "rebuildManips") {
    clString path = args[2];
    clString build = args[3];
    command = clString("rm ")+path+"/src/Dataflow/GUI/tclIndex";
    sci_system(command());
    command = clString("rm ")+build+
      "/Dataflow/Modules/ManipFields/Makefile";
    sci_system(command());
    command = clString("cd "+build+" && gmake");
    sci_system(command());
    reloadLib();
  } else 
    Module::tcl_command(args, userdata);
}

void ManipFields::reloadLib()
{
  if (lib)
    CloseLibrary(lib);
  
#ifdef _WIN32
  lib = GetLibraryHandle("libManipFields.dll");
#else
  lib = GetLibraryHandle("libManipFields.so");
#endif

  if (!lib)
    lib_error = SOError();
}

int ManipFields::GenFiles(clString path, clString name)
{
  FILE* file;
  clString fullpath;
  clString str;

  // add a .cc file to the ManipFields sub dir
  fullpath=path+"/src/Dataflow/Modules/ManipFields/"+name+".cc";
  file = fopen(fullpath(),"w");
  fprintf(file,skel_cc,name());
  fclose(file);

  // add a .tcl file to the GUI sub dir
  fullpath = path+"/src/Dataflow/GUI/"+name+".tcl";
  file = fopen(fullpath(),"w");
  fprintf(file,skel_tcl,name());
  fclose(file);

  // edit the .cc sub.mk file - add the new .cc file
  fullpath = path+"/src/Dataflow/Modules/ManipFields/sub.mk";
  str = clString("\t$(SRCDIR)/")+name+".cc\\\n";
  InsertStringInFile((char*)fullpath(),"#[INSERT NEW CODE FILE HERE]",
		     (char*)str());

  // 
  // TO DO
  // 
  // - edit the .tcl sub.mk file: add the new .tcl file
  //

  fullpath = clString("emacs ")+
             path+"/src/Dataflow/Modules/ManipFields/"+name+".cc "+
             path+"/src/Dataflow/GUI/"+name+".tcl "+
             path+"/src/Dataflow/Modules/ManipFields/sub.mk ";
  
  sci_system(fullpath());
}

} // End namespace SCIRun


