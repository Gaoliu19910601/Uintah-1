Common subdirectories: ICE_SM/Advection_2D and ICE_SM_TEST//Advection_2D
Common subdirectories: ICE_SM/Boundary_Cond and ICE_SM_TEST//Boundary_Cond
Common subdirectories: ICE_SM/CVS and ICE_SM_TEST//CVS
Common subdirectories: ICE_SM/Doc_utils and ICE_SM_TEST//Doc_utils
Common subdirectories: ICE_SM/Equation_of_state and ICE_SM_TEST//Equation_of_state
Only in ICE_SM: Eventually_trash
Common subdirectories: ICE_SM/Header_files and ICE_SM_TEST//Header_files
Common subdirectories: ICE_SM/Input_Files and ICE_SM_TEST//Input_Files
Common subdirectories: ICE_SM/Libraries and ICE_SM_TEST//Libraries
diff -r ICE_SM/Makefile ICE_SM_TEST//Makefile
21c21
< ICE_DIR         = /usr/people/harman/Csafe/ICE_SM
---
> ICE_DIR         = /usr/people/harman/Csafe/ICE_SM_TEST
Common subdirectories: ICE_SM/Plot_routines and ICE_SM_TEST//Plot_routines
Common subdirectories: ICE_SM/PressureSolve and ICE_SM_TEST//PressureSolve
Common subdirectories: ICE_SM/PressureSolve_PCG and ICE_SM_TEST//PressureSolve_PCG
Common subdirectories: ICE_SM/Results and ICE_SM_TEST//Results
Common subdirectories: ICE_SM/Source_Sinks and ICE_SM_TEST//Source_Sinks
Common subdirectories: ICE_SM/Tests and ICE_SM_TEST//Tests
Common subdirectories: ICE_SM/Write_output and ICE_SM_TEST//Write_output
diff -r ICE_SM/commonFunctions.c ICE_SM_TEST//commonFunctions.c
121,122c121,122
<                         A   = fudge_factor*CFL*delX/fabs(speedSound[i][j][k][m] + SMALL_NUM); 
<                         B   = fudge_factor*CFL*delY/fabs(speedSound[i][j][k][m] + SMALL_NUM);
---
>                         A   = fudge_factor*CFL*delX/fabs(speedSound[m][i][j][k] + SMALL_NUM); 
>                         B   = fudge_factor*CFL*delY/fabs(speedSound[m][i][j][k] + SMALL_NUM);
132,133c132,133
<                         A   = fudge_factor*CFL*delX/( speedSound[i][j][k][m] + fabs(*uvel_FC[i][j][k][f][m]) + SMALL_NUM); 
<                         B   = fudge_factor*CFL*delY/( speedSound[i][j][k][m] + fabs(*vvel_FC[i][j][k][f][m]) + SMALL_NUM);
---
>                         A   = fudge_factor*CFL*delX/( speedSound[m][i][j][k] + fabs(*uvel_FC[i][j][k][f][m]) + SMALL_NUM); 
>                         B   = fudge_factor*CFL*delY/( speedSound[m][i][j][k] + fabs(*vvel_FC[i][j][k][f][m]) + SMALL_NUM);
312,313c312,313
<                     A   = fudge_factor*CFL*delX/fabs(uvel_CC[i][j][k][m] + SMALL_NUM); 
<                     B   = fudge_factor*CFL*delY/fabs(vvel_CC[i][j][k][m] + SMALL_NUM);
---
>                     A   = fudge_factor*CFL*delX/fabs(uvel_CC[m][i][j][k] + SMALL_NUM); 
>                     B   = fudge_factor*CFL*delY/fabs(vvel_CC[m][i][j][k] + SMALL_NUM);
321,322c321,322
<                     A   = fudge_factor*CFL*delX/fabs(speedSound[i][j][k][m] + SMALL_NUM); 
<                     B   = fudge_factor*CFL*delY/fabs(speedSound[i][j][k][m] + SMALL_NUM);
---
>                     A   = fudge_factor*CFL*delX/fabs(speedSound[m][i][j][k] + SMALL_NUM); 
>                     B   = fudge_factor*CFL*delY/fabs(speedSound[m][i][j][k] + SMALL_NUM);
332,333c332,333
<                     A   = fudge_factor*CFL*delX/( speedSound[i][j][k][m] + fabs(uvel_CC[i][j][k][m]) + SMALL_NUM); 
<                     B   = fudge_factor*CFL*delY/( speedSound[i][j][k][m] + fabs(vvel_CC[i][j][k][m]) + SMALL_NUM);
---
>                     A   = fudge_factor*CFL*delX/( speedSound[m][i][j][k] + fabs(uvel_CC[m][i][j][k]) + SMALL_NUM); 
>                     B   = fudge_factor*CFL*delY/( speedSound[m][i][j][k] + fabs(vvel_CC[m][i][j][k]) + SMALL_NUM);
341,342c341,342
<                     A   = fudge_factor * 0.5 * pow(delX, 2.0)/fabs(uvel_CC[i][j][k][m]); 
<                     B   = fudge_factor * 0.5 * pow(delY, 2.0)/fabs(vvel_CC[i][j][k][m]);
---
>                     A   = fudge_factor * 0.5 * pow(delX, 2.0)/fabs(uvel_CC[m][i][j][k]); 
>                     B   = fudge_factor * 0.5 * pow(delY, 2.0)/fabs(vvel_CC[m][i][j][k]);
394c394
<     QUITE_FULLWARN(delZ);   QUITE_FULLWARN(wvel_CC[0][0][0][1]);
---
>     QUITE_FULLWARN(delZ);   QUITE_FULLWARN(wvel_CC[1][0][0][0]);
511,512c511,512
<                     A = MAX(speedSound[i][j][k][m], speedSound[i][j+1][k][m]);
<                     B = fabs( vvel_CC[i][j][k][m] - vvel_CC[i][j+1][k][m] );
---
>                     A = MAX(speedSound[m][i][j][k], speedSound[m][i][j+1][k]);
>                     B = fabs( vvel_CC[m][i][j][k] - vvel_CC[m][i][j+1][k] );
521,522c521,522
<                     A = MAX(speedSound[i][j][k][m], speedSound[i][j-1][k][m]);
<                     B = fabs( vvel_CC[i][j][k][m] - vvel_CC[i][j-1][k][m] );
---
>                     A = MAX(speedSound[m][i][j][k], speedSound[m][i][j-1][k]);
>                     B = fabs( vvel_CC[m][i][j][k] - vvel_CC[m][i][j-1][k] );
532,533c532,533
<                     A = MAX(speedSound[i][j][k][m], speedSound[i+1][j][k][m]);
<                     B = fabs( uvel_CC[i][j][k][m] - uvel_CC[i+1][j][k][m] );
---
>                     A = MAX(speedSound[m][i][j][k], speedSound[m][i+1][j][k]);
>                     B = fabs( uvel_CC[m][i][j][k] - uvel_CC[m][i+1][j][k] );
543,544c543,544
<                     A = MAX(speedSound[i][j][k][m], speedSound[i-1][j][k][m]);
<                     B = fabs( uvel_CC[i][j][k][m] - uvel_CC[i-1][j][k][m] );
---
>                     A = MAX(speedSound[m][i][j][k], speedSound[m][i-1][j][k]);
>                     B = fabs( uvel_CC[m][i][j][k] - uvel_CC[m][i-1][j][k] );
555,556c555,556
<                     A = MAX(speedSound[i][j][k][m], speedSound[i][j][k+1][m]);
<                     B = fabs( wvel_CC[i][j][k][m] - wvel_CC[i][j][k+1][m] );
---
>                     A = MAX(speedSound[m][i][j][k], speedSound[m][i][j][k+1]);
>                     B = fabs( wvel_CC[m][i][j][k] - wvel_CC[m][i][j][k+1] );
568,569c568,569
<                     A = MAX(speedSound[i][j][k][m], speedSound[i][j][k-1][m]);
<                     B = fabs( wvel_CC[i][j][k][m] - wvel_CC[i][j][k-1][m] );
---
>                     A = MAX(speedSound[m][i][j][k], speedSound[m][i][j][k-1]);
>                     B = fabs( wvel_CC[m][i][j][k] - wvel_CC[m][i][j][k-1] );
627c627
<     QUITE_FULLWARN(delZ);   QUITE_FULLWARN(wvel_CC[0][0][0][1]);
---
>     QUITE_FULLWARN(delZ);   QUITE_FULLWARN(wvel_CC[1][0][0][0]);
826c826
<                        array1[i][j][k][m] = 0.0;              
---
>                        array1[m][i][j][k] = 0.0;              
1163c1163
<                     div_vel_FC[i][j][k][m] = (   topface   + bottomface    + leftface 
---
>                     div_vel_FC[m][i][j][k] = (   topface   + bottomface    + leftface 
1305,1307c1305,1307
<             grad_q_X[i][j][k] =         (q_CC[i+1][j][k][m] - q_CC[i-1][j][k][m])/(2.0*delX);
<             grad_q_Y[i][j][k] =         (q_CC[i][j+1][k][m] - q_CC[i][j-1][k][m])/(2.0*delY); 
<             grad_q_Z[i][j][k] = IF_3D(  (q_CC[i][j][k+1][m] - q_CC[i][j][k-1][m])/(2.0*delZ) );   
---
>             grad_q_X[i][j][k] =         (q_CC[m][i+1][j][k] - q_CC[m][i-1][j][k])/(2.0*delX);
>             grad_q_Y[i][j][k] =         (q_CC[m][i][j+1][k] - q_CC[m][i][j-1][k])/(2.0*delY); 
>             grad_q_Z[i][j][k] = IF_3D(  (q_CC[m][i][j][k+1] - q_CC[m][i][j][k-1])/(2.0*delZ) );   
1363,1364c1363,1364
<                         grad_q_X[i][j][k] =         (-3.0 * q_CC[i][j][k][m]   + 4.0 * q_CC[i+1][j][k][m] - q_CC[i+2][j][k][m])/(delX);
<                         grad_q_Y[i][j][k] =         (q_CC[i][j+1][k][m] - q_CC[i][j-1][k][m])/(2.0*delY); 
---
>                         grad_q_X[i][j][k] =         (-3.0 * q_CC[m][i][j][k]   + 4.0 * q_CC[m][i+1][j][k] - q_CC[m][i+2][j][k])/(delX);
>                         grad_q_Y[i][j][k] =         (q_CC[m][i][j+1][k] - q_CC[m][i][j-1][k])/(2.0*delY); 
1366c1366
<                        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[i][j][k+1][m] - q_CC[i][j][k-1][m])/(2.0*delZ) ); */   
---
>                        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[m][i][j][k+1] - q_CC[m][i][j][k-1])/(2.0*delZ) ); */   
1371,1372c1371,1372
<                         grad_q_X[i][j][k] =         (3.0 * q_CC[i][j][k][m]   - 4.0 * q_CC[i-1][j][k][m] + q_CC[i-2][j][k][m])/(delX);
<                         grad_q_Y[i][j][k] =         (q_CC[i][j+1][k][m] - q_CC[i][j-1][k][m])/(2.0*delY); 
---
>                         grad_q_X[i][j][k] =         (3.0 * q_CC[m][i][j][k]   - 4.0 * q_CC[m][i-1][j][k] + q_CC[m][i-2][j][k])/(delX);
>                         grad_q_Y[i][j][k] =         (q_CC[m][i][j+1][k] - q_CC[m][i][j-1][k])/(2.0*delY); 
1374c1374
<                        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[i][j][k+1][m] - q_CC[i][j][k-1][m])/(2.0*delZ) ); */   
---
>                        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[m][i][j][k+1] - q_CC[m][i][j][k-1])/(2.0*delZ) ); */   
1378,1379c1378,1379
<                         grad_q_X[i][j][k] =         (q_CC[i+1][j][k][m] - q_CC[i-1][j][k][m])/(2.0*delX);
<                         grad_q_Y[i][j][k] =         (3.0 * q_CC[i][j][k][m]   - 4.0 * q_CC[i][j-1][k][m] + q_CC[i][j-2][k][m])/(delY);
---
>                         grad_q_X[i][j][k] =         (q_CC[m][i+1][j][k] - q_CC[m][i-1][j][k])/(2.0*delX);
>                         grad_q_Y[i][j][k] =         (3.0 * q_CC[m][i][j][k]   - 4.0 * q_CC[m][i][j-1][k] + q_CC[m][i][j-2][k])/(delY);
1381c1381
<                        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[i][j][k+1][m] - q_CC[i][j][k-1][m])/(2.0*delZ) ); */   
---
>                        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[m][i][j][k+1] - q_CC[m][i][j][k-1])/(2.0*delZ) ); */   
1385,1386c1385,1386
<                         grad_q_X[i][j][k] =         (q_CC[i+1][j][k][m] - q_CC[i-1][j][k][m])/(2.0*delX);
<                         grad_q_Y[i][j][k] =         (-3.0 * q_CC[i][j][k][m]   + 4.0 * q_CC[i][j+1][k][m] - q_CC[i][j+2][k][m])/(delY);
---
>                         grad_q_X[i][j][k] =         (q_CC[m][i+1][j][k] - q_CC[m][i-1][j][k])/(2.0*delX);
>                         grad_q_Y[i][j][k] =         (-3.0 * q_CC[m][i][j][k]   + 4.0 * q_CC[m][i][j+1][k] - q_CC[m][i][j+2][k])/(delY);
1388c1388
<                        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[i][j][k+1][m] - q_CC[i][j][k-1][m])/(2.0*delZ) ); */   
---
>                        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[m][i][j][k+1] - q_CC[m][i][j][k-1])/(2.0*delZ) ); */   
1429,1430c1429,1430
<         grad_q_X[i][j][k] =         (-3.0 * q_CC[i][j][k][m]   + 4.0 * q_CC[i+1][j][k][m] - q_CC[i+2][j][k][m])/(delX);
<         grad_q_Y[i][j][k] =         ( 3.0 * q_CC[i][j][k][m]   - 4.0 * q_CC[i][j-1][k][m] + q_CC[i][j-2][k][m])/(delY);
---
>         grad_q_X[i][j][k] =         (-3.0 * q_CC[m][i][j][k]   + 4.0 * q_CC[m][i+1][j][k] - q_CC[m][i+2][j][k])/(delX);
>         grad_q_Y[i][j][k] =         ( 3.0 * q_CC[m][i][j][k]   - 4.0 * q_CC[m][i][j-1][k] + q_CC[m][i][j-2][k])/(delY);
1432c1432
<        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[i][j][k+1][m] - q_CC[i][j][k-1][m])/(2.0*delZ) ); */   
---
>        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[m][i][j][k+1] - q_CC[m][i][j][k-1])/(2.0*delZ) ); */   
1442,1443c1442,1443
<         grad_q_X[i][j][k] =         ( 3.0 * q_CC[i][j][k][m]   - 4.0 * q_CC[i-1][j][k][m] + q_CC[i-2][j][k][m])/(delX);
<         grad_q_Y[i][j][k] =         ( 3.0 * q_CC[i][j][k][m]   - 4.0 * q_CC[i][j-1][k][m] + q_CC[i][j-2][k][m])/(delY);
---
>         grad_q_X[i][j][k] =         ( 3.0 * q_CC[m][i][j][k]   - 4.0 * q_CC[m][i-1][j][k] + q_CC[m][i-2][j][k])/(delX);
>         grad_q_Y[i][j][k] =         ( 3.0 * q_CC[m][i][j][k]   - 4.0 * q_CC[m][i][j-1][k] + q_CC[m][i][j-2][k])/(delY);
1445c1445
<        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[i][j][k+1][m] - q_CC[i][j][k-1][m])/(2.0*delZ) ); */   
---
>        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[m][i][j][k+1] - q_CC[m][i][j][k-1])/(2.0*delZ) ); */   
1456,1457c1456,1457
<         grad_q_X[i][j][k] =         (  3.0 * q_CC[i][j][k][m]   - 4.0 * q_CC[i-1][j][k][m] + q_CC[i-2][j][k][m])/(delX);
<         grad_q_Y[i][j][k] =         ( -3.0 * q_CC[i][j][k][m]   + 4.0 * q_CC[i][j+1][k][m] - q_CC[i][j+2][k][m])/(delY);
---
>         grad_q_X[i][j][k] =         (  3.0 * q_CC[m][i][j][k]   - 4.0 * q_CC[m][i-1][j][k] + q_CC[m][i-2][j][k])/(delX);
>         grad_q_Y[i][j][k] =         ( -3.0 * q_CC[m][i][j][k]   + 4.0 * q_CC[m][i][j+1][k] - q_CC[m][i][j+2][k])/(delY);
1459c1459
<        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[i][j][k+1][m] - q_CC[i][j][k-1][m])/(2.0*delZ) ); */   
---
>        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[m][i][j][k+1] - q_CC[m][i][j][k-1])/(2.0*delZ) ); */   
1469,1470c1469,1470
<         grad_q_X[i][j][k] =         ( -3.0 * q_CC[i][j][k][m]   + 4.0 * q_CC[i+1][j][k][m] - q_CC[i+2][j][k][m])/(delX);
<         grad_q_Y[i][j][k] =         ( -3.0 * q_CC[i][j][k][m]   + 4.0 * q_CC[i][j+1][k][m] - q_CC[i][j+2][k][m])/(delY);
---
>         grad_q_X[i][j][k] =         ( -3.0 * q_CC[m][i][j][k]   + 4.0 * q_CC[m][i+1][j][k] - q_CC[m][i+2][j][k])/(delX);
>         grad_q_Y[i][j][k] =         ( -3.0 * q_CC[m][i][j][k]   + 4.0 * q_CC[m][i][j+1][k] - q_CC[m][i][j+2][k])/(delY);
1472c1472
<        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[i][j][k+1][m] - q_CC[i][j][k-1][m])/(2.0*delZ) ); */   
---
>        /*  grad_q_Z[i][j][k] = IF_3D(  (q_CC[m][i][j][k+1] - q_CC[m][i][j][k-1])/(2.0*delZ) ); */   
1524c1524
<     grad[LEFT]  = (data[i][j][k][m] - data[i-1][j][k][m]) /(delX);
---
>     grad[LEFT]  = (data[m][i][j][k] - data[m][i-1][j][k]) /(delX);
1526c1526
<     grad[RIGHT] = (data[i+1][j][k][m] - data[i][j][k][m]) /(delX);    
---
>     grad[RIGHT] = (data[m][i+1][j][k] - data[m][i][j][k]) /(delX);    
1570c1570
<     grad[TOP]       = (data[i][j+1][k][m]   - data[i][j][k][m])   /delY;
---
>     grad[TOP]       = (data[m][i][j+1][k]   - data[m][i][j][k])   /delY;
1572c1572
<     grad[BOTTOM]    = (data[i][j][k][m]     - data[i][j-1][k][m]) /delY;    
---
>     grad[BOTTOM]    = (data[m][i][j][k]     - data[m][i][j-1][k]) /delY;    
1618c1618
<     grad[FRONT] = (data[i][j][k+1][m] - data[i][j][k][m]) /delZ;
---
>     grad[FRONT] = (data[m][i][j][k+1] - data[m][i][j][k]) /delZ;
1620c1620
<     grad[BACK]  = (data[i][j][k][m] - data[i][j][k-1][m]) /delZ;    
---
>     grad[BACK]  = (data[m][i][j][k] - data[m][i][j][k-1]) /delZ;    
1702,1704c1702,1704
<         results[f]=     (A[i][cell][k][m]      * B[i][cell][k][m]
<                     +    A[i][j][k][m]         * B[i][j][k][m])/
<                         (A[i][cell][k][m]      + A[i][j][k][m]);
---
>         results[f]=     (A[m][i][cell][k]      * B[m][i][cell][k]
>                     +    A[m][i][j][k]         * B[m][i][j][k])/
>                         (A[m][i][cell][k]      + A[m][i][j][k]);
1713,1715c1713,1715
<         results[f]=     (A[cell][j][k][m]      * B[cell][j][k][m]
<                     +    A[i][j][k][m]         * B[i][j][k][m])/
<                         (A[cell][j][k][m]      + A[i][j][k][m]);
---
>         results[f]=     (A[m][cell][j][k]      * B[m][cell][j][k]
>                     +    A[m][i][j][k]         * B[m][i][j][k])/
>                         (A[m][cell][j][k]      + A[m][i][j][k]);
1724,1726c1724,1726
<         results[f]=     (A[i][j][cell][m]      * B[i][j][cell][m]
<                     +    A[i][j][k][m]         * B[i][j][k][m])/
<                         (A[i][j][cell][m]      + A[i][j][k][m]);
---
>         results[f]=     (A[m][i][j][cell]      * B[m][i][j][cell]
>                     +    A[m][i][j][k]         * B[m][i][j][k])/
>                         (A[m][i][j][cell]      + A[m][i][j][k]);
2083c2083
<                       i,j,k,m, data_array[i][j][k][m]);
---
>                       i,j,k,m, data_array[m][i][j][k]);
2088c2088
<                       i,j,k,m, data_array[i][j][k][m]);
---
>                       i,j,k,m, data_array[m][i][j][k]);
2395c2395
<                     if ( fabs(data_array[i][j][k][m] - YES) <= DIFFERENCE  )
---
>                     if ( fabs(data_array[m][i][j][k] - YES) <= DIFFERENCE  )
diff -r ICE_SM/explicit_delPress.c ICE_SM_TEST//explicit_delPress.c
66c66
<                     coeff   = delt * rho_CC[i][j][k][m] * pow(speedSound[i][j][k][m],2) / vol;
---
>                     coeff   = delt * rho_CC[m][i][j][k] * pow(speedSound[m][i][j][k],2) / vol;
68c68
<                     delPress_CC[i][j][k][m] = -coeff * div_velFC_CC[i][j][k][m]; 
---
>                     delPress_CC[m][i][j][k] = -coeff * div_velFC_CC[m][i][j][k]; 
70c70
<                     press_CC[i][j][k][m]    = press_CC[i][j][k][m] + delPress_CC[i][j][k][m];
---
>                     press_CC[m][i][j][k]    = press_CC[m][i][j][k] + delPress_CC[m][i][j][k];
diff -r ICE_SM/flux_or_primitive.c ICE_SM_TEST//flux_or_primitive.c
85,90c85,90
<                         mass                = rho_CC[i][j][k][m] * Vol_CC[i][j][k];     
<                         xmom_CC[i][j][k][m] = mass * uvel_CC[i][j][k][m];
<                         ymom_CC[i][j][k][m] = mass * vvel_CC[i][j][k][m];
<                         zmom_CC[i][j][k][m] = mass * wvel_CC[i][j][k][m];
<                         int_eng_CC[i][j][k][m]
<                                             = mass * cv_CC[i][j][k][m] * Temp_CC[i][j][k][m];
---
>                         mass                = rho_CC[m][i][j][k] * Vol_CC[i][j][k];     
>                         xmom_CC[m][i][j][k] = mass * uvel_CC[m][i][j][k];
>                         ymom_CC[m][i][j][k] = mass * vvel_CC[m][i][j][k];
>                         zmom_CC[m][i][j][k] = mass * wvel_CC[m][i][j][k];
>                         int_eng_CC[m][i][j][k]
>                                             = mass * cv_CC[m][i][j][k] * Temp_CC[m][i][j][k];
111,115c111,115
<                         mass                = rho_CC[i][j][k][m] * Vol_CC[i][j][k];            
<                         uvel_CC[i][j][k][m] = xmom_CC[i][j][k][m]/mass;
<                         vvel_CC[i][j][k][m] = ymom_CC[i][j][k][m]/mass;
<                         wvel_CC[i][j][k][m] = zmom_CC[i][j][k][m]/mass;
<                         Temp_CC[i][j][k][m] = int_eng_CC[i][j][k][m]/(mass * cv_CC[i][j][k][m]);
---
>                         mass                = rho_CC[m][i][j][k] * Vol_CC[i][j][k];            
>                         uvel_CC[m][i][j][k] = xmom_CC[m][i][j][k]/mass;
>                         vvel_CC[m][i][j][k] = ymom_CC[m][i][j][k]/mass;
>                         wvel_CC[m][i][j][k] = zmom_CC[m][i][j][k]/mass;
>                         Temp_CC[m][i][j][k] = int_eng_CC[m][i][j][k]/(mass * cv_CC[m][i][j][k]);
diff -r ICE_SM/initialize_variables.c ICE_SM_TEST//initialize_variables.c
90c90
<                 data_array[i][j][k][m] = USR_FUNCTION(switch_funct,i,j,k,constant);
---
>                 data_array[m][i][j][k] = USR_FUNCTION(switch_funct,i,j,k,constant);
diff -r ICE_SM/input.c ICE_SM_TEST//input.c
160,162c160,162
<        uvel_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]      = readdouble(fp," U velocity",switchDebug_readInputFile);
<        vvel_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]      = readdouble(fp," V velocity",switchDebug_readInputFile);
<        wvel_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]      = readdouble(fp," W velocity",switchDebug_readInputFile);
---
>        uvel_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]      = readdouble(fp," U velocity",switchDebug_readInputFile);
>        vvel_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]      = readdouble(fp," V velocity",switchDebug_readInputFile);
>        wvel_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]      = readdouble(fp," W velocity",switchDebug_readInputFile);
164,166c164,166
<        rho_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]       = readdouble(fp," Density",switchDebug_readInputFile);               
<        Temp_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]      = readdouble(fp," Temperature",switchDebug_readInputFile);
<        Press_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]     = readdouble(fp," Pressure",switchDebug_readInputFile);
---
>        rho_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]       = readdouble(fp," Density",switchDebug_readInputFile);               
>        Temp_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]      = readdouble(fp," Temperature",switchDebug_readInputFile);
>        Press_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]     = readdouble(fp," Pressure",switchDebug_readInputFile);
168,170c168,170
<        scalar1_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]   = readdouble(fp," Scalar 1",switchDebug_readInputFile);
<        scalar2_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]   = readdouble(fp," Scalar 2",switchDebug_readInputFile);
<        scalar3_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]   = readdouble(fp," Scalar 3",switchDebug_readInputFile);
---
>        scalar1_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]   = readdouble(fp," Scalar 1",switchDebug_readInputFile);
>        scalar2_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]   = readdouble(fp," Scalar 2",switchDebug_readInputFile);
>        scalar3_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]   = readdouble(fp," Scalar 3",switchDebug_readInputFile);
175,178c175,178
<        viscosity_CC[*xLoLimit][*yLoLimit][*zLoLimit][m] = readdouble(fp," Viscosity",switchDebug_readInputFile);
<        thermalCond_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]= readdouble(fp," Thermal conductivity",switchDebug_readInputFile);
<        cv_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]        = readdouble(fp," Constant Specific heat",switchDebug_readInputFile);
<        speedSound[*xLoLimit][*yLoLimit][*zLoLimit][m]   = readdouble(fp," Speed of sound",switchDebug_readInputFile);
---
>        viscosity_CC[m][*xLoLimit][*yLoLimit][*zLoLimit] = readdouble(fp," Viscosity",switchDebug_readInputFile);
>        thermalCond_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]= readdouble(fp," Thermal conductivity",switchDebug_readInputFile);
>        cv_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]        = readdouble(fp," Constant Specific heat",switchDebug_readInputFile);
>        speedSound[m][*xLoLimit][*yLoLimit][*zLoLimit]   = readdouble(fp," Speed of sound",switchDebug_readInputFile);
260,272c260,272
<                      uvel_CC[i][j][k][m]        = uvel_CC[*xLoLimit][*yLoLimit][*zLoLimit][m];
<                      vvel_CC[i][j][k][m]        = vvel_CC[*xLoLimit][*yLoLimit][*zLoLimit][m];
<                      wvel_CC[i][j][k][m]        = wvel_CC[*xLoLimit][*yLoLimit][*zLoLimit][m];
<                      rho_CC[i][j][k][m]         = rho_CC[*xLoLimit][*yLoLimit][*zLoLimit][m];
<                      Temp_CC[i][j][k][m]        = Temp_CC[*xLoLimit][*yLoLimit][*zLoLimit][m];                
<                      Press_CC[i][j][k][m]       = Press_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      scalar1_CC[i][j][k][m]     = scalar1_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      scalar2_CC[i][j][k][m]     = scalar2_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      scalar3_CC[i][j][k][m]     = scalar3_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      viscosity_CC[i][j][k][m]   = viscosity_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      thermalCond_CC[i][j][k][m] = thermalCond_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      cv_CC[i][j][k][m]          = cv_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      speedSound[i][j][k][m]     = speedSound[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
---
>                      uvel_CC[m][i][j][k]        = uvel_CC[m][*xLoLimit][*yLoLimit][*zLoLimit];
>                      vvel_CC[m][i][j][k]        = vvel_CC[m][*xLoLimit][*yLoLimit][*zLoLimit];
>                      wvel_CC[m][i][j][k]        = wvel_CC[m][*xLoLimit][*yLoLimit][*zLoLimit];
>                      rho_CC[m][i][j][k]         = rho_CC[m][*xLoLimit][*yLoLimit][*zLoLimit];
>                      Temp_CC[m][i][j][k]        = Temp_CC[m][*xLoLimit][*yLoLimit][*zLoLimit];                
>                      Press_CC[m][i][j][k]       = Press_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      scalar1_CC[m][i][j][k]     = scalar1_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      scalar2_CC[m][i][j][k]     = scalar2_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      scalar3_CC[m][i][j][k]     = scalar3_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      viscosity_CC[m][i][j][k]   = viscosity_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      thermalCond_CC[m][i][j][k] = thermalCond_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      cv_CC[m][i][j][k]          = cv_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      speedSound[m][i][j][k]     = speedSound[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
423c423
<         if( rho_CC[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || rho_CC[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( rho_CC[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || rho_CC[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
426c426
<         if( Temp_CC[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || Temp_CC[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( Temp_CC[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || Temp_CC[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
429c429
<         if( Press_CC[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || Press_CC[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( Press_CC[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || Press_CC[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
432c432
<         if( speedSound[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || speedSound[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( speedSound[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || speedSound[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
435c435
<         if( cv_CC[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || cv_CC[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( cv_CC[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || cv_CC[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
438c438
<         if( thermalCond_CC[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || thermalCond_CC[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( thermalCond_CC[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || thermalCond_CC[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
442c442
<         if( viscosity_CC[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || viscosity_CC[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( viscosity_CC[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || viscosity_CC[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
diff -r ICE_SM/interpolate_vel_CC_to_FC.c ICE_SM_TEST//interpolate_vel_CC_to_FC.c
88c88
<     grad_P = dvector(1,N_CELL_FACES);
---
>     grad_P = dvector_nr(1,N_CELL_FACES);
149c149
<                         rho_FC = (rho_CC[i][cell][k][m]    + rho_CC[i][j][k][m])/2.0;
---
>                         rho_FC = (rho_CC[m][i][cell][k]    + rho_CC[m][i][j][k])/2.0;
155,156c155,156
<                          term1  = (rho_CC[i][cell][k][m]    * vvel_CC[i][cell][k][m] 
<                                 +   rho_CC[i][j][k][m]      * vvel_CC[i][j][k][m])/ (2.0 * rho_FC);
---
>                          term1  = (rho_CC[m][i][cell][k]    * vvel_CC[m][i][cell][k] 
>                                 +   rho_CC[m][i][j][k]      * vvel_CC[m][i][j][k])/ (2.0 * rho_FC);
213c213
<                         rho_FC = (rho_CC[cell][j][k][m]    + rho_CC[i][j][k][m])/2.0;
---
>                         rho_FC = (rho_CC[m][cell][j][k]    + rho_CC[m][i][j][k])/2.0;
219,220c219,220
<                         term1   = (rho_CC[cell][j][k][m]    * uvel_CC[cell][j][k][m] 
<                                 +   rho_CC[i][j][k][m]      * uvel_CC[i][j][k][m])/ (2.0*rho_FC);
---
>                         term1   = (rho_CC[m][cell][j][k]    * uvel_CC[m][cell][j][k] 
>                                 +   rho_CC[m][i][j][k]      * uvel_CC[m][i][j][k])/ (2.0*rho_FC);
275c275
<                         rho_FC = (rho_CC[i][j][cell][m]    + rho_CC[i][j][k][m])/2.0;
---
>                         rho_FC = (rho_CC[m][i][j][cell]    + rho_CC[m][i][j][k])/2.0;
281,282c281,282
<                         term1 = (rho_CC[i][j][cell][m]    * wvel_CC[i][j][cell][m] 
<                              +   rho_CC[i][j][k][m]       * wvel_CC[i][j][k][m])/ (2.0 * rho_FC);
---
>                         term1 = (rho_CC[m][i][j][cell]    * wvel_CC[m][i][j][cell] 
>                              +   rho_CC[m][i][j][k]       * wvel_CC[m][i][j][k])/ (2.0 * rho_FC);
358c358
<     free_dvector(grad_P, 1, N_CELL_FACES);
---
>     free_dvector_nr(grad_P, 1, N_CELL_FACES);
diff -r ICE_SM/lagrangian.c ICE_SM_TEST//lagrangian.c
83c83
<     div_vel_FC= darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);    
---
>     div_vel_FC= darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);    
110c110
<                     Vol_L_CC[i][j][k][m] = Vol_CC[i][j][k] + delt* div_vel_FC[i][j][k][m];
---
>                     Vol_L_CC[m][i][j][k] = Vol_CC[i][j][k] + delt* div_vel_FC[m][i][j][k];
113c113
<                         plot_1[i][j][k][m] = delt * div_vel_FC[i][j][k][m];
---
>                         plot_1[m][i][j][k] = delt * div_vel_FC[m][i][j][k];
130c130
<         free_darray_4d( plot_1,0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>         free_darray_4d( plot_1,1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
136c136
<    free_darray_4d(div_vel_FC, 0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d(div_vel_FC, 1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
243,244c243,244
<                     mass_L_CC[i][j][k][m] = ( rho_CC[i][j][k][m] * Vol_CC[i][j][k] 
<                                            +  mass_source[i][j][k][m]);
---
>                     mass_L_CC[m][i][j][k] = ( rho_CC[m][i][j][k] * Vol_CC[i][j][k] 
>                                            +  mass_source[m][i][j][k]);
246c246
<                     rho_L_CC[i][j][k][m] = mass_L_CC[i][j][k][m]/Vol_CC[i][j][k];
---
>                     rho_L_CC[m][i][j][k] = mass_L_CC[m][i][j][k]/Vol_CC[i][j][k];
250,252c250,252
<                     xmom_L_CC[i][j][k][m] = xmom_CC[i][j][k][m]
<                     - uvel_CC[i][j][k][m] * mass_source[i][j][k][m]
<                     + xmom_source[i][j][k][m];
---
>                     xmom_L_CC[m][i][j][k] = xmom_CC[m][i][j][k]
>                     - uvel_CC[m][i][j][k] * mass_source[m][i][j][k]
>                     + xmom_source[m][i][j][k];
254,256c254,256
<                     ymom_L_CC[i][j][k][m] = ymom_CC[i][j][k][m]
<                     - vvel_CC[i][j][k][m] * mass_source[i][j][k][m]
<                     + ymom_source[i][j][k][m];
---
>                     ymom_L_CC[m][i][j][k] = ymom_CC[m][i][j][k]
>                     - vvel_CC[m][i][j][k] * mass_source[m][i][j][k]
>                     + ymom_source[m][i][j][k];
258,260c258,260
<                     zmom_L_CC[i][j][k][m] = zmom_CC[i][j][k][m]
<                     - wvel_CC[i][j][k][m] * mass_source[i][j][k][m]
<                     + zmom_source[i][j][k][m];
---
>                     zmom_L_CC[m][i][j][k] = zmom_CC[m][i][j][k]
>                     - wvel_CC[m][i][j][k] * mass_source[m][i][j][k]
>                     + zmom_source[m][i][j][k];
264,266c264,266
<                     int_eng_L_CC[i][j][k][m] = int_eng_CC[i][j][k][m] 
<                     - int_eng_CC[i][j][k][m] * mass_source[i][j][k][m]
<                     + int_eng_source[i][j][k][m];
---
>                     int_eng_L_CC[m][i][j][k] = int_eng_CC[m][i][j][k] 
>                     - int_eng_CC[m][i][j][k] * mass_source[m][i][j][k]
>                     + int_eng_source[m][i][j][k];
313,314c313,314
<     QUITE_FULLWARN(wvel_CC[0][0][0][1]);
<     QUITE_FULLWARN(Vol_L_CC[0][0][0][1]); 
---
>     QUITE_FULLWARN(wvel_CC[1][0][0][0]);
>     QUITE_FULLWARN(Vol_L_CC[1][0][0][0]); 
Common subdirectories: ICE_SM/multifile_edit_orgs and ICE_SM_TEST//multifile_edit_orgs
diff -r ICE_SM/nrutil+.c ICE_SM_TEST//nrutil+.c
28,29c28,29
< float *vector(long nl, long nh)
< /* allocate a float vector with subscript range v[nl..nh] */
---
> float *vector_nr(long nl, long nh)
> /* allocate a float vector_nr with subscript range v[nl..nh] */
34c34
< 	if (!v) nrerror("allocation failure in vector()");
---
> 	if (!v) nrerror("allocation failure in vector_nr()");
38c38
< int *ivector(long nl, long nh)
---
> int *ivector_nr(long nl, long nh)
44c44
< 	if (!v) nrerror("allocation failure in ivector()");
---
> 	if (!v) nrerror("allocation failure in ivector_nr()");
48c48
< unsigned char *cvector(long nl, long nh)
---
> unsigned char *cvector_nr(long nl, long nh)
54c54
< 	if (!v) nrerror("allocation failure in cvector()");
---
> 	if (!v) nrerror("allocation failure in cvector_nr()");
58c58
< unsigned long *lvector(long nl, long nh)
---
> unsigned long *lvector_nr(long nl, long nh)
64c64
< 	if (!v) nrerror("allocation failure in lvector()");
---
> 	if (!v) nrerror("allocation failure in lvector_nr()");
68c68
< double *dvector(long nl, long nh)
---
> double *dvector_nr(long nl, long nh)
74c74
< 	if (!v) nrerror("allocation failure in dvector()");
---
> 	if (!v) nrerror("allocation failure in dvector_nr()");
549c549
< * Converts 2D double array into a vector
---
> * Converts 2D double array into a vector_nr
559c559
<     vect        = vector(1,*max_len);
---
>     vect        = vector_nr(1,*max_len);
576c576
< * Converts 3D double array into a vector
---
> * Converts 3D double array into a vector_nr
588c588
<    vect         = vector(1,*max_len);
---
>    vect         = vector_nr(1,*max_len);
609c609
< * Converts 3D int array into a vector
---
> * Converts 3D int array into a vector_nr
620c620
<     vect = vector(1,*max_len);
---
>     vect = vector_nr(1,*max_len);
641c641
< * Converts 4D double array into a vector
---
> * Converts 4D double array into a vector_nr
655c655
<    vect = vector(1,*max_len);
---
>    vect = vector_nr(1,*max_len);
669c669
<                     vect[counter] = (float)t[i][j][k][m];
---
>                     vect[counter] = (float)t[m][i][j][k];
678c678
< * Converts 5D array into a vector
---
> * Converts 5D array into a vector_nr
697c697
<    vect = vector(1,*max_len);
---
>    vect = vector_nr(1,*max_len);
717c717
<                         vect[counter] = (float)*t[i][j][k][m];                            
---
>                         vect[counter] = (float)*t[m][i][j][k];                            
728c728
< * Converts 6D array into a vector
---
> * Converts 6D array into a vector_nr
771c771
<    vect = vector(1,*max_len);
---
>    vect = vector_nr(1,*max_len);
803,804c803,804
< void free_vector(float *v, long nl, long nh)
< /* free a float vector allocated with vector() */
---
> void free_vector_nr(float *v, long nl, long nh)
> /* free a float vector allocated with vector_nr() */
809,810c809,810
< void free_ivector(int *v, long nl, long nh)
< /* free an int vector allocated with ivector() */
---
> void free_ivector_nr(int *v, long nl, long nh)
> /* free an int vector allocated with ivector_nr() */
815,816c815,816
< void free_cvector(unsigned char *v, long nl, long nh)
< /* free an unsigned char vector allocated with cvector() */
---
> void free_cvector_nr(unsigned char *v, long nl, long nh)
> /* free an unsigned char vector allocated with cvector_nr() */
821,822c821,822
< void free_lvector(unsigned long *v, long nl, long nh)
< /* free an unsigned long vector allocated with lvector() */
---
> void free_lvector_nr(unsigned long *v, long nl, long nh)
> /* free an unsigned long vector allocated with lvector_nr() */
827,828c827,828
< void free_dvector(double *v, long nl, long nh)
< /* free a double vector allocated with dvector() */
---
> void free_dvector_nr(double *v, long nl, long nh)
> /* free a double vector allocated with dvector_nr() */
Only in ICE_SM_TEST/: nrutil+.c_org
Only in ICE_SM_TEST/: nrutil+.c_tmp
diff -r ICE_SM/p_face.c ICE_SM_TEST//p_face.c
102c102
<                     sp_vol      = 1.0/rho_CC[i][j][k][m];
---
>                     sp_vol      = 1.0/rho_CC[m][i][j][k];
107c107
<                     sp_vol_adj  = 1.0/rho_CC[i][cell][k][m];
---
>                     sp_vol_adj  = 1.0/rho_CC[m][i][cell][k];
112c112
<                     (press_CC[i][cell][k][m] * sp_vol_adj + press_CC[i][j][k][m] * sp_vol)/
---
>                     (press_CC[m][i][cell][k] * sp_vol_adj + press_CC[m][i][j][k] * sp_vol)/
128c128
<                     sp_vol      = 1.0/rho_CC[i][j][k][m];
---
>                     sp_vol      = 1.0/rho_CC[m][i][j][k];
133c133
<                     sp_vol_adj  = 1.0/rho_CC[cell][j][k][m];
---
>                     sp_vol_adj  = 1.0/rho_CC[m][cell][j][k];
137c137
<                     (press_CC[cell][j][k][m] * sp_vol_adj + press_CC[i][j][k][m] * sp_vol)/
---
>                     (press_CC[m][cell][j][k] * sp_vol_adj + press_CC[m][i][j][k] * sp_vol)/
diff -r ICE_SM/timeadvanced.c ICE_SM_TEST//timeadvanced.c
167,171c167,171
<                     mass_L_TEMP[i][j][k][m]       = mass_L_CC[i][j][k][m]/vol;
<                     xmom_L_TEMP[i][j][k][m]       = xmom_L_CC[i][j][k][m]/vol;
<                     ymom_L_TEMP[i][j][k][m]       = ymom_L_CC[i][j][k][m]/vol;
<                     zmom_L_TEMP[i][j][k][m]       = zmom_L_CC[i][j][k][m]/vol;
<                     int_eng_L_TEMP[i][j][k][m]    = int_eng_L_CC[i][j][k][m]/vol;
---
>                     mass_L_TEMP[m][i][j][k]       = mass_L_CC[m][i][j][k]/vol;
>                     xmom_L_TEMP[m][i][j][k]       = xmom_L_CC[m][i][j][k]/vol;
>                     ymom_L_TEMP[m][i][j][k]       = ymom_L_CC[m][i][j][k]/vol;
>                     zmom_L_TEMP[m][i][j][k]       = zmom_L_CC[m][i][j][k]/vol;
>                     int_eng_L_TEMP[m][i][j][k]    = int_eng_L_CC[m][i][j][k]/vol;
287,289c287,289
<                     xmom_CC[i][j][k][m] = ( xmom_L_CC[i][j][k][m] + advct_xmom_CC[i][j][k][m] );
<                     ymom_CC[i][j][k][m] = ( ymom_L_CC[i][j][k][m] + advct_ymom_CC[i][j][k][m] );
<                     zmom_CC[i][j][k][m] = ( zmom_L_CC[i][j][k][m] + advct_zmom_CC[i][j][k][m] );  
---
>                     xmom_CC[m][i][j][k] = ( xmom_L_CC[m][i][j][k] + advct_xmom_CC[m][i][j][k] );
>                     ymom_CC[m][i][j][k] = ( ymom_L_CC[m][i][j][k] + advct_ymom_CC[m][i][j][k] );
>                     zmom_CC[m][i][j][k] = ( zmom_L_CC[m][i][j][k] + advct_zmom_CC[m][i][j][k] );  
294c294
<                     int_eng_CC[i][j][k][m] = ( int_eng_L_CC[i][j][k][m] + advct_int_eng_CC[i][j][k][m] );
---
>                     int_eng_CC[m][i][j][k] = ( int_eng_L_CC[m][i][j][k] + advct_int_eng_CC[m][i][j][k] );
301,302c301,302
<                    rho_CC[i][j][k][m] = (mass_L_CC[i][j][k][m] + 
<                                          advct_rho_CC[i][j][k][m] )/ Vol_CC[i][j][k];                             
---
>                    rho_CC[m][i][j][k] = (mass_L_CC[m][i][j][k] + 
>                                          advct_rho_CC[m][i][j][k] )/ Vol_CC[i][j][k];                             
358,359c358,359
<     QUITE_FULLWARN(Vol_L_CC[0][0][0][1]); 
<     QUITE_FULLWARN(rho_L_CC[0][0][0][1]);
---
>     QUITE_FULLWARN(Vol_L_CC[1][0][0][0]); 
>     QUITE_FULLWARN(rho_L_CC[1][0][0][0]);
533,537c533,537
<     sum_xmom_CC     = dvector(1, N_MATERIAL);
<     sum_ymom_CC     = dvector(1, N_MATERIAL);
<     sum_zmom_CC     = dvector(1, N_MATERIAL);
<     sum_int_eng_CC  = dvector(1, N_MATERIAL);
<     sum_mass_CC     = dvector(1, N_MATERIAL);
---
>     sum_xmom_CC     = dvector_nr(1, N_MATERIAL);
>     sum_ymom_CC     = dvector_nr(1, N_MATERIAL);
>     sum_zmom_CC     = dvector_nr(1, N_MATERIAL);
>     sum_int_eng_CC  = dvector_nr(1, N_MATERIAL);
>     sum_mass_CC     = dvector_nr(1, N_MATERIAL);
539,543c539,543
<     advct_xmom_CC   = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     advct_ymom_CC   = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     advct_zmom_CC   = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     advct_rho_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     advct_int_eng_CC= darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     advct_xmom_CC   = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     advct_ymom_CC   = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     advct_zmom_CC   = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     advct_rho_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     advct_int_eng_CC= darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
545,549c545,549
<     mass_L_TEMP     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     xmom_L_TEMP     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     ymom_L_TEMP     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     zmom_L_TEMP     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     int_eng_L_TEMP  = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     mass_L_TEMP     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     xmom_L_TEMP     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     ymom_L_TEMP     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     zmom_L_TEMP     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     int_eng_L_TEMP  = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
613,617c613,617
<                     mass_L_TEMP[i][j][k][m]       = mass_L_CC[i][j][k][m]/vol;
<                     xmom_L_TEMP[i][j][k][m]       = xmom_L_CC[i][j][k][m]/vol;
<                     ymom_L_TEMP[i][j][k][m]       = ymom_L_CC[i][j][k][m]/vol;
<                     zmom_L_TEMP[i][j][k][m]       = zmom_L_CC[i][j][k][m]/vol;
<                     int_eng_L_TEMP[i][j][k][m]    = int_eng_L_CC[i][j][k][m]/vol;
---
>                     mass_L_TEMP[m][i][j][k]       = mass_L_CC[m][i][j][k]/vol;
>                     xmom_L_TEMP[m][i][j][k]       = xmom_L_CC[m][i][j][k]/vol;
>                     ymom_L_TEMP[m][i][j][k]       = ymom_L_CC[m][i][j][k]/vol;
>                     zmom_L_TEMP[m][i][j][k]       = zmom_L_CC[m][i][j][k]/vol;
>                     int_eng_L_TEMP[m][i][j][k]    = int_eng_L_CC[m][i][j][k]/vol;
779,781c779,781
<                         sum_advct_xmom      = sum_advct_xmom    + advct_xmom_CC[i][j][k][m];
<                         sum_advct_ymom      = sum_advct_ymom    + advct_ymom_CC[i][j][k][m];
<                         sum_advct_xmom      = sum_advct_zmom    + advct_zmom_CC[i][j][k][m];
---
>                         sum_advct_xmom      = sum_advct_xmom    + advct_xmom_CC[m][i][j][k];
>                         sum_advct_ymom      = sum_advct_ymom    + advct_ymom_CC[m][i][j][k];
>                         sum_advct_xmom      = sum_advct_zmom    + advct_zmom_CC[m][i][j][k];
785c785
<                         sum_advct_int_eng   = sum_advct_int_eng + advct_int_eng_CC[i][j][k][m];
---
>                         sum_advct_int_eng   = sum_advct_int_eng + advct_int_eng_CC[m][i][j][k];
789c789
<                         sum_advct_rho       = sum_advct_rho     + advct_rho_CC[i][j][k][m];
---
>                         sum_advct_rho       = sum_advct_rho     + advct_rho_CC[m][i][j][k];
804,806c804,806
<                     sum_xmom_L_CC[m] = sum_xmom_L_CC[m] + xmom_L_CC[i][j][k][m];
<                     sum_ymom_L_CC[m] = sum_ymom_L_CC[m] + ymom_L_CC[i][j][k][m];
<                     sum_zmom_L_CC[m] = sum_zmom_L_CC[m] + zmom_L_CC[i][j][k][m];  
---
>                     sum_xmom_L_CC[m] = sum_xmom_L_CC[m] + xmom_L_CC[m][i][j][k];
>                     sum_ymom_L_CC[m] = sum_ymom_L_CC[m] + ymom_L_CC[m][i][j][k];
>                     sum_zmom_L_CC[m] = sum_zmom_L_CC[m] + zmom_L_CC[m][i][j][k];  
825,829c825,829
<    free_dvector( sum_xmom_CC,       1, N_MATERIAL);
<    free_dvector( sum_ymom_CC,       1, N_MATERIAL);
<    free_dvector( sum_zmom_CC,       1, N_MATERIAL);
<    free_dvector( sum_int_eng_CC,    1, N_MATERIAL);
<    free_dvector( sum_mass_CC,       1, N_MATERIAL);
---
>    free_dvector_nr( sum_xmom_CC,       1, N_MATERIAL);
>    free_dvector_nr( sum_ymom_CC,       1, N_MATERIAL);
>    free_dvector_nr( sum_zmom_CC,       1, N_MATERIAL);
>    free_dvector_nr( sum_int_eng_CC,    1, N_MATERIAL);
>    free_dvector_nr( sum_mass_CC,       1, N_MATERIAL);
831,838c831,838
<    free_darray_4d( advct_xmom_CC,   0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( advct_ymom_CC,   0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( advct_zmom_CC,   0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( mass_L_TEMP,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( xmom_L_TEMP,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( ymom_L_TEMP,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( zmom_L_TEMP,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( int_eng_L_TEMP,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( advct_xmom_CC,   1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( advct_ymom_CC,   1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( advct_zmom_CC,   1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( mass_L_TEMP,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( xmom_L_TEMP,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( ymom_L_TEMP,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( zmom_L_TEMP,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( int_eng_L_TEMP,  1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
840,841c840,841
<    free_darray_4d( advct_rho_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( advct_int_eng_CC,0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( advct_rho_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( advct_int_eng_CC,1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
853c853
<     QUITE_FULLWARN(Vol_L_CC[0][0][0][1]); 
---
>     QUITE_FULLWARN(Vol_L_CC[1][0][0][0]); 
855,859c855,859
<     QUITE_FULLWARN(xmom_CC[0][0][0][1]);
<     QUITE_FULLWARN(ymom_CC[0][0][0][1]);
<     QUITE_FULLWARN(zmom_CC[0][0][0][1]);    
<     QUITE_FULLWARN(rho_CC[0][0][0][1]);
<     QUITE_FULLWARN(int_eng_CC[0][0][0][1]);
---
>     QUITE_FULLWARN(xmom_CC[1][0][0][0]);
>     QUITE_FULLWARN(ymom_CC[1][0][0][0]);
>     QUITE_FULLWARN(zmom_CC[1][0][0][0]);    
>     QUITE_FULLWARN(rho_CC[1][0][0][0]);
>     QUITE_FULLWARN(int_eng_CC[1][0][0][0]);
Common subdirectories: ICE_SM/Advection_2D/CVS and ICE_SM_TEST//Advection_2D/CVS
diff -r ICE_SM/Advection_2D/advect_grad_limiter.c ICE_SM_TEST//Advection_2D/advect_grad_limiter.c
96c96
<                 q_CC_ijk,               /* abrevation for q_CC[i][j][k][m]  */
---
>                 q_CC_ijk,               /* abrevation for q_CC[m][i][j][k]  */
191c191
<                 q_CC_ijk =  q_CC[i][j][k][m];
---
>                 q_CC_ijk =  q_CC[m][i][j][k];
214c214
<                 q_CC_ijk=  q_CC[i][j][k][m];
---
>                 q_CC_ijk=  q_CC[m][i][j][k];
394,398c394,398
<                 q_CC_max_temp       =  DMAX(q_CC[i+1][j][k][m], q_CC[i-1][j][k][m]);
<                 q_CC_max_temp       =  DMAX(q_CC[i][j+1][k][m], q_CC_max_temp);         /* top  */
<                 q_CC_max_temp       =  DMAX(q_CC[i][j-1][k][m], q_CC_max_temp);         /*bottom*/
<                 /* q_CC_max_temp    =  DMAX(q_CC[i][j][k+1][m], q_CC_max_temp); */      /*front */
<                 /* q_CC_max_temp    =  DMAX(q_CC[i][j][k-1][m], q_CC_max_temp); */      /* back */
---
>                 q_CC_max_temp       =  DMAX(q_CC[m][i+1][j][k], q_CC[m][i-1][j][k]);
>                 q_CC_max_temp       =  DMAX(q_CC[m][i][j+1][k], q_CC_max_temp);         /* top  */
>                 q_CC_max_temp       =  DMAX(q_CC[m][i][j-1][k], q_CC_max_temp);         /*bottom*/
>                 /* q_CC_max_temp    =  DMAX(q_CC[m][i][j][k+1], q_CC_max_temp); */      /*front */
>                 /* q_CC_max_temp    =  DMAX(q_CC[m][i][j][k-1], q_CC_max_temp); */      /* back */
401,405c401,405
<                 q_CC_min_temp       =  DMIN(q_CC[i+1][j][k][m], q_CC[i-1][j][k][m]);
<                 q_CC_min_temp       =  DMIN(q_CC[i][j+1][k][m], q_CC_min_temp);         /* top  */
<                 q_CC_min_temp       =  DMIN(q_CC[i][j-1][k][m], q_CC_min_temp);          /*bottom*/
<                 /* q_CC_min_temp    =  DMIN(q_CC[i][j][k+1][m], q_CC_min_temp); */      /*front */
<                 /* q_CC_min_temp    =  DMIN(q_CC[i][j][k-1][m], q_CC_min_temp); */      /* back */
---
>                 q_CC_min_temp       =  DMIN(q_CC[m][i+1][j][k], q_CC[m][i-1][j][k]);
>                 q_CC_min_temp       =  DMIN(q_CC[m][i][j+1][k], q_CC_min_temp);         /* top  */
>                 q_CC_min_temp       =  DMIN(q_CC[m][i][j-1][k], q_CC_min_temp);          /*bottom*/
>                 /* q_CC_min_temp    =  DMIN(q_CC[m][i][j][k+1], q_CC_min_temp); */      /*front */
>                 /* q_CC_min_temp    =  DMIN(q_CC[m][i][j][k-1], q_CC_min_temp); */      /* back */
458,459c458,459
<                        q_CC_max_temp        =  DMAX(q_CC[i][j+1][k][m], q_CC[i][j-1][k][m]);      
<                        q_CC_max_temp        =  DMAX(q_CC[i+1][j][k][m], q_CC_max_temp);           
---
>                        q_CC_max_temp        =  DMAX(q_CC[m][i][j+1][k], q_CC[m][i][j-1][k]);      
>                        q_CC_max_temp        =  DMAX(q_CC[m][i+1][j][k], q_CC_max_temp);           
462,463c462,463
<                        q_CC_min_temp        =  DMIN(q_CC[i][j+1][k][m], q_CC[i][j-1][k][m]);
<                        q_CC_min_temp        =  DMIN(q_CC[i][i+1][k][m], q_CC_min_temp);
---
>                        q_CC_min_temp        =  DMIN(q_CC[m][i][j+1][k], q_CC[m][i][j-1][k]);
>                        q_CC_min_temp        =  DMIN(q_CC[m][i+1][j][k], q_CC_min_temp);
469,470c469,470
<                        q_CC_max_temp        =  DMAX(q_CC[i][j+1][k][m], q_CC[i][j-1][k][m]);      
<                        q_CC_max_temp        =  DMAX(q_CC[i-1][j][k][m], q_CC_max_temp);           
---
>                        q_CC_max_temp        =  DMAX(q_CC[m][i][j+1][k], q_CC[m][i][j-1][k]);      
>                        q_CC_max_temp        =  DMAX(q_CC[m][i-1][j][k], q_CC_max_temp);           
473,474c473,474
<                        q_CC_min_temp        =  DMIN(q_CC[i][j+1][k][m], q_CC[i][j-1][k][m]);
<                        q_CC_min_temp        =  DMIN(q_CC[i-1][j][k][m], q_CC_min_temp);
---
>                        q_CC_min_temp        =  DMIN(q_CC[m][i][j+1][k], q_CC[m][i][j-1][k]);
>                        q_CC_min_temp        =  DMIN(q_CC[m][i-1][j][k], q_CC_min_temp);
480,481c480,481
<                        q_CC_max_temp        =  DMAX(q_CC[i+1][j][k][m], q_CC[i-1][j][k][m]);      
<                        q_CC_max_temp        =  DMAX(q_CC[i][j-1][k][m], q_CC_max_temp);           
---
>                        q_CC_max_temp        =  DMAX(q_CC[m][i+1][j][k], q_CC[m][i-1][j][k]);      
>                        q_CC_max_temp        =  DMAX(q_CC[m][i][j-1][k], q_CC_max_temp);           
484,485c484,485
<                        q_CC_min_temp        =  DMIN(q_CC[i+1][j][k][m], q_CC[i-1][j][k][m]);
<                        q_CC_min_temp        =  DMIN(q_CC[i][j-1][k][m], q_CC_min_temp);
---
>                        q_CC_min_temp        =  DMIN(q_CC[m][i+1][j][k], q_CC[m][i-1][j][k]);
>                        q_CC_min_temp        =  DMIN(q_CC[m][i][j-1][k], q_CC_min_temp);
491,492c491,492
<                        q_CC_max_temp        =  DMAX(q_CC[i+1][j][k][m], q_CC[i-1][j][k][m]);      
<                        q_CC_max_temp        =  DMAX(q_CC[i][j+1][k][m], q_CC_max_temp);           
---
>                        q_CC_max_temp        =  DMAX(q_CC[m][i+1][j][k], q_CC[m][i-1][j][k]);      
>                        q_CC_max_temp        =  DMAX(q_CC[m][i][j+1][k], q_CC_max_temp);           
495,496c495,496
<                        q_CC_min_temp        =  DMIN(q_CC[i+1][j][k][m], q_CC[i-1][j][k][m]);
<                        q_CC_min_temp        =  DMIN(q_CC[i][j+1][k][m], q_CC_min_temp);
---
>                        q_CC_min_temp        =  DMIN(q_CC[m][i+1][j][k], q_CC[m][i-1][j][k]);
>                        q_CC_min_temp        =  DMIN(q_CC[m][i][j+1][k], q_CC_min_temp);
534,535c534,535
<     q_CC_max_temp       =  DMAX(q_CC[i][j-1][k][m], q_CC[i+1][j-1][k][m]);      
<     q_CC_max_temp       =  DMAX(q_CC[i+1][j][k][m], q_CC_max_temp);           
---
>     q_CC_max_temp       =  DMAX(q_CC[m][i][j-1][k], q_CC[m][i+1][j-1][k]);      
>     q_CC_max_temp       =  DMAX(q_CC[m][i+1][j][k], q_CC_max_temp);           
538,539c538,539
<     q_CC_min_temp       =  DMIN(q_CC[i][j-1][k][m], q_CC[i+1][j-1][k][m]);
<     q_CC_min_temp       =  DMIN(q_CC[i+1][j][k][m], q_CC_min_temp);
---
>     q_CC_min_temp       =  DMIN(q_CC[m][i][j-1][k], q_CC[m][i+1][j-1][k]);
>     q_CC_min_temp       =  DMIN(q_CC[m][i+1][j][k], q_CC_min_temp);
548,549c548,549
<     q_CC_max_temp       =  DMAX(q_CC[i][j-1][k][m], q_CC[i-1][j-1][k][m]);      
<     q_CC_max_temp       =  DMAX(q_CC[i-1][j][k][m], q_CC_max_temp);           
---
>     q_CC_max_temp       =  DMAX(q_CC[m][i][j-1][k], q_CC[m][i-1][j-1][k]);      
>     q_CC_max_temp       =  DMAX(q_CC[m][i-1][j][k], q_CC_max_temp);           
552,553c552,553
<     q_CC_min_temp       =  DMIN(q_CC[i][j-1][k][m], q_CC[i-1][j-1][k][m]);
<     q_CC_min_temp       =  DMIN(q_CC[i-1][j][k][m], q_CC_min_temp);
---
>     q_CC_min_temp       =  DMIN(q_CC[m][i][j-1][k], q_CC[m][i-1][j-1][k]);
>     q_CC_min_temp       =  DMIN(q_CC[m][i-1][j][k], q_CC_min_temp);
562,563c562,563
<     q_CC_max_temp       =  DMAX(q_CC[i][j+1][k][m], q_CC[i-1][j+1][k][m]);      
<     q_CC_max_temp       =  DMAX(q_CC[i-1][j][k][m], q_CC_max_temp);           
---
>     q_CC_max_temp       =  DMAX(q_CC[m][i][j+1][k], q_CC[m][i-1][j+1][k]);      
>     q_CC_max_temp       =  DMAX(q_CC[m][i-1][j][k], q_CC_max_temp);           
566,567c566,567
<     q_CC_min_temp       =  DMIN(q_CC[i][j+1][k][m], q_CC[i-1][j+1][k][m]);
<     q_CC_min_temp       =  DMIN(q_CC[i-1][j][k][m], q_CC_min_temp);
---
>     q_CC_min_temp       =  DMIN(q_CC[m][i][j+1][k], q_CC[m][i-1][j+1][k]);
>     q_CC_min_temp       =  DMIN(q_CC[m][i-1][j][k], q_CC_min_temp);
576,577c576,577
<     q_CC_max_temp       =  DMAX(q_CC[i][j+1][k][m], q_CC[i+1][j+1][k][m]);      
<     q_CC_max_temp       =  DMAX(q_CC[i+1][j][k][m], q_CC_max_temp);           
---
>     q_CC_max_temp       =  DMAX(q_CC[m][i][j+1][k], q_CC[m][i+1][j+1][k]);      
>     q_CC_max_temp       =  DMAX(q_CC[m][i+1][j][k], q_CC_max_temp);           
580,581c580,581
<     q_CC_min_temp       =  DMIN(q_CC[i][j+1][k][m], q_CC[i+1][j+1][k][m]);
<     q_CC_min_temp       =  DMIN(q_CC[i+1][j][k][m], q_CC_min_temp);
---
>     q_CC_min_temp       =  DMIN(q_CC[m][i][j+1][k], q_CC[m][i+1][j+1][k]);
>     q_CC_min_temp       =  DMIN(q_CC[m][i+1][j][k], q_CC_min_temp);
diff -r ICE_SM/Advection_2D/advect_q.c ICE_SM_TEST//Advection_2D/advect_q.c
203c203
<                 advect_q_CC[i][j][k][m] = - sum_q_outflux - sum_q_outflux_CF 
---
>                 advect_q_CC[m][i][j][k] = - sum_q_outflux - sum_q_outflux_CF 
215c215
<                     plot3[i][j][k]  = advect_q_CC[i][j][k][m];
---
>                     plot3[i][j][k]  = advect_q_CC[m][i][j][k];
diff -r ICE_SM/Advection_2D/advect_q_flux.c ICE_SM_TEST//Advection_2D/advect_q_flux.c
196c196
<                             q_CC[i][j][k][m] 
---
>                             q_CC[m][i][j][k] 
215c215
<                             q_CC[i][j][k][m] 
---
>                             q_CC[m][i][j][k] 
diff -r ICE_SM/Advection_2D/advect_q_vertex.c ICE_SM_TEST//Advection_2D/advect_q_vertex.c
392c392
<             q_vrtx1             = q_CC[i][j][k][m] + x_term + y_term + z_term;
---
>             q_vrtx1             = q_CC[m][i][j][k] + x_term + y_term + z_term;
401c401
<             q_vrtx2             = q_CC[i][j][k][m] + x_term + y_term + z_term;
---
>             q_vrtx2             = q_CC[m][i][j][k] + x_term + y_term + z_term;
411c411
<             q_vrtx3             = q_CC[i][j][k][m] + x_term + y_term + z_term;
---
>             q_vrtx3             = q_CC[m][i][j][k] + x_term + y_term + z_term;
420c420
<             q_vrtx4             = q_CC[i][j][k][m] + x_term + y_term + z_term;
---
>             q_vrtx4             = q_CC[m][i][j][k] + x_term + y_term + z_term;
578c578
<                 q_vrtx_temp          =  (q_CC[i][j][k][m] + q_CC[i+1][j][k][m]) /2.0;
---
>                 q_vrtx_temp          =  (q_CC[m][i][j][k] + q_CC[m][i+1][j][k]) /2.0;
607,608c607,608
<             *q_VRTX[xLo][j][k][4] = (q_CC[xLo][j][k][m] + q_CC[xLo][j+1][k][m]) /2.0;
<             *q_VRTX[xHi][j][k][3] = (q_CC[xHi][j][k][m] + q_CC[xHi][j+1][k][m]) /2.0; 
---
>             *q_VRTX[xLo][j][k][4] = (q_CC[m][xLo][j][k] + q_CC[m][xLo][j+1][k]) /2.0;
>             *q_VRTX[xHi][j][k][3] = (q_CC[m][xHi][j][k] + q_CC[m][xHi][j+1][k]) /2.0; 
620,621c620,621
<         *q_VRTX[xLo][yLo][k][4] =  q_CC[xLo][yLo][k][m];
<         *q_VRTX[xHi][yLo][k][2] =  q_CC[xLo][yHi][k][m];
---
>         *q_VRTX[xLo][yLo][k][4] =  q_CC[m][xLo][yLo][k];
>         *q_VRTX[xHi][yLo][k][2] =  q_CC[m][xLo][yHi][k];
Common subdirectories: ICE_SM/Boundary_Cond/CVS and ICE_SM_TEST//Boundary_Cond/CVS
diff -r ICE_SM/Boundary_Cond/boundary_cond.c ICE_SM_TEST//Boundary_Cond/boundary_cond.c
827c827
<                             data_CC[i][j][k][m] = BC_Values[wall][var][m];
---
>                             data_CC[m][i][j][k] = BC_Values[wall][var][m];
1063c1063
<                     data_CC[i][j][k][m] = data_CC[i+1][j][k][m]
---
>                     data_CC[m][i][j][k] = data_CC[m][i+1][j][k]
1068c1068
<                     data_CC[i][j][k][m] = data_CC[i-1][j][k][m]
---
>                     data_CC[m][i][j][k] = data_CC[m][i-1][j][k]
1073c1073
<                     data_CC[i][j][k][m] = data_CC[i][j-1][k][m]
---
>                     data_CC[m][i][j][k] = data_CC[m][i][j-1][k]
1078c1078
<                     data_CC[i][j][k][m] = data_CC[i][j+1][k][m]
---
>                     data_CC[m][i][j][k] = data_CC[m][i][j+1][k]
1206c1206
<                                  data_CC[i][j][k][m] = data_CC[xHiLimit][j][k][m];
---
>                                  data_CC[m][i][j][k] = data_CC[m][xHiLimit][j][k];
1210c1210
<                                  data_CC[i][j][k][m] = data_CC[xLoLimit][j][k][m];
---
>                                  data_CC[m][i][j][k] = data_CC[m][xLoLimit][j][k];
1214c1214
<                                  data_CC[i][j][k][m] = data_CC[i][yLoLimit][k][m];
---
>                                  data_CC[m][i][j][k] = data_CC[m][i][yLoLimit][k];
1218c1218
<                                  data_CC[i][j][k][m] = data_CC[i][yHiLimit][k][m];
---
>                                  data_CC[m][i][j][k] = data_CC[m][i][yHiLimit][k];
1310c1310
<         data_CC[i][j][k][m]     = ( data_CC[i][j-1][k][m] + data_CC[i+1][j][k][m]) /2.0;
---
>         data_CC[m][i][j][k]     = ( data_CC[m][i][j-1][k] + data_CC[m][i+1][j][k]) /2.0;
1319c1319
<         data_CC[i][j][k][m]     = ( data_CC[i][j-1][k][m] + data_CC[i-1][j][k][m]) /2.0;
---
>         data_CC[m][i][j][k]     = ( data_CC[m][i][j-1][k] + data_CC[m][i-1][j][k]) /2.0;
1330c1330
<         data_CC[i][j][k][m]     = ( data_CC[i][j+1][k][m] + data_CC[i-1][j][k][m]) /2.0;
---
>         data_CC[m][i][j][k]     = ( data_CC[m][i][j+1][k] + data_CC[m][i-1][j][k]) /2.0;
1339c1339
<         data_CC[i][j][k][m]     = ( data_CC[i][j+1][k][m] + data_CC[i+1][j][k][m]) /2.0;
---
>         data_CC[m][i][j][k]     = ( data_CC[m][i][j+1][k] + data_CC[m][i+1][j][k]) /2.0;
diff -r ICE_SM/Boundary_Cond/boundary_cond_FC.c ICE_SM_TEST//Boundary_Cond/boundary_cond_FC.c
132c132
<                             *data_FC[i][j][k][f][m] = data_CC[i][j][k][m];
---
>                             *data_FC[i][j][k][f][m] = data_CC[m][i][j][k];
169,170c169,170
<             *data_FC[i][j][k][BOTTOM][m] = data_CC[i][j][k][m];
<             *data_FC[i][j][k][LEFT][m]   = data_CC[i][j][k][m];
---
>             *data_FC[i][j][k][BOTTOM][m] = data_CC[m][i][j][k];
>             *data_FC[i][j][k][LEFT][m]   = data_CC[m][i][j][k];
174,175c174,175
<             *data_FC[i][j][k][TOP][m]    = data_CC[i][j][k][m];
<             *data_FC[i][j][k][LEFT][m]   = data_CC[i][j][k][m];
---
>             *data_FC[i][j][k][TOP][m]    = data_CC[m][i][j][k];
>             *data_FC[i][j][k][LEFT][m]   = data_CC[m][i][j][k];
179,180c179,180
<             *data_FC[i][j][k][TOP][m]    = data_CC[i][j][k][m];
<             *data_FC[i][j][k][RIGHT][m]  = data_CC[i][j][k][m];
---
>             *data_FC[i][j][k][TOP][m]    = data_CC[m][i][j][k];
>             *data_FC[i][j][k][RIGHT][m]  = data_CC[m][i][j][k];
184,185c184,185
<             *data_FC[i][j][k][BOTTOM][m] = data_CC[i][j][k][m];
<             *data_FC[i][j][k][RIGHT][m]  = data_CC[i][j][k][m];
---
>             *data_FC[i][j][k][BOTTOM][m] = data_CC[m][i][j][k];
>             *data_FC[i][j][k][RIGHT][m]  = data_CC[m][i][j][k];
Common subdirectories: ICE_SM/Equation_of_state/CVS and ICE_SM_TEST//Equation_of_state/CVS
diff -r ICE_SM/Equation_of_state/equation_of_state.c ICE_SM_TEST//Equation_of_state/equation_of_state.c
72c72
<                     press_CC[i][j][k][m] = rho_CC[i][j][k][m] * R[m] * Temp_CC[i][j][k][m];
---
>                     press_CC[m][i][j][k] = rho_CC[m][i][j][k] * R[m] * Temp_CC[m][i][j][k];
74,75c74,75
<                     neg_test1 = DMIN(neg_test1, press_CC[i][j][k][m]);
<                     neg_test2 = DMIN(neg_test2, Temp_CC[i][j][k][m]);
---
>                     neg_test1 = DMIN(neg_test1, press_CC[m][i][j][k]);
>                     neg_test2 = DMIN(neg_test2, Temp_CC[m][i][j][k]);
106c106
<     QUITE_FULLWARN(cv_CC[0][0][0][1]);          QUITE_FULLWARN(nMaterials);
---
>     QUITE_FULLWARN(cv_CC[1][0][0][0]);          QUITE_FULLWARN(nMaterials);
diff -r ICE_SM/Equation_of_state/speed_of_sound.c ICE_SM_TEST//Equation_of_state/speed_of_sound.c
63c63
<                     speedSound[i][j][k][m] = sqrt(gamma[m] * R[m] * Temp_CC[i][j][k][m]);
---
>                     speedSound[m][i][j][k] = sqrt(gamma[m] * R[m] * Temp_CC[m][i][j][k]);
Common subdirectories: ICE_SM/Header_files/CVS and ICE_SM_TEST//Header_files/CVS
Only in ICE_SM/Header_files: Eventually_trash
diff -r ICE_SM/Header_files/allocate_memory.i ICE_SM_TEST//Header_files/allocate_memory.i
9,14c9,14
<     uvel_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     vvel_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     wvel_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     rho_CC          = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     press_CC        = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     delPress_CC     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     uvel_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     vvel_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     wvel_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     rho_CC          = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     press_CC        = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     delPress_CC     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
16,21c16,21
<     Temp_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     viscosity_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     thermalCond_CC  = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     cv_CC           = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     R               = dvector(1, N_MATERIAL);
<     gamma           = dvector(1, N_MATERIAL);
---
>     Temp_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     viscosity_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     thermalCond_CC  = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     cv_CC           = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     R               = dvector_nr(1, N_MATERIAL);
>     gamma           = dvector_nr(1, N_MATERIAL);
23,29c23,29
<     mass_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     xmom_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     ymom_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     zmom_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     int_eng_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     total_eng_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     div_velFC_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     mass_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     xmom_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     ymom_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     zmom_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     int_eng_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     total_eng_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     div_velFC_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
33,37c33,37
<     scalar1_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     scalar2_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     scalar3_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     grav            = dvector(1, 3);
<     speedSound      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     scalar1_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     scalar2_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     scalar3_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     grav            = dvector_nr(1, 3);
>     speedSound      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
41,44c41,44
<     xmom_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     ymom_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     zmom_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);    
<     int_eng_L_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);    
---
>     xmom_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     ymom_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     zmom_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);    
>     int_eng_L_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);    
46,50c46,50
<     press_L_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     mass_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     rho_L_CC        = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     Temp_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     Vol_L_CC        = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     press_L_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     mass_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     rho_L_CC        = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     Temp_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     Vol_L_CC        = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
52,56c52,56
<     mass_source     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     xmom_source     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     ymom_source     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     zmom_source     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     int_eng_source  = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     mass_source     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     xmom_source     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     ymom_source     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     zmom_source     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     int_eng_source  = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
65,66c65,66
<     t_output_vars   = dvector(  1,  3);
<     delt_limits     = dvector(  1,  3);    
---
>     t_output_vars   = dvector_nr(  1,  3);
>     delt_limits     = dvector_nr(  1,  3);    
diff -r ICE_SM/Header_files/debugcode.i ICE_SM_TEST//Header_files/debugcode.i
37c37
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
49c49
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
61c61
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
73c73
<          free_vector(    data_array1,       1, max_len);                              
---
>          free_vector_nr(    data_array1,       1, max_len);                              
170c170
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
200c200
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
213c213
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
226c226
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
239c239
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
267c267
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
279c279
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
291c291
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
303c303
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
378,379c378,379
<         free_vector(    data_array1,       1, max_len);
<         free_vector(    data_array2,       1, max_len);                     
---
>         free_vector_nr(    data_array1,       1, max_len);
>         free_vector_nr(    data_array2,       1, max_len);                     
437c437
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
450c450
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
924c924
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
935c935
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
946c946
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
957c957
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1012c1012
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1025c1025
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1075c1075
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1142c1142
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1230c1230
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1240c1240
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1250c1250
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1260c1260
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1405c1405
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1414c1414
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1423c1423
<         free_vector(    data_array1,       1, max_len);  
---
>         free_vector_nr(    data_array1,       1, max_len);  
1432c1432
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
1446c1446
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1455c1455
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1464c1464
<         free_vector(    data_array1,       1, max_len);          
---
>         free_vector_nr(    data_array1,       1, max_len);          
1521c1521
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1532c1532
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1543c1543
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1729c1729
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1741c1741
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
diff -r ICE_SM/Header_files/free_memory.i ICE_SM_TEST//Header_files/free_memory.i
9,14c9,14
<    free_darray_4d( uvel_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( vvel_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( wvel_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( rho_CC,          0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( press_CC,        0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( delPress_CC,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( uvel_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( vvel_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( wvel_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( rho_CC,          1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( press_CC,        1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( delPress_CC,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
16,28c16,28
<    free_darray_4d( Temp_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( viscosity_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( thermalCond_CC,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( cv_CC,           0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_dvector( R,                  1, N_MATERIAL);
<    free_dvector( gamma,                  1, N_MATERIAL);
<    free_darray_4d( mass_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( xmom_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( ymom_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( zmom_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( int_eng_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( total_eng_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( div_velFC_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( Temp_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( viscosity_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( thermalCond_CC,  1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( cv_CC,           1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_dvector_nr( R,                  1, N_MATERIAL);
>    free_dvector_nr( gamma,                  1, N_MATERIAL);
>    free_darray_4d( mass_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( xmom_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( ymom_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( zmom_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( int_eng_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( total_eng_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( div_velFC_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
31,35c31,35
<    free_darray_4d( scalar1_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( scalar2_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( scalar3_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_dvector( grav,              1, 3);
<    free_darray_4d( speedSound,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( scalar1_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( scalar2_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( scalar3_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_dvector_nr( grav,              1, 3);
>    free_darray_4d( speedSound,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
38,41c38,41
<    free_darray_4d( xmom_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( ymom_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( zmom_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( int_eng_L_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( xmom_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( ymom_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( zmom_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( int_eng_L_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
44,48c44,48
<    free_darray_4d( press_L_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( mass_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( rho_L_CC,        0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( Temp_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( Vol_L_CC,        0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( press_L_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( mass_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( rho_L_CC,        1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( Temp_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( Vol_L_CC,        1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
50,54c50,54
<    free_darray_4d( mass_source,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
<    free_darray_4d( xmom_source,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
<    free_darray_4d( ymom_source,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
<    free_darray_4d( zmom_source,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
<    free_darray_4d( int_eng_source,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
---
>    free_darray_4d( mass_source,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( xmom_source,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( ymom_source,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( zmom_source,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( int_eng_source,  1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
64,65c64,65
<    free_dvector(t_output_vars,       1, 3);
<    free_dvector(delt_limits,         1, 3);   
---
>    free_dvector_nr(t_output_vars,       1, 3);
>    free_dvector_nr(delt_limits,         1, 3);   
Only in ICE_SM_TEST//Header_files: free_memory.i_org
diff -r ICE_SM/Header_files/inline.h ICE_SM_TEST//Header_files/inline.h
30,31c30,31
<       temp =    0.25 * (data_CC[i][j][k][m]     + data_CC[i][j][k+1][m]  
<                      +  data_CC[i][j+1][k][m]   + data_CC[i][j+1][k+1][m]);
---
>       temp =    0.25 * (data_CC[m][i][j][k]     + data_CC[m][i][j][k+1]  
>                      +  data_CC[m][i][j+1][k]   + data_CC[i][j+1][k+1][m]);
60,61c60,61
<       temp =    0.25 * (data_CC[i][j][k][m]     + data_CC[i+1][j][k][m]
<                      +  data_CC[i][j][k+1][m]   + data_CC[i+1][j][k+1][m]);
---
>       temp =    0.25 * (data_CC[m][i][j][k]     + data_CC[m][i+1][j][k]
>                      +  data_CC[m][i][j][k+1]   + data_CC[i+1][j][k+1][m]);
90,91c90,91
<       temp =  0.25 * (data_CC[i][j][k][m]     + data_CC[i+1][j][k][m]        
<                    +  data_CC[i][j+1][k][m]   + data_CC[i+1][j+1][k][m]);
---
>       temp =  0.25 * (data_CC[m][i][j][k]     + data_CC[m][i+1][j][k]        
>                    +  data_CC[m][i][j+1][k]   + data_CC[m][i+1][j+1][k]);
125,127c125,127
<     assert( data_CC[i][j][k][m] + data_CC[i+1][j][k][m] > SMALL_NUM);           
<     data_FC[RIGHT]  = (2.0 * data_CC[i][j][k][m] * data_CC[i+1][j][k][m])/
<                             (data_CC[i][j][k][m] + data_CC[i+1][j][k][m]);
---
>     assert( data_CC[m][i][j][k] + data_CC[m][i+1][j][k] > SMALL_NUM);           
>     data_FC[RIGHT]  = (2.0 * data_CC[m][i][j][k] * data_CC[m][i+1][j][k])/
>                             (data_CC[m][i][j][k] + data_CC[m][i+1][j][k]);
131,133c131,133
<     assert( data_CC[i][j][k][m] + data_CC[i-1][j][k][m] > SMALL_NUM);          
<     data_FC[LEFT]   = (2.0 * data_CC[i][j][k][m] * data_CC[i-1][j][k][m])/
<                             (data_CC[i][j][k][m] + data_CC[i-1][j][k][m]);
---
>     assert( data_CC[m][i][j][k] + data_CC[m][i-1][j][k] > SMALL_NUM);          
>     data_FC[LEFT]   = (2.0 * data_CC[m][i][j][k] * data_CC[m][i-1][j][k])/
>                             (data_CC[m][i][j][k] + data_CC[m][i-1][j][k]);
138,140c138,140
<     assert( data_CC[i][j][k][m] + data_CC[i][j+1][k][m] > SMALL_NUM);          
<     data_FC[TOP]    = (2.0 * data_CC[i][j][k][m] * data_CC[i][j+1][k][m])/
<                             (data_CC[i][j][k][m] + data_CC[i][j+1][k][m]);
---
>     assert( data_CC[m][i][j][k] + data_CC[m][i][j+1][k] > SMALL_NUM);          
>     data_FC[TOP]    = (2.0 * data_CC[m][i][j][k] * data_CC[m][i][j+1][k])/
>                             (data_CC[m][i][j][k] + data_CC[m][i][j+1][k]);
145,147c145,147
<     assert( data_CC[i][j][k][m] + data_CC[i][j-1][k][m] > SMALL_NUM);          
<     data_FC[BOTTOM] = (2.0 * data_CC[i][j][k][m] * data_CC[i][j-1][k][m])/
<                             (data_CC[i][j][k][m] + data_CC[i][j-1][k][m]);
---
>     assert( data_CC[m][i][j][k] + data_CC[m][i][j-1][k] > SMALL_NUM);          
>     data_FC[BOTTOM] = (2.0 * data_CC[m][i][j][k] * data_CC[m][i][j-1][k])/
>                             (data_CC[m][i][j][k] + data_CC[m][i][j-1][k]);
152,154c152,154
<     assert( data_CC[i][j][k][m] + data_CC[i][j][k+1][m] > SMALL_NUM);          
<     data_FC[FRONT]  = (2.0 * data_CC[i][j][k][m] * data_CC[i][j][k+1][m])/
<                             (data_CC[i][j][k][m] + data_CC[i][j][k+1][m]);
---
>     assert( data_CC[m][i][j][k] + data_CC[m][i][j][k+1] > SMALL_NUM);          
>     data_FC[FRONT]  = (2.0 * data_CC[m][i][j][k] * data_CC[m][i][j][k+1])/
>                             (data_CC[m][i][j][k] + data_CC[m][i][j][k+1]);
159,161c159,161
<     assert( data_CC[i][j][k][m] + data_CC[i][j][k-1][m] > SMALL_NUM);          
<     data_FC[BACK]   = (2.0 * data_CC[i][j][k][m] * data_CC[i][j][k-1][m])/
<                             (data_CC[i][j][k][m] + data_CC[i][j][k-1][m]);
---
>     assert( data_CC[m][i][j][k] + data_CC[m][i][j][k-1] > SMALL_NUM);          
>     data_FC[BACK]   = (2.0 * data_CC[m][i][j][k] * data_CC[m][i][j][k-1])/
>                             (data_CC[m][i][j][k] + data_CC[m][i][j][k-1]);
278c278
<     term1 = (uvel_CC[i+1][j][k][m]  - uvel_CC[i][j][k][m] )     /delX; 
---
>     term1 = (uvel_CC[m][i+1][j][k]  - uvel_CC[m][i][j][k] )     /delX; 
286c286
<     term1 = (uvel_CC[i][j][k][m]    - uvel_CC[i-1][j][k][m] )   /delX; 
---
>     term1 = (uvel_CC[m][i][j][k]    - uvel_CC[m][i-1][j][k] )   /delX; 
295c295
<     term2 = (vvel_CC[i][j+1][k][m]  - vvel_CC[i][j][k][m] )     /delY;         
---
>     term2 = (vvel_CC[m][i][j+1][k]  - vvel_CC[m][i][j][k] )     /delY;         
303c303
<     term2 = (vvel_CC[i][j][k][m]    - vvel_CC[i][j-1][k][m] )   /delY;         
---
>     term2 = (vvel_CC[m][i][j][k]    - vvel_CC[m][i][j-1][k] )   /delY;         
diff -r ICE_SM/Header_files/nrutil+.h ICE_SM_TEST//Header_files/nrutil+.h
53,57c53,57
< float *vector(long nl, long nh);
< int *ivector(long nl, long nh);
< unsigned char *cvector(long nl, long nh);
< unsigned long *lvector(long nl, long nh);
< double *dvector(long nl, long nh);
---
> float *vector_nr(long nl, long nh);
> int *ivector_nr(long nl, long nh);
> unsigned char *cvector_nr(long nl, long nh);
> unsigned long *lvector_nr(long nl, long nh);
> double *dvector_nr(long nl, long nh);
115,119c115,119
< void free_vector(float *v, long nl, long nh);
< void free_ivector(int *v, long nl, long nh);
< void free_cvector(unsigned char *v, long nl, long nh);
< void free_lvector(unsigned long *v, long nl, long nh);
< void free_dvector(double *v, long nl, long nh);
---
> void free_vector_nr(float *v, long nl, long nh);
> void free_ivector_nr(int *v, long nl, long nh);
> void free_cvector_nr(unsigned char *v, long nl, long nh);
> void free_lvector_nr(unsigned long *v, long nl, long nh);
> void free_dvector_nr(double *v, long nl, long nh);
diff -r ICE_SM/Header_files/overide_initial_conds.i ICE_SM_TEST//Header_files/overide_initial_conds.i
12c12
<                    Temp_CC[i][j][k][m]   = 1.0;                           
---
>                    Temp_CC[m][i][j][k]   = 1.0;                           
19c19
<                    Temp_CC[i][j][k][m]   = 2.0;
---
>                    Temp_CC[m][i][j][k]   = 2.0;
24c24
<                    rho_CC[i][j][k][m]   = 2.0;
---
>                    rho_CC[m][i][j][k]   = 2.0;
29c29
<                    rho_CC[i][j][k][m]   = 2.0;
---
>                    rho_CC[m][i][j][k]   = 2.0;
33c33
<                    rho_CC[i][j][k][m]   = 2.0;
---
>                    rho_CC[m][i][j][k]   = 2.0;
Common subdirectories: ICE_SM/Input_Files/CVS and ICE_SM_TEST//Input_Files/CVS
Common subdirectories: ICE_SM/Libraries/64bit and ICE_SM_TEST//Libraries/64bit
Common subdirectories: ICE_SM/Libraries/CVS and ICE_SM_TEST//Libraries/CVS
Common subdirectories: ICE_SM/Libraries/Malloc_NAN and ICE_SM_TEST//Libraries/Malloc_NAN
Common subdirectories: ICE_SM/Libraries/n32bit and ICE_SM_TEST//Libraries/n32bit
Common subdirectories: ICE_SM/Libraries/tecio_platforms and ICE_SM_TEST//Libraries/tecio_platforms
Common subdirectories: ICE_SM/Libraries/Malloc_NAN/CVS and ICE_SM_TEST//Libraries/Malloc_NAN/CVS
Common subdirectories: ICE_SM/Libraries/tecio_platforms/linux.203 and ICE_SM_TEST//Libraries/tecio_platforms/linux.203
Common subdirectories: ICE_SM/Libraries/tecio_platforms/sgix.62 and ICE_SM_TEST//Libraries/tecio_platforms/sgix.62
Common subdirectories: ICE_SM/Plot_routines/CVS and ICE_SM_TEST//Plot_routines/CVS
diff -r ICE_SM/Plot_routines/plot_common_org.c ICE_SM_TEST//Plot_routines/plot_common_org.c
919c919
<                if ( data_array[i][j][k][m] >= *y_max) 
---
>                if ( data_array[m][i][j][k] >= *y_max) 
921c921
<                     *y_max = data_array[i][j][k][m];
---
>                     *y_max = data_array[m][i][j][k];
923c923
<                if ( data_array[i][j][k][m] <= *y_min)
---
>                if ( data_array[m][i][j][k] <= *y_min)
925c925
<                     *y_min = (float)data_array[i][j][k][m];  
---
>                     *y_min = (float)data_array[m][i][j][k];  
diff -r ICE_SM/Plot_routines/plot_contour.c ICE_SM_TEST//Plot_routines/plot_contour.c
77c77
<     contour_levels  = vector(0, n_contours+2);
---
>     contour_levels  = vector_nr(0, n_contours+2);
118c118
<     free_vector(contour_levels, 0, n_contours+2);
---
>     free_vector_nr(contour_levels, 0, n_contours+2);
182c182
<     contour_levels  = vector(0, n_contours+2);
---
>     contour_levels  = vector_nr(0, n_contours+2);
237c237
<     free_vector(contour_levels, 0, n_contours+2); 
---
>     free_vector_nr(contour_levels, 0, n_contours+2); 
Only in ICE_SM_TEST//Plot_routines: plot_contour.c_org
Only in ICE_SM_TEST//Plot_routines: plot_contour.c_tmp
diff -r ICE_SM/Plot_routines/plot_control.c ICE_SM_TEST//Plot_routines/plot_control.c
147c147
<             x_data      = vector(1,  (max_len));
---
>             x_data      = vector_nr(1,  (max_len));
181c181
<             free_vector(x_data, 1, max_len);
---
>             free_vector_nr(x_data, 1, max_len);
274c274
<             x_data      = vector(1,  (max_len));
---
>             x_data      = vector_nr(1,  (max_len));
307c307
<             free_vector(x_data, 1, max_len);
---
>             free_vector_nr(x_data, 1, max_len);
Only in ICE_SM_TEST//Plot_routines: plot_control.c_org
Only in ICE_SM_TEST//Plot_routines: plot_control.c_tmp
Common subdirectories: ICE_SM/PressureSolve/CVS and ICE_SM_TEST//PressureSolve/CVS
Only in ICE_SM/PressureSolve: Eventually_trash
diff -r ICE_SM/PressureSolve/press_vel_face.c ICE_SM_TEST//PressureSolve/press_vel_face.c
163,164c163,164
<                 rho_FC_RIGHT    = ( rho_CC[i][j][k][m] + rho_CC[i+1][j][k][m] )/2.0;
<                 term1           = delt * (press_CC[i+1][j][k][m] - press_CC[i][j][k][m] )/
---
>                 rho_FC_RIGHT    = ( rho_CC[m][i][j][k] + rho_CC[m][i+1][j][k] )/2.0;
>                 term1           = delt * (press_CC[m][i+1][j][k] - press_CC[m][i][j][k] )/
171c171
<                 computed[i][j][k][m][RIGHT]    = YES;
---
>                 computed[m][i][j][k][RIGHT]    = YES;
186,187c186,187
<                 rho_FC_TOP      = ( rho_CC[i][j][k][m] + rho_CC[i][j+1][k][m] )/2.0;
<                 term1           = delt * (press_CC[i][j+1][k][m] - press_CC[i][j][k][m] )/
---
>                 rho_FC_TOP      = ( rho_CC[m][i][j][k] + rho_CC[m][i][j+1][k] )/2.0;
>                 term1           = delt * (press_CC[m][i][j+1][k] - press_CC[m][i][j][k] )/
373c373
<     computed2 = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     computed2 = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
435c435
<                  delPress_CC[i][j][k][m]     = 0.0;
---
>                  delPress_CC[m][i][j][k]     = 0.0;
448c448
<                      term1                   = -delt * rho_CC[i][j][k][m] * pow(speedSound[i][j][k][m],2);
---
>                      term1                   = -delt * rho_CC[m][i][j][k] * pow(speedSound[m][i][j][k],2);
452c452
<                          delPress_CC[i][j][k][m]= OVERRELAXATION * (grad_X + grad_Y + grad_Z) * term1; 
---
>                          delPress_CC[m][i][j][k]= OVERRELAXATION * (grad_X + grad_Y + grad_Z) * term1; 
457c457
<                             delPress_CC[i][j][k][m] = 0.0; */
---
>                             delPress_CC[m][i][j][k] = 0.0; */
460c460
<                          press_CC[i][j][k][m]   = press_CC[i][j][k][m] + delPress_CC[i][j][k][m];
---
>                          press_CC[m][i][j][k]   = press_CC[m][i][j][k] + delPress_CC[m][i][j][k];
465c465
<                          computed2[i][j][k][m]  = YES;
---
>                          computed2[m][i][j][k]  = YES;
482c482
<                     rho_FC_RIGHT    = ( rho_CC[i][j][k][m] + rho_CC[i+1][j][k][m] )/2.0;
---
>                     rho_FC_RIGHT    = ( rho_CC[m][i][j][k] + rho_CC[m][i+1][j][k] )/2.0;
484c484
<                     u_FC_RIGHT      = u_FC_RIGHT + (delt/rho_FC_RIGHT) * (delPress_CC[i][j][k][m]/delX);
---
>                     u_FC_RIGHT      = u_FC_RIGHT + (delt/rho_FC_RIGHT) * (delPress_CC[m][i][j][k]/delX);
494c494
<                     rho_FC_LEFT     = ( rho_CC[i-1][j][k][m] + rho_CC[i][j][k][m] )/2.0;
---
>                     rho_FC_LEFT     = ( rho_CC[m][i-1][j][k] + rho_CC[m][i][j][k] )/2.0;
496c496
<                     u_FC_LEFT       = u_FC_LEFT - (delt/rho_FC_LEFT) * (delPress_CC[i][j][k][m]/delX);
---
>                     u_FC_LEFT       = u_FC_LEFT - (delt/rho_FC_LEFT) * (delPress_CC[m][i][j][k]/delX);
499c499
<                     computed[i][j][k][m][LEFT]      = YES;
---
>                     computed[m][i][j][k][LEFT]      = YES;
510c510
<                     rho_FC_TOP      = ( rho_CC[i][j][k][m] + rho_CC[i][j+1][k][m] )/2.0;
---
>                     rho_FC_TOP      = ( rho_CC[m][i][j][k] + rho_CC[m][i][j+1][k] )/2.0;
512c512
<                     v_FC_TOP        = v_FC_TOP + (delt/rho_FC_TOP) * (delPress_CC[i][j][k][m]/delY);
---
>                     v_FC_TOP        = v_FC_TOP + (delt/rho_FC_TOP) * (delPress_CC[m][i][j][k]/delY);
522c522
<                     rho_FC_BOTTOM    = ( rho_CC[i][j][k][m] + rho_CC[i][j-1][k][m] )/2.0;
---
>                     rho_FC_BOTTOM    = ( rho_CC[m][i][j][k] + rho_CC[m][i][j-1][k] )/2.0;
524c524
<                     v_FC_BOTTOM      = v_FC_BOTTOM - (delt/rho_FC_BOTTOM) * (delPress_CC[i][j][k][m]/delY);
---
>                     v_FC_BOTTOM      = v_FC_BOTTOM - (delt/rho_FC_BOTTOM) * (delPress_CC[m][i][j][k]/delY);
527c527
<                     computed[i][j][k][m][BOTTOM]    = YES;
---
>                     computed[m][i][j][k][BOTTOM]    = YES;
641c641
<         free_darray_4d( computed2,0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>         free_darray_4d( computed2,1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
647c647
<     QUITE_FULLWARN(*wvel_half_FC[0][0][0][1]);  QUITE_FULLWARN(grav[1]);
---
>     QUITE_FULLWARN(*wvel_half_FC[1][0][0][0]);  QUITE_FULLWARN(grav[1]);
diff -r ICE_SM/PressureSolve/press_vel_face110299.C ICE_SM_TEST//PressureSolve/press_vel_face110299.C
152,153c152,153
<                 rho_FC_RIGHT    = ( rho_CC[i][j][k][m] + rho_CC[i+1][j][k][m] )/2.0;
<                 term1           = delt * (press_CC[i+1][j][k][m] - press_CC[i][j][k][m] )/
---
>                 rho_FC_RIGHT    = ( rho_CC[m][i][j][k] + rho_CC[m][i+1][j][k] )/2.0;
>                 term1           = delt * (press_CC[m][i+1][j][k] - press_CC[m][i][j][k] )/
171,172c171,172
<                 rho_FC_TOP      = ( rho_CC[i][j][k][m] + rho_CC[i][j+1][k][m] )/2.0;
<                 term1           = delt * (press_CC[i][j+1][k][m] - press_CC[i][j][k][m] )/
---
>                 rho_FC_TOP      = ( rho_CC[m][i][j][k] + rho_CC[m][i][j+1][k] )/2.0;
>                 term1           = delt * (press_CC[m][i][j+1][k] - press_CC[m][i][j][k] )/
330c330
<     test_array2 = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     test_array2 = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
343,344c343,344
<     ytesting = ivector(0, X_MAX_LIM);
<     xtesting = ivector(0,Y_MAX_LIM);
---
>     ytesting = ivector_nr(0, X_MAX_LIM);
>     xtesting = ivector_nr(0,Y_MAX_LIM);
461c461
<                      press_CC[i][j][k][m]    = press_CC[i][j][k][m] + delPress_CC[i][j][k];
---
>                      press_CC[m][i][j][k]    = press_CC[m][i][j][k] + delPress_CC[i][j][k];
484c484
<                     rho_FC_RIGHT    = ( rho_CC[i][j][k][m] + rho_CC[i+1][j][k][m] )/2.0;
---
>                     rho_FC_RIGHT    = ( rho_CC[m][i][j][k] + rho_CC[m][i+1][j][k] )/2.0;
489c489
<                     rho_FC_LEFT     = ( rho_CC[i-1][j][k][m] + rho_CC[i][j][k][m] )/2.0;
---
>                     rho_FC_LEFT     = ( rho_CC[m][i-1][j][k] + rho_CC[m][i][j][k] )/2.0;
497c497
<                     rho_FC_TOP       = ( rho_CC[i][j][k][m] + rho_CC[i][j+1][k][m] )/2.0;
---
>                     rho_FC_TOP       = ( rho_CC[m][i][j][k] + rho_CC[m][i][j+1][k] )/2.0;
503c503
<                     rho_FC_BOTTOM    = ( rho_CC[i][j][k][m] + rho_CC[i][j-1][k][m] )/2.0;
---
>                     rho_FC_BOTTOM    = ( rho_CC[m][i][j][k] + rho_CC[m][i][j-1][k] )/2.0;
526c526
<     free_ivector(ytesting, 0, X_MAX_LIM);
---
>     free_ivector_nr(ytesting, 0, X_MAX_LIM);
622c622
<         free_darray_4d( test_array2,0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>         free_darray_4d( test_array2,1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
diff -r ICE_SM/PressureSolve/press_vel_face110699.C ICE_SM_TEST//PressureSolve/press_vel_face110699.C
153,154c153,154
<                 rho_FC_RIGHT    = ( rho_CC[i][j][k][m] + rho_CC[i+1][j][k][m] )/2.0;
<                 term1           = delt * (press_CC[i+1][j][k][m] - press_CC[i][j][k][m] )/
---
>                 rho_FC_RIGHT    = ( rho_CC[m][i][j][k] + rho_CC[m][i+1][j][k] )/2.0;
>                 term1           = delt * (press_CC[m][i+1][j][k] - press_CC[m][i][j][k] )/
172,173c172,173
<                 rho_FC_TOP      = ( rho_CC[i][j][k][m] + rho_CC[i][j+1][k][m] )/2.0;
<                 term1           = delt * (press_CC[i][j+1][k][m] - press_CC[i][j][k][m] )/
---
>                 rho_FC_TOP      = ( rho_CC[m][i][j][k] + rho_CC[m][i][j+1][k] )/2.0;
>                 term1           = delt * (press_CC[m][i][j+1][k] - press_CC[m][i][j][k] )/
222c222
<     QUITE_FULLWARN(grav[0][0][0][1]);
---
>     QUITE_FULLWARN(grav[1][0][0][0]);
334c334
<     computed2 = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     computed2 = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
396c396
<                  delPress_CC[i][j][k][m]     = 0.0;
---
>                  delPress_CC[m][i][j][k]     = 0.0;
413,415c413,415
<                          delPress_CC[i][j][k][m]= OVERRELAXATION * (grad_X + grad_Y + grad_Z)/term1; 
<                          press_CC[i][j][k][m]   = press_CC[i][j][k][m] + delPress_CC[i][j][k][m];
<                          computed2[i][j][k][m]  = YES;
---
>                          delPress_CC[m][i][j][k]= OVERRELAXATION * (grad_X + grad_Y + grad_Z)/term1; 
>                          press_CC[m][i][j][k]   = press_CC[m][i][j][k] + delPress_CC[m][i][j][k];
>                          computed2[m][i][j][k]  = YES;
429c429
<                     rho_FC_RIGHT    = ( rho_CC[i][j][k][m] + rho_CC[i+1][j][k][m] )/2.0;
---
>                     rho_FC_RIGHT    = ( rho_CC[m][i][j][k] + rho_CC[m][i+1][j][k] )/2.0;
431c431
<                     u_FC_RIGHT      = u_FC_RIGHT + (delt/rho_FC_RIGHT) * (delPress_CC[i][j][k][m]/delX);
---
>                     u_FC_RIGHT      = u_FC_RIGHT + (delt/rho_FC_RIGHT) * (delPress_CC[m][i][j][k]/delX);
438c438
<                     rho_FC_LEFT     = ( rho_CC[i-1][j][k][m] + rho_CC[i][j][k][m] )/2.0;
---
>                     rho_FC_LEFT     = ( rho_CC[m][i-1][j][k] + rho_CC[m][i][j][k] )/2.0;
440c440
<                     u_FC_LEFT       = u_FC_LEFT - (delt/rho_FC_LEFT) * (delPress_CC[i][j][k][m]/delX);
---
>                     u_FC_LEFT       = u_FC_LEFT - (delt/rho_FC_LEFT) * (delPress_CC[m][i][j][k]/delX);
443c443
<                     computed[i][j][k][m][LEFT]      = YES;
---
>                     computed[m][i][j][k][LEFT]      = YES;
451c451
<                     rho_FC_TOP       = ( rho_CC[i][j][k][m] + rho_CC[i][j+1][k][m] )/2.0;
---
>                     rho_FC_TOP       = ( rho_CC[m][i][j][k] + rho_CC[m][i][j+1][k] )/2.0;
453c453
<                     v_FC_TOP         = v_FC_TOP + (delt/rho_FC_TOP) * (delPress_CC[i][j][k][m]/delY);
---
>                     v_FC_TOP         = v_FC_TOP + (delt/rho_FC_TOP) * (delPress_CC[m][i][j][k]/delY);
461c461
<                     rho_FC_BOTTOM    = ( rho_CC[i][j][k][m] + rho_CC[i][j-1][k][m] )/2.0;
---
>                     rho_FC_BOTTOM    = ( rho_CC[m][i][j][k] + rho_CC[m][i][j-1][k] )/2.0;
463c463
<                     v_FC_BOTTOM      = v_FC_BOTTOM - (delt/rho_FC_BOTTOM) * (delPress_CC[i][j][k][m]/delY);
---
>                     v_FC_BOTTOM      = v_FC_BOTTOM - (delt/rho_FC_BOTTOM) * (delPress_CC[m][i][j][k]/delY);
466c466
<                     computed[i][j][k][m][BOTTOM]    = YES;
---
>                     computed[m][i][j][k][BOTTOM]    = YES;
580c580
<         free_darray_4d( computed2,0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>         free_darray_4d( computed2,1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
586c586
<     QUITE_FULLWARN(*wvel_half_FC[0][0][0][1]);  QUITE_FULLWARN(grav[0][0][0][1]);
---
>     QUITE_FULLWARN(*wvel_half_FC[1][0][0][0]);  QUITE_FULLWARN(grav[1][0][0][0]);
diff -r ICE_SM/PressureSolve/pressure_iteration.c ICE_SM_TEST//PressureSolve/pressure_iteration.c
234c234
<                         residual = DMAX(residual,fabs( delPress_CC[i][j][k][m]/press_CC[i][j][k][m]));
---
>                         residual = DMAX(residual,fabs( delPress_CC[m][i][j][k]/press_CC[m][i][j][k]));
Common subdirectories: ICE_SM/PressureSolve_PCG/pcgmg and ICE_SM_TEST//PressureSolve_PCG/pcgmg
diff -r ICE_SM/PressureSolve_PCG/pressure_residual.c ICE_SM_TEST//PressureSolve_PCG/pressure_residual.c
73c73
<     div_vel_FC= darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     div_vel_FC= darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
98,99c98,99
<                 coeff           = pow(speedSound[i][j][k][m],2) * rho_CC[i][j][k][m];
<                 RHS             = -(coeff * div_vel_FC[i][j][k][m]) * (delt/vol);
---
>                 coeff           = pow(speedSound[m][i][j][k],2) * rho_CC[m][i][j][k];
>                 RHS             = -(coeff * div_vel_FC[m][i][j][k]) * (delt/vol);
101c101
<                 delPress_dt     = delPress_CC[i][j][k][m];
---
>                 delPress_dt     = delPress_CC[m][i][j][k];
137c137
<    free_darray_4d(div_vel_FC, 0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d(div_vel_FC, 1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
Only in ICE_SM_TEST//PressureSolve_PCG/pcgmg: pcg_main.c_tmp
Only in ICE_SM_TEST//PressureSolve_PCG/pcgmg: stencilShell.c_tmp
Common subdirectories: ICE_SM/Source_Sinks/CVS and ICE_SM_TEST//Source_Sinks/CVS
diff -r ICE_SM/Source_Sinks/energy.c ICE_SM_TEST//Source_Sinks/energy.c
119c119
<                     int_eng_source_tmp          =   -delt * press_CC[i][j][k][m] * div_velFC_CC[i][j][k][m];
---
>                     int_eng_source_tmp          =   -delt * press_CC[m][i][j][k] * div_velFC_CC[m][i][j][k];
121c121
<                      int_eng_source[i][j][k][m]  =   switch_eng * int_eng_source_tmp;
---
>                      int_eng_source[m][i][j][k]  =   switch_eng * int_eng_source_tmp;
146,151c146,151
<     QUITE_FULLWARN(delPress_CC[0][0][0][1]);                  
<     QUITE_FULLWARN(mass_CC[0][0][0][1]);    QUITE_FULLWARN(speedSound[0][0][0][1]);
<     QUITE_FULLWARN(rho_CC[0][0][0][1]);     QUITE_FULLWARN(Temp_CC[0][0][0][1]);
<     QUITE_FULLWARN(cv_CC[0][0][0][1]);      QUITE_FULLWARN(grav[1]);
<     QUITE_FULLWARN(uvel_CC[0][0][0][1]);    QUITE_FULLWARN(vvel_CC[0][0][0][1]);
<     QUITE_FULLWARN(wvel_CC[0][0][0][1]);    QUITE_FULLWARN(nMaterials);
---
>     QUITE_FULLWARN(delPress_CC[1][0][0][0]);                  
>     QUITE_FULLWARN(mass_CC[1][0][0][0]);    QUITE_FULLWARN(speedSound[1][0][0][0]);
>     QUITE_FULLWARN(rho_CC[1][0][0][0]);     QUITE_FULLWARN(Temp_CC[1][0][0][0]);
>     QUITE_FULLWARN(cv_CC[1][0][0][0]);      QUITE_FULLWARN(grav[1]);
>     QUITE_FULLWARN(uvel_CC[1][0][0][0]);    QUITE_FULLWARN(vvel_CC[1][0][0][0]);
>     QUITE_FULLWARN(wvel_CC[1][0][0][0]);    QUITE_FULLWARN(nMaterials);
diff -r ICE_SM/Source_Sinks/momentum.c ICE_SM_TEST//Source_Sinks/momentum.c
156c156
<                     mass = rho_CC[i][j][k][m] * delX * delY * delZ;
---
>                     mass = rho_CC[m][i][j][k] * delX * delY * delZ;
167c167
<                     xmom_source[i][j][k][m] =   switch_x * xmom_source_temp;
---
>                     xmom_source[m][i][j][k] =   switch_x * xmom_source_temp;
179c179
<                     ymom_source[i][j][k][m] =   switch_y * ymom_source_temp;
---
>                     ymom_source[m][i][j][k] =   switch_y * ymom_source_temp;
192c192
<                     zmom_source[i][j][k][m] =   switch_z * zmom_source_temp;
---
>                     zmom_source[m][i][j][k] =   switch_z * zmom_source_temp;
216,219c216,219
<     QUITE_FULLWARN(rho_CC[0][0][0][1]);     QUITE_FULLWARN(Temp_CC[0][0][0][1]);
<     QUITE_FULLWARN(cv_CC[0][0][0][1]);      QUITE_FULLWARN(viscosity_CC[0][0][0][1]);
<     QUITE_FULLWARN(uvel_CC[0][0][0][1]);    QUITE_FULLWARN(vvel_CC[0][0][0][1]);
<     QUITE_FULLWARN(wvel_CC[0][0][0][1]);    QUITE_FULLWARN(nMaterials);
---
>     QUITE_FULLWARN(rho_CC[1][0][0][0]);     QUITE_FULLWARN(Temp_CC[1][0][0][0]);
>     QUITE_FULLWARN(cv_CC[1][0][0][0]);      QUITE_FULLWARN(viscosity_CC[1][0][0][0]);
>     QUITE_FULLWARN(uvel_CC[1][0][0][0]);    QUITE_FULLWARN(vvel_CC[1][0][0][0]);
>     QUITE_FULLWARN(wvel_CC[1][0][0][0]);    QUITE_FULLWARN(nMaterials);
diff -r ICE_SM/Source_Sinks/shear_stress.c ICE_SM_TEST//Source_Sinks/shear_stress.c
93,94c93,94
<     viscosity_FC    = dvector(1, N_CELL_FACES);
<     div_vel_FC      = dvector(1, N_CELL_FACES);
---
>     viscosity_FC    = dvector_nr(1, N_CELL_FACES);
>     div_vel_FC      = dvector_nr(1, N_CELL_FACES);
136c136
<                     term1           = 2.0       * viscosity_FC[LEFT] * (uvel_CC[i][j][k][m] - uvel_CC[i-1][j][k][m])/delX;
---
>                     term1           = 2.0       * viscosity_FC[LEFT] * (uvel_CC[m][i][j][k] - uvel_CC[m][i-1][j][k])/delX;
145c145
<                     term1           = 2.0       * viscosity_FC[RIGHT] * (uvel_CC[i+1][j][k][m] - uvel_CC[i][j][k][m])/delX;
---
>                     term1           = 2.0       * viscosity_FC[RIGHT] * (uvel_CC[m][i+1][j][k] - uvel_CC[m][i][j][k])/delX;
154c154
<                     grad_1          = (uvel_CC[i][j+1][k][m]    - uvel_CC[i][j][k][m])  /delY;
---
>                     grad_1          = (uvel_CC[m][i][j+1][k]    - uvel_CC[m][i][j][k])  /delY;
162c162
<                     grad_1          = (uvel_CC[i][j][k][m]      - uvel_CC[i][j-1][k][m])/delY;
---
>                     grad_1          = (uvel_CC[m][i][j][k]      - uvel_CC[m][i][j-1][k])/delY;
172c172
<                     grad_1          = (uvel_CC[i][j][k+1][m]    - uvel_CC[i][j][k][m])  /delZ;
---
>                     grad_1          = (uvel_CC[m][i][j][k+1]    - uvel_CC[m][i][j][k])  /delZ;
180c180
<                     grad_1          = (uvel_CC[i][j][k][m]      - uvel_CC[i][j][k-1][m])/delZ;
---
>                     grad_1          = (uvel_CC[m][i][j][k]      - uvel_CC[m][i][j][k-1])/delZ;
202,203c202,203
<     free_dvector( div_vel_FC,  1, N_CELL_FACES);
<     free_dvector(viscosity_FC, 1, N_CELL_FACES);
---
>     free_dvector_nr( div_vel_FC,  1, N_CELL_FACES);
>     free_dvector_nr(viscosity_FC, 1, N_CELL_FACES);
307,308c307,308
<     viscosity_FC    = dvector(1, N_CELL_FACES);
<     div_vel_FC      = dvector(1, N_CELL_FACES);
---
>     viscosity_FC    = dvector_nr(1, N_CELL_FACES);
>     div_vel_FC      = dvector_nr(1, N_CELL_FACES);
351c351
<                     grad_2          = (vvel_CC[i][j][k][m]      - vvel_CC[i-1][j][k][m])    /delX;
---
>                     grad_2          = (vvel_CC[m][i][j][k]      - vvel_CC[m][i-1][j][k])    /delX;
359c359
<                     grad_2          = (vvel_CC[i+1][j][k][m]    - vvel_CC[i][j][k][m])      /delX;
---
>                     grad_2          = (vvel_CC[m][i+1][j][k]    - vvel_CC[m][i][j][k])      /delX;
366c366
<                     term1           = 2.0       * viscosity_FC[TOP] * (vvel_CC[i][j+1][k][m] - vvel_CC[i][j][k][m])/delY;
---
>                     term1           = 2.0       * viscosity_FC[TOP] * (vvel_CC[m][i][j+1][k] - vvel_CC[m][i][j][k])/delY;
374c374
<                     term1           = 2.0       * viscosity_FC[BOTTOM] * (vvel_CC[i][j][k][m] - vvel_CC[i][j-1][k][m])/delY;
---
>                     term1           = 2.0       * viscosity_FC[BOTTOM] * (vvel_CC[m][i][j][k] - vvel_CC[m][i][j-1][k])/delY;
384c384
<                     grad_1          = (vvel_CC[i][j][k+1][m]    - vvel_CC[i][j][k][m])      /delZ;
---
>                     grad_1          = (vvel_CC[m][i][j][k+1]    - vvel_CC[m][i][j][k])      /delZ;
392c392
<                     grad_1          = (vvel_CC[i][j][k][m]      - vvel_CC[i][j][k-1][m])    /delZ;
---
>                     grad_1          = (vvel_CC[m][i][j][k]      - vvel_CC[m][i][j][k-1])    /delZ;
414,415c414,415
<     free_dvector( div_vel_FC,  1, N_CELL_FACES);
<     free_dvector(viscosity_FC, 1, N_CELL_FACES);
---
>     free_dvector_nr( div_vel_FC,  1, N_CELL_FACES);
>     free_dvector_nr(viscosity_FC, 1, N_CELL_FACES);
518,519c518,519
<     viscosity_FC    = dvector(1, N_CELL_FACES);
<     div_vel_FC      = dvector(1, N_CELL_FACES);
---
>     viscosity_FC    = dvector_nr(1, N_CELL_FACES);
>     div_vel_FC      = dvector_nr(1, N_CELL_FACES);
564c564
<                     grad_2          = (wvel_CC[i][j][k][m]      - wvel_CC[i-1][j][k][m])    /delX;
---
>                     grad_2          = (wvel_CC[m][i][j][k]      - wvel_CC[m][i-1][j][k])    /delX;
572c572
<                     grad_2          = (wvel_CC[i+1][j][k][m]    - wvel_CC[i][j][k][m])      /delX;
---
>                     grad_2          = (wvel_CC[m][i+1][j][k]    - wvel_CC[m][i][j][k])      /delX;
580c580
<                     grad_2          = (wvel_CC[i][j+1][k][m]    - wvel_CC[i][j][k][m])      /delY;
---
>                     grad_2          = (wvel_CC[m][i][j+1][k]    - wvel_CC[m][i][j][k])      /delY;
589c589
<                     grad_2          = (wvel_CC[i][j][k][m]      - wvel_CC[i][j][k-1][m])     /delY;
---
>                     grad_2          = (wvel_CC[m][i][j][k]      - wvel_CC[m][i][j][k-1])     /delY;
599c599
<                     term1           = 2.0       * viscosity_FC[FRONT] * (wvel_CC[i][j][k+1][m] - wvel_CC[i][j][k][m])/delZ;
---
>                     term1           = 2.0       * viscosity_FC[FRONT] * (wvel_CC[m][i][j][k+1] - wvel_CC[m][i][j][k])/delZ;
607c607
<                     term1           = 2.0       * viscosity_FC[BACK] * (wvel_CC[i][j][k][m] - wvel_CC[i][j][k-1][m])/delZ;
---
>                     term1           = 2.0       * viscosity_FC[BACK] * (wvel_CC[m][i][j][k] - wvel_CC[m][i][j][k-1])/delZ;
628,629c628,629
<     free_dvector( div_vel_FC,  1, N_CELL_FACES);
<     free_dvector(viscosity_FC, 1, N_CELL_FACES);
---
>     free_dvector_nr( div_vel_FC,  1, N_CELL_FACES);
>     free_dvector_nr(viscosity_FC, 1, N_CELL_FACES);
Common subdirectories: ICE_SM/Tests/Advection2D and ICE_SM_TEST//Tests/Advection2D
Common subdirectories: ICE_SM/Tests/BlastWave and ICE_SM_TEST//Tests/BlastWave
Common subdirectories: ICE_SM/Tests/Inviscid_Burgers and ICE_SM_TEST//Tests/Inviscid_Burgers
Common subdirectories: ICE_SM/Tests/MM and ICE_SM_TEST//Tests/MM
Common subdirectories: ICE_SM/Tests/NIST_fire and ICE_SM_TEST//Tests/NIST_fire
Common subdirectories: ICE_SM/Tests/Riemann and ICE_SM_TEST//Tests/Riemann
Common subdirectories: ICE_SM/Tests/Stagnation_pf and ICE_SM_TEST//Tests/Stagnation_pf
Common subdirectories: ICE_SM/Tests/Test and ICE_SM_TEST//Tests/Test
diff -r ICE_SM/Tests/Advection2D/Makefile ICE_SM_TEST//Tests/Advection2D/Makefile
13c13
< MEMORY_LIB      = Malloc_NAN
---
> MEMORY_LIB      = malloc_cv
18c18
< ICE_DIR         = /usr/people/harman/Csafe/ICE_SM
---
> ICE_DIR         = /usr/people/harman/Csafe/ICE_SM_TEST
Common subdirectories: ICE_SM/Tests/Advection2D/Results_org and ICE_SM_TEST//Tests/Advection2D/Results_org
diff -r ICE_SM/Tests/Advection2D/debugcode.i ICE_SM_TEST//Tests/Advection2D/debugcode.i
37c37
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
49c49
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
61c61
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
73c73
<          free_vector(    data_array1,       1, max_len);                              
---
>          free_vector_nr(    data_array1,       1, max_len);                              
170c170
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
200c200
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
213c213
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
226c226
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
239c239
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
262c262
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
274c274
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
286c286
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
298c298
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
363,364c363,364
<         free_vector(    data_array1,       1, max_len);
<         free_vector(    data_array2,       1, max_len);                     
---
>         free_vector_nr(    data_array1,       1, max_len);
>         free_vector_nr(    data_array2,       1, max_len);                     
415c415
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
428c428
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
475c475
<         free_vector(data_array1, 1, max_len);
---
>         free_vector_nr(data_array1, 1, max_len);
514c514
<     free_vector(data_array1, 1, max_len);
---
>     free_vector_nr(data_array1, 1, max_len);
524c524
<    free_vector(data_array1, 1, max_len);
---
>    free_vector_nr(data_array1, 1, max_len);
564c564
<     free_vector(data_array1, 1, max_len);
---
>     free_vector_nr(data_array1, 1, max_len);
574c574
<    free_vector(data_array1, 1, max_len);
---
>    free_vector_nr(data_array1, 1, max_len);
612c612
<     free_vector(data_array1, 1, max_len);
---
>     free_vector_nr(data_array1, 1, max_len);
622c622
<    free_vector(data_array1, 1, max_len);
---
>    free_vector_nr(data_array1, 1, max_len);
692c692
<     free_vector(data_array1, 1, max_len);  
---
>     free_vector_nr(data_array1, 1, max_len);  
727c727
<         free_vector(data_array1, 1, max_len);
---
>         free_vector_nr(data_array1, 1, max_len);
739c739
<         free_vector(data_array1, 1, max_len);
---
>         free_vector_nr(data_array1, 1, max_len);
783c783
<         free_vector(data_array1, 1, max_len);
---
>         free_vector_nr(data_array1, 1, max_len);
795c795
<         free_vector(data_array1, 1, max_len);
---
>         free_vector_nr(data_array1, 1, max_len);
807c807
<         free_vector(data_array1, 1, max_len);
---
>         free_vector_nr(data_array1, 1, max_len);
891c891
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
902c902
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
913c913
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
924c924
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
973c973
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
986c986
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1029c1029
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1096c1096
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1178c1178
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1188c1188
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1198c1198
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1208c1208
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1342c1342
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1351c1351
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1360c1360
<         free_vector(    data_array1,       1, max_len);  
---
>         free_vector_nr(    data_array1,       1, max_len);  
1369c1369
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
1383c1383
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1392c1392
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1401c1401
<         free_vector(    data_array1,       1, max_len);          
---
>         free_vector_nr(    data_array1,       1, max_len);          
1458c1458
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1469c1469
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1480c1480
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1666c1666
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1678c1678
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
Only in ICE_SM_TEST//Tests/Advection2D: multifile_edit_orgs
diff -r ICE_SM/Tests/Advection2D/overide_initial_conds.i ICE_SM_TEST//Tests/Advection2D/overide_initial_conds.i
12c12
<                    Temp_CC[i][j][k][m]   = 1.0;                           
---
>                    Temp_CC[m][i][j][k]   = 1.0;                           
19c19
<                    Temp_CC[i][j][k][m]   = 2.0;
---
>                    Temp_CC[m][i][j][k]   = 2.0;
25c25
<                    rho_CC[i][j][k][m]   = 2.0;
---
>                    rho_CC[m][i][j][k]   = 2.0;
30c30
<                    rho_CC[i][j][k][m]   = 2.0;
---
>                    rho_CC[m][i][j][k]   = 2.0;
34c34
<                    rho_CC[i][j][k][m]   = 2.0;
---
>                    rho_CC[m][i][j][k]   = 2.0;
diff -r ICE_SM/Tests/Advection2D/switches.h ICE_SM_TEST//Tests/Advection2D/switches.h
90c90
< #define switchDebug_main                                1     /* main program                             */
---
> #define switchDebug_main                                0     /* main program                             */
120c120
< #define switchDebug_compute_face_centered_velocities    1     /* Face-centered velocities                 */
---
> #define switchDebug_compute_face_centered_velocities    0     /* Face-centered velocities                 */
152c152
< #define switchDebug_Advect_q                            1     /* plotting inside of the functin Advect_q   */
---
> #define switchDebug_Advect_q                            0     /* plotting inside of the functin Advect_q   */
diff -r ICE_SM/Tests/BlastWave/Makefile ICE_SM_TEST//Tests/BlastWave/Makefile
18c18
< ICE_DIR         = /usr/people/harman/Csafe/ICE_SM
---
> ICE_DIR         = /usr/people/harman/Csafe/ICE_SM_TEST
diff -r ICE_SM/Tests/BlastWave/debugcode.i ICE_SM_TEST//Tests/BlastWave/debugcode.i
45c45
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
57c57
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
70c70
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
83c83
<          free_vector(    data_array1,       1, max_len);                              
---
>          free_vector_nr(    data_array1,       1, max_len);                              
182c182
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
196c196
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
209c209
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
222c222
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
244c244
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
257c257
<          free_vector(    data_array1,       1, max_len);    
---
>          free_vector_nr(    data_array1,       1, max_len);    
270c270
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
283c283
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
316c316
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
330c330
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
346c346
<         data_array2     = vector(1, X_MAX_LIM);
---
>         data_array2     = vector_nr(1, X_MAX_LIM);
362,363c362,363
<          free_vector(    data_array1,       1, max_len);    
<          free_vector(    data_array2,       1, X_MAX_LIM);
---
>          free_vector_nr(    data_array1,       1, max_len);    
>          free_vector_nr(    data_array2,       1, X_MAX_LIM);
367c367
<         data_array2     = vector(1, X_MAX_LIM);
---
>         data_array2     = vector_nr(1, X_MAX_LIM);
382,383c382,383
<          free_vector(    data_array1,       1, max_len);
<          free_vector(    data_array2,       1, X_MAX_LIM);                                
---
>          free_vector_nr(    data_array1,       1, max_len);
>          free_vector_nr(    data_array2,       1, X_MAX_LIM);                                
387c387
<         data_array2     = vector(1, X_MAX_LIM);
---
>         data_array2     = vector_nr(1, X_MAX_LIM);
402,403c402,403
<          free_vector(    data_array1,       1, max_len);
<          free_vector(    data_array2,       1, X_MAX_LIM);
---
>          free_vector_nr(    data_array1,       1, max_len);
>          free_vector_nr(    data_array2,       1, X_MAX_LIM);
407c407
<         data_array2     = vector(1, X_MAX_LIM);
---
>         data_array2     = vector_nr(1, X_MAX_LIM);
422,423c422,423
<          free_vector(    data_array1,       1, max_len);
<          free_vector(    data_array2,       1, X_MAX_LIM);
---
>          free_vector_nr(    data_array1,       1, max_len);
>          free_vector_nr(    data_array2,       1, X_MAX_LIM);
456,457c456,457
<         free_vector(    data_array1,       1, max_len);
<         free_vector(    data_array2,       1, max_len);           
---
>         free_vector_nr(    data_array1,       1, max_len);
>         free_vector_nr(    data_array2,       1, max_len);           
509c509
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
526c526
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
856c856
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
868c868
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
880c880
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
892c892
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
957c957
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
969c969
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1062c1062
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1073c1073
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1115c1115
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1127c1127
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1165c1165
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1175c1175
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1185c1185
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1195c1195
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1332c1332
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1341c1341
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1350c1350
<         free_vector(    data_array1,       1, max_len);  
---
>         free_vector_nr(    data_array1,       1, max_len);  
1359c1359
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
1373c1373
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1382c1382
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1391c1391
<         free_vector(    data_array1,       1, max_len);          
---
>         free_vector_nr(    data_array1,       1, max_len);          
1444c1444
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1455c1455
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1466c1466
<         free_vector(    data_array1,       1, max_len); */
---
>         free_vector_nr(    data_array1,       1, max_len); */
diff -r ICE_SM/Tests/BlastWave/overides.c ICE_SM_TEST//Tests/BlastWave/overides.c
272c272
<  data_array2    = vector(1, X_MAX_LIM);        /* needed by debug.i        */
---
>  data_array2    = vector_nr(1, X_MAX_LIM);        /* needed by debug.i        */
793c793
<     free_vector(    data_array2,       1, X_MAX_LIM);  /* NEEDED BY DEBUG.I*/  
---
>     free_vector_nr(    data_array2,       1, X_MAX_LIM);  /* NEEDED BY DEBUG.I*/  
diff -r ICE_SM/Tests/BlastWave/overides.c_org ICE_SM_TEST//Tests/BlastWave/overides.c_org
96a97
>                                         /* delt_limits[3]   = delt_initial  */
134c135
<             ****total_eng_CC,           /* Total energy cell-centered       */  
---
>             ****total_eng_CC,           /* Total energy cell-centered       */
136c137
<                                         /* velocity that lives at CC        */                
---
>                                         /* velocity that lives at CC        */    
228c229
<     stat = putenv("PGPLOT_DIR=/usr/people/harman/Csafe/Uintah_cfd_code/Libraries");
---
>     stat = putenv("PGPLOT_DIR=/usr/people/harman/Csafe/ICE_SM/Libraries");
260,261c261,262
< *                       MEMORY SECTION
< *  Allocate memory for the arrays                                          
---
> *    M  E  M  O  R  Y     S  E  C  T  I  O  N 
> *   - Allocate memory for the arrays                                          
271c272
<  data_array2    = vector(1, X_MAX_LIM);        /* needed by debug.i        */
---
>  data_array2    = vector_nr(1, X_MAX_LIM);        /* needed by debug.i        */
279,281c280,287
< *                       PROBLEM INITIALIZATION SECTION
< *   Initializing routines                                                  
< *   First read the problem input then test the inputs.                     
---
> *  P  R  O  B  L  E  M     I  N  I  T  I  A  L  I  Z  A  T  I  O  N  
> *  - read input file
> *   - test the input variables
> *   - Equate the address of the face centered variables
> *   - Generate a grid
> *   - zero all of the face-centered arrays
> *   
> *                  
312,317c318,323
< /*__________________________________
< * Now make sure that the face centered
< * values know about each other.
< * for example 
< * [i][j][k][RIGHT][m] = [i-1][j][k][LEFT][m]
< *___________________________________*/  
---
>     /*__________________________________
>     * Now make sure that the face centered
>     * values know about each other.
>     * for example 
>     * [i][j][k][RIGHT][m] = [i-1][j][k][LEFT][m]
>     *___________________________________*/  
333a340
>                         
348,373c355,374
<     /*  audit();  */                    /* Steve Parkers memory tool    */   
< /*______________________________________________________________________
< *  TESTING: HARDWIRE SOME OF THE INPUTS
< *       HARDWIRE FOR NOW
< *   Comment this out 
< *_______________________________________________________________________*/
< #if switchOveride_Initial_Conditions                               
<   #include "overide_initial_conds.i"
<   
<  /* initial condition for blast wave problem            */ 
<  
< 
< #endif 
< /*______________________________________________________________________
< *   Plot the inputs (MUST HARDWIRE WHAT YOU WANT TO VIEW)
< *   To keep the code clean I moved the code to another file
< *_______________________________________________________________________*/
< #if switchDebug_main_input
<     #define switchInclude_main_1 1
<     #include "debugcode.i"
<     #undef switchInclude_main_1
< #endif     
< /*__________________________________
< *   For the first time through
< *   set some variables
< *___________________________________*/
---
>     /*__________________________________
>     *   overide the initial conditions
>     *___________________________________*/
>     #if switchOveride_Initial_Conditions                               
>       #include "overide_initial_conds.i"
>     #endif 
>     
>     /*__________________________________
>     *  If desired plot the inputs
>     *___________________________________*/
>     #if switchDebug_main_input
>         #define switchInclude_main_1 1
>         #include "debugcode.i"
>         #undef switchInclude_main_1
>     #endif 
>         
>     /*__________________________________
>     *   For the first time through
>     *   set some variables
>     *___________________________________*/
376a378,380
>     
>     
>     
378c382
< *                        MAIN ADVANCE LOOP
---
> *   M  A  I  N     A  D  V  A  N  C  E     L  O  O  P 
406,407c410
< 
< 
---
>        
440,445c443,448
<  /*__________________________________
<  *  STEP 1
<  *  Use the equation of state to get
<  *  P at the cell center
<  *___________________________________*/
< #if switch_step1_OnOff
---
>      /*__________________________________
>      *   S  T  E  P     1 
>      *  Use the equation of state to get
>      *  P at the cell center
>      *___________________________________*/
>     #if switch_step1_OnOff
458c461
< #endif
---
>     #endif
460,471c463,474
< /*__________________________________
< *   STEP 2
< *   Use Euler's equation thingy to solve
< *   for the n+1 Lagrangian press (CC)
< *   and the n+1 face centered fluxing
< *   velocity
< *___________________________________*/ 
<  /*__________________________________
< *   Take (*)vel_CC and interpolate it to the 
< *   face-center.  Advection operator needs
< *   uvel_FC and so does the pressure solver
< *___________________________________*/ 
---
>     /*__________________________________
>     *    S  T  E  P     2 
>     *   Use Euler's equation thingy to solve
>     *   for the n+1 Lagrangian press (CC)
>     *   and the n+1 face centered fluxing
>     *   velocity
>     *___________________________________*/ 
>      /*__________________________________
>     *   Take (*)vel_CC and interpolate it to the 
>     *   face-center.  Advection operator needs
>     *   uvel_FC and so does the pressure solver
>     *___________________________________*/ 
484a488
>                         
492a497,506
>         #if switch_step2_OnOff
>         explicit_delPress
>                  (
>                             xLoLimit,       yLoLimit,       zLoLimit,
>                             xHiLimit,       yHiLimit,       zHiLimit,
>                             delX,           delY,           delZ,
>                             div_velFC_CC,
>                             delPress_CC,    press_CC,
>                             rho_CC,         delt,           speedSound,
>                             nMaterials );
494c508,526
< #if switch_step2_OnOff                        
---
>         update_CC_physical_boundary_conditions(
>                             xLoLimit,       yLoLimit,       zLoLimit,
>                             xHiLimit,       yHiLimit,       zHiLimit,
>                             delX,           delY,           delZ,
>                             BC_types,       BC_float_or_fixed,
>                             BC_Values,
>                             nMaterials,     1,
>                             delPress_CC,    DELPRESS);
>  
>         /*`==========TESTING==========*/
>         #if switch_explicit_implicit
>             compute_delta_Press_Using_PCGMG(
>                             xLoLimit,       yLoLimit,       zLoLimit,
>                             xHiLimit,       yHiLimit,       zHiLimit,
>                             delX,           delY,           delZ,
>                             delt,           rho_CC,         speedSound,
>                             uvel_FC,        vvel_FC,        wvel_FC,
>                             delPress_CC,    press_CC,       BC_types,
>                             nMaterials ) ;
496,556c528,558
<     explicit_delPress
<              (  
<                         xLoLimit,       yLoLimit,       zLoLimit,
<                         xHiLimit,       yHiLimit,       zHiLimit,
<                         delX,           delY,           delZ,
<                         div_velFC_CC,
<                         delPress_CC,    press_CC,
<                         rho_CC,         delt,           speedSound,
<                         nMaterials );
<                 
<     update_CC_physical_boundary_conditions( 
<                         xLoLimit,       yLoLimit,       zLoLimit,             
<                         xHiLimit,       yHiLimit,       zHiLimit,             
<                         delX,           delY,           delZ,
<                         BC_types,       BC_float_or_fixed,
<                         BC_Values, 
<                         nMaterials,     1,                 
<                         delPress_CC,    DELPRESS);
<                                             
<     /*`==========TESTING==========*/                                           
<     #if switch_explicit_implicit                        
<         compute_delta_Press_Using_PCGMG(
<                         xLoLimit,       yLoLimit,       zLoLimit,
<                         xHiLimit,       yHiLimit,       zHiLimit,
<                         delX,           delY,           delZ,
<                         delt,           rho_CC,         speedSound,     
<                         uvel_FC,        vvel_FC,        wvel_FC,
<                         delPress_CC,    press_CC,       BC_types,
<                         nMaterials ) ;  
< 
<                             
<     /*__________________________________
<     *   Now update the face centered velocity
<     *   using the linear approximation to the
<     *   time advance pressure
<     *___________________________________*/
<         fprintf(stderr, "I've computed delpress_CC\n");
<        compute_face_centered_velocities( 
<                         xLoLimit,       yLoLimit,       zLoLimit,
<                         xHiLimit,       yHiLimit,       zHiLimit,
<                         delX,           delY,           delZ,
<                         delt, 
<                         BC_types,       BC_float_or_fixed,
<                         BC_Values,
<                         rho_CC,         grav,           press_CC,
<                         uvel_CC,        vvel_CC,        wvel_CC,
<                         uvel_FC,        vvel_FC,        wvel_FC,
<                         nMaterials );
<     
<                   
<         update_CC_FC_physical_boundary_conditions( 
<                         xLoLimit,       yLoLimit,       zLoLimit,             
<                         xHiLimit,       yHiLimit,       zHiLimit,             
<                         delX,           delY,           delZ,
<                         BC_types,       BC_float_or_fixed,
<                         BC_Values, 
<                         nMaterials,     1,                 
<                         press_CC,       PRESS,          press_FC);               
<     #endif  
<     /*==========TESTING==========`*/                      
< 
---
>  
>         /*__________________________________
>         *   Now update the face centered velocity
>         *   using the linear approximation to the
>         *   time advance pressure
>         *___________________________________*/
>             fprintf(stderr, "I've computed delpress_CC\n");
>            compute_face_centered_velocities(
>                             xLoLimit,       yLoLimit,       zLoLimit,
>                             xHiLimit,       yHiLimit,       zHiLimit,
>                             delX,           delY,           delZ,
>                             delt,
>                             BC_types,       BC_float_or_fixed,
>                             BC_Values,
>                             rho_CC,         grav,           press_CC,
>                             uvel_CC,        vvel_CC,        wvel_CC,
>                             uvel_FC,        vvel_FC,        wvel_FC,
>                             nMaterials );
>  
>  
>             update_CC_FC_physical_boundary_conditions(
>                             xLoLimit,       yLoLimit,       zLoLimit,
>                             xHiLimit,       yHiLimit,       zHiLimit,
>                             delX,           delY,           delZ,
>                             BC_types,       BC_float_or_fixed,
>                             BC_Values,
>                             nMaterials,     1,
>                             press_CC,       PRESS,          press_FC);
>         #endif
>         /*==========TESTING==========`*/
> 
566,567d567
<                         
<                             
569c569
<     /* audit(); */ 
---
>  
572,578c572,578
< /* ______________________________   
< *   STEP 3 
< *   Compute the face-centered pressure
< *   using the "continuity of acceleration"
< *   principle                     
< * ______________________________   */
< #if switch_step3_OnOff                                  
---
>     /* ______________________________   
>     *    S  T  E  P     3    
>     *   Compute the face-centered pressure
>     *   using the "continuity of acceleration"
>     *   principle                     
>     * ______________________________   */
>     #if switch_step3_OnOff                                  
581a582,583
>                         delX,           delY,           delZ,
>                         BC_types,       BC_float_or_fixed, BC_Values,
584,587c586,589
< #endif
<     /*__________________________________
<     *
<     *___________________________________*/
---
>     #endif
>         /*__________________________________
>         *
>         *___________________________________*/
599c601
< *   STEP 4                          
---
> *    S  T  E  P     4                           
635c637
< #endif
---
>     #endif
638,645c640,647
< /*__________________________________
< *   STEP 5                     
< *   Compute Lagrangian values for the volume 
< *   mass, momentum and energy.
< *   Lagrangian values are the sum of the time n
< *   values and the sources computed in 4
< *___________________________________*/
< #if switch_step5_OnOff 
---
>     /*__________________________________
>     *    S  T  E  P     5                        
>     *   Compute Lagrangian values for the volume 
>     *   mass, momentum and energy.
>     *   Lagrangian values are the sum of the time n
>     *   values and the sources computed in 4
>     *___________________________________*/
>     #if switch_step5_OnOff 
675c677
< #endif  
---
>     #endif  
677,691c679,693
< /*_________________________________   
< *   STEP 6                           
< *   Compute the advection of mass,
< *   momentum and energy.  These
< *   quantities are advected using the face
< *   centered velocities velocities from 2
< *                  
< *   STEP 7
< *   Compute the time advanced values for
< *   mass, momentum and energy.  "Time advanced"
< *   means the sum of the "Lagrangian" values,
< *   found in 5 and the advection contribution
< *   from 6                      
< *______________________________ */  
< #if (switch_step7_OnOff== 1 || switch_step6_OnOff == 1)
---
>     /*_________________________________   
>     *    S  T  E  P     6                            
>     *   Compute the advection of mass,
>     *   momentum and energy.  These
>     *   quantities are advected using the face
>     *   centered velocities velocities from 2
>     *                  
>     *    S  T  E  P     7 
>     *   Compute the time advanced values for
>     *   mass, momentum and energy.  "Time advanced"
>     *   means the sum of the "Lagrangian" values,
>     *   found in 5 and the advection contribution
>     *   from 6                      
>     *______________________________ */  
>     #if (switch_step7_OnOff== 1 || switch_step6_OnOff == 1)
718,719d719
<     
<      /* audit(); */                     /* Steve Parkers memory tool        */
721,723c721,723
< /*__________________________________
< *   Write to tecplot files
< *___________________________________*/     
---
>     /*__________________________________
>     *    T  E  C  P  L  O  T  
>     *___________________________________*/     
725c725
< #if tecplot
---
>     #if tecplot
748,752c748,754
< #endif 
< /*______________________________________________________________________
< *   DEBUGGING SECTION
< *_______________________________________________________________________*/
< #if switchDebug_main
---
>     #endif 
> 
> 
>     /*__________________________________
>     *  P  L  O  T  T  I  N  G     S  E  C  T  I  O  N 
>     *___________________________________*/
>     #if switchDebug_main
757,760c759
<          #undef switchInclude_main
<          
<       /*   fprintf(stderr,"\npress return to continue\n"); 
<         getchar();  */ 
---
>          #undef switchInclude_main 
762c761
< #endif
---
>     #endif
770,780c769,773
< /*______________________________________________________________________
< *   Now advance in time
< *_______________________________________________________________________*/
<       
< /*         find_delta_time_based_on_FC_vel(
<                         xLoLimit,        yLoLimit,      zLoLimit,
<                         xHiLimit,        yHiLimit,      zHiLimit,
<                         &delt,           delt_limits,
<                         delX,            delY,          delZ,
<                         uvel_FC,         vvel_FC,       wvel_FC,
<                         speedSound,      CFL,           nMaterials ); */
---
>          
>          
>     /*__________________________________
>     *    A  D  V  A  N  C  E     I  N     T  I  M  E 
>     *___________________________________*/
795c788
< *  Free the memory  and Finalize petsc                                                  
---
> *   F  R  E  E     T  H  E     M  E  M  O  R  Y                                                     
Only in ICE_SM_TEST//Tests/BlastWave: overides.c_tmp
diff -r ICE_SM/Tests/Inviscid_Burgers/Makefile ICE_SM_TEST//Tests/Inviscid_Burgers/Makefile
18c18
< ICE_DIR         = /usr/people/harman/Csafe/ICE_SM
---
> ICE_DIR         = /usr/people/harman/Csafe/ICE_SM_TEST
Common subdirectories: ICE_SM/Tests/Inviscid_Burgers/Results_org and ICE_SM_TEST//Tests/Inviscid_Burgers/Results_org
diff -r ICE_SM/Tests/Inviscid_Burgers/debugcode.i ICE_SM_TEST//Tests/Inviscid_Burgers/debugcode.i
38c38
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
50c50
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
63c63
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
76c76
<          free_vector(    data_array1,       1, max_len);                              
---
>          free_vector_nr(    data_array1,       1, max_len);                              
166c166
<          free_vector(    data_array1,       1, max_len);  */
---
>          free_vector_nr(    data_array1,       1, max_len);  */
189c189
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
202c202
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
216c216
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
230c230
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
250c250
<          free_vector(    data_array1,       1, max_len);     
---
>          free_vector_nr(    data_array1,       1, max_len);     
263c263
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
317c317
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
334c334
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
664c664
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
676c676
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
688c688
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
700c700
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
765c765
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
777c777
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
870c870
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
881c881
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
923c923
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
935c935
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
973c973
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
983c983
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
993c993
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1003c1003
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1140c1140
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1149c1149
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1158c1158
<         free_vector(    data_array1,       1, max_len);  
---
>         free_vector_nr(    data_array1,       1, max_len);  
1167c1167
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
1181c1181
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1190c1190
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1199c1199
<         free_vector(    data_array1,       1, max_len);          
---
>         free_vector_nr(    data_array1,       1, max_len);          
1252c1252
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1263c1263
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1274c1274
<         free_vector(    data_array1,       1, max_len); */
---
>         free_vector_nr(    data_array1,       1, max_len); */
diff -r ICE_SM/Tests/Inviscid_Burgers/overide_initial_conds.i ICE_SM_TEST//Tests/Inviscid_Burgers/overide_initial_conds.i
30,32c30,32
<                 uvel_CC[i][j][k][m] = uL;
<                 rho_CC[i][j][k][m]  = 1.0;
<                 press_CC[i][j][k][m]= 1.0;
---
>                 uvel_CC[m][i][j][k] = uL;
>                 rho_CC[m][i][j][k]  = 1.0;
>                 press_CC[m][i][j][k]= 1.0;
38,40c38,40
<                     uvel_CC[i][j][k][m] = uR;
<                     rho_CC[i][j][k][m]  = 1.0;
<                     press_CC[i][j][k][m]= 1.0;
---
>                     uvel_CC[m][i][j][k] = uR;
>                     rho_CC[m][i][j][k]  = 1.0;
>                     press_CC[m][i][j][k]= 1.0;
51c51
<                uvel_CC[i][j][k][m]   = u0;  
---
>                uvel_CC[m][i][j][k]   = u0;  
54c54
<                     uvel_CC[i][j][k][m] = u0 + A * sin(M_PI*(x - L)/x0); 
---
>                     uvel_CC[m][i][j][k] = u0 + A * sin(M_PI*(x - L)/x0); 
74,75c74,75
<                  rho_CC[i][j][k][m]  = 1.0;
<                  press_CC[i][j][k][m]= 1.0;
---
>                  rho_CC[m][i][j][k]  = 1.0;
>                  press_CC[m][i][j][k]= 1.0;
78c78
<                  uvel_CC[i][j][k][m] = temp2; 
---
>                  uvel_CC[m][i][j][k] = temp2; 
84,86c84,86
<                     uvel_CC[i][j][k][m] = u1;
<                     rho_CC[i][j][k][m]  = 1.0;
<                     press_CC[i][j][k][m]= 1.0;
---
>                     uvel_CC[m][i][j][k] = u1;
>                     rho_CC[m][i][j][k]  = 1.0;
>                     press_CC[m][i][j][k]= 1.0;
94,96c94,96
<                     uvel_CC[i][j][k][m] = u2;
<                     rho_CC[i][j][k][m]  = 1.0;
<                     press_CC[i][j][k][m]= 1.0;
---
>                     uvel_CC[m][i][j][k] = u2;
>                     rho_CC[m][i][j][k]  = 1.0;
>                     press_CC[m][i][j][k]= 1.0;
110,112c110,112
<                 uvel_CC[i][j][k][m] = u1;
<                 rho_CC[i][j][k][m]  = 1.0;
<                 press_CC[i][j][k][m]= 1.0;
---
>                 uvel_CC[m][i][j][k] = u1;
>                 rho_CC[m][i][j][k]  = 1.0;
>                 press_CC[m][i][j][k]= 1.0;
118,120c118,120
<                     uvel_CC[i][j][k][m] = u2;
<                     rho_CC[i][j][k][m]  = 1.0;
<                     press_CC[i][j][k][m]= 1.0;
---
>                     uvel_CC[m][i][j][k] = u2;
>                     rho_CC[m][i][j][k]  = 1.0;
>                     press_CC[m][i][j][k]= 1.0;
130c130
<                 uvel_CC[i][j][k][m] = 0.0;
---
>                 uvel_CC[m][i][j][k] = 0.0;
136,138c136,138
<                     uvel_CC[i][j][k][m] = u1 * (x - (x0 - L))/L;
<                     rho_CC[i][j][k][m]  = 1.0;
<                     press_CC[i][j][k][m]= 1.0;
---
>                     uvel_CC[m][i][j][k] = u1 * (x - (x0 - L))/L;
>                     rho_CC[m][i][j][k]  = 1.0;
>                     press_CC[m][i][j][k]= 1.0;
145,147c145,147
<                     uvel_CC[i][j][k][m] = u1 * ( (x0 + L) - x )/L;
<                     rho_CC[i][j][k][m]  = 1.0;
<                     press_CC[i][j][k][m]= 1.0;
---
>                     uvel_CC[m][i][j][k] = u1 * ( (x0 + L) - x )/L;
>                     rho_CC[m][i][j][k]  = 1.0;
>                     press_CC[m][i][j][k]= 1.0;
diff -r ICE_SM/Tests/Inviscid_Burgers/overides.c ICE_SM_TEST//Tests/Inviscid_Burgers/overides.c
228c228
<  data_array2     = vector(1, X_MAX_LIM);        /* needed by debug.i        */
---
>  data_array2     = vector_nr(1, X_MAX_LIM);        /* needed by debug.i        */
768c768
<      free_vector(    data_array2,       1, X_MAX_LIM);  /* NEEDED BY DEBUG.I*/  
---
>      free_vector_nr(    data_array2,       1, X_MAX_LIM);  /* NEEDED BY DEBUG.I*/  
diff -r ICE_SM/Tests/Inviscid_Burgers/overides.c_org ICE_SM_TEST//Tests/Inviscid_Burgers/overides.c_org
205c205
<     stat = putenv("PGPLOT_DIR=/usr/people/harman/Csafe/Uintah_cfd_code/Libraries");
---
>     stat = putenv("PGPLOT_DIR=/usr/people/harman/Csafe/ICE_SM/Libraries");
228c228
<  data_array2     = vector(1, X_MAX_LIM);        /* needed by debug.i        */
---
>  data_array2     = vector_nr(1, X_MAX_LIM);        /* needed by debug.i        */
648d647
<                         uvel_CC,        vvel_CC,        wvel_CC,
Only in ICE_SM_TEST//Tests/Inviscid_Burgers: overides.c_tmp
Only in ICE_SM/Tests/MM: Eventually_trash
diff -r ICE_SM/Tests/MM/Makefile ICE_SM_TEST//Tests/MM/Makefile
18c18
< ICE_DIR         = /usr/people/harman/Csafe/ICE_SM
---
> ICE_DIR         = /usr/people/harman/Csafe/ICE_SM_TEST
diff -r ICE_SM/Tests/MM/debugcode.i ICE_SM_TEST//Tests/MM/debugcode.i
37c37
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
49c49
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
61c61
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
73c73
<          free_vector(    data_array1,       1, max_len);                              
---
>          free_vector_nr(    data_array1,       1, max_len);                              
170c170
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
200c200
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
213c213
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
226c226
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
239c239
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
261c261
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
273c273
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
285c285
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
297c297
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
362,363c362,363
<         free_vector(    data_array1,       1, max_len);
<         free_vector(    data_array2,       1, max_len);                     
---
>         free_vector_nr(    data_array1,       1, max_len);
>         free_vector_nr(    data_array2,       1, max_len);                     
411c411
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
424c424
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
882c882
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
893c893
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
904c904
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
915c915
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
964c964
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
977c977
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1021c1021
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1082c1082
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1158c1158
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1168c1168
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1178c1178
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1188c1188
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1320c1320
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1329c1329
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1338c1338
<         free_vector(    data_array1,       1, max_len);  
---
>         free_vector_nr(    data_array1,       1, max_len);  
1347c1347
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
1361c1361
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1370c1370
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1379c1379
<         free_vector(    data_array1,       1, max_len);          
---
>         free_vector_nr(    data_array1,       1, max_len);          
1436c1436
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1447c1447
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1458c1458
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1644c1644
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1656c1656
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
diff -r ICE_SM/Tests/MM/overide_initial_conds.i ICE_SM_TEST//Tests/MM/overide_initial_conds.i
13c13
<                        Temp_CC[i][j][k][m]   = 1.0;                           
---
>                        Temp_CC[m][i][j][k]   = 1.0;                           
20c20
<                        Temp_CC[i][j][k][m]   = 2.0;
---
>                        Temp_CC[m][i][j][k]   = 2.0;
26c26
<                        rho_CC[i][j][k][m]   = 2.0;
---
>                        rho_CC[m][i][j][k]   = 2.0;
31c31
<                        rho_CC[i][j][k][m]   = 2.0;
---
>                        rho_CC[m][i][j][k]   = 2.0;
35c35
<                        rho_CC[i][j][k][m]   = 2.0;
---
>                        rho_CC[m][i][j][k]   = 2.0;
diff -r ICE_SM/Tests/NIST_fire/Makefile ICE_SM_TEST//Tests/NIST_fire/Makefile
18c18
< ICE_DIR         = /usr/people/harman/Csafe/ICE_SM
---
> ICE_DIR         = /usr/people/harman/Csafe/ICE_SM_TEST
diff -r ICE_SM/Tests/NIST_fire/allocate_memory.i ICE_SM_TEST//Tests/NIST_fire/allocate_memory.i
5,10c5,10
<     t_inject_TE_parms= dvector(  1, 3);
<     t_inject_TE     = dvector(  1, N_THERMAL_ELEMENTS);
<     x_TE            = dvector(  1, N_THERMAL_ELEMENTS);
<     y_TE            = dvector(  1, N_THERMAL_ELEMENTS);
<     z_TE            = dvector(  1, N_THERMAL_ELEMENTS);
<     Q_TE            = dvector(  1, N_THERMAL_ELEMENTS);
---
>     t_inject_TE_parms= dvector_nr(  1, 3);
>     t_inject_TE     = dvector_nr(  1, N_THERMAL_ELEMENTS);
>     x_TE            = dvector_nr(  1, N_THERMAL_ELEMENTS);
>     y_TE            = dvector_nr(  1, N_THERMAL_ELEMENTS);
>     z_TE            = dvector_nr(  1, N_THERMAL_ELEMENTS);
>     Q_TE            = dvector_nr(  1, N_THERMAL_ELEMENTS);
13c13
<     scalar_TE       = dvector(  1, N_THERMAL_ELEMENTS);
---
>     scalar_TE       = dvector_nr(  1, N_THERMAL_ELEMENTS);
15c15
<     index_inject_TE = ivector(  1, 7);
---
>     index_inject_TE = ivector_nr(  1, 7);
23,28c23,28
<     uvel_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     vvel_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     wvel_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     rho_CC          = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     press_CC        = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     delPress_CC     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     uvel_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     vvel_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     wvel_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     rho_CC          = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     press_CC        = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     delPress_CC     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
30,35c30,35
<     Temp_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     viscosity_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     thermalCond_CC  = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     cv_CC           = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     R               = dvector(1, N_MATERIAL);
<     gamma           = dvector(1, N_MATERIAL);
---
>     Temp_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     viscosity_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     thermalCond_CC  = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     cv_CC           = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     R               = dvector_nr(1, N_MATERIAL);
>     gamma           = dvector_nr(1, N_MATERIAL);
37,43c37,43
<     mass_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     xmom_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     ymom_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     zmom_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     int_eng_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     total_eng_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     div_velFC_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     mass_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     xmom_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     ymom_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     zmom_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     int_eng_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     total_eng_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     div_velFC_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
47,51c47,51
<     scalar1_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     scalar2_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     scalar3_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     grav            = dvector(1, 3);
<     speedSound      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     scalar1_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     scalar2_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     scalar3_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     grav            = dvector_nr(1, 3);
>     speedSound      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
55,58c55,58
<     xmom_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     ymom_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     zmom_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);    
<     int_eng_L_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);    
---
>     xmom_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     ymom_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     zmom_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);    
>     int_eng_L_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);    
60,64c60,64
<     press_L_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     mass_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     rho_L_CC        = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     Temp_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     Vol_L_CC        = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     press_L_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     mass_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     rho_L_CC        = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     Temp_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     Vol_L_CC        = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
66,70c66,70
<     mass_source     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     xmom_source     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     ymom_source     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     zmom_source     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     int_eng_source  = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     mass_source     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     xmom_source     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     ymom_source     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     zmom_source     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     int_eng_source  = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
79,80c79,80
<     t_output_vars   = dvector(  1,  3);
<     delt_limits     = dvector(  1,  3);    
---
>     t_output_vars   = dvector_nr(  1,  3);
>     delt_limits     = dvector_nr(  1,  3);    
Only in ICE_SM_TEST//Tests/NIST_fire: allocate_memory.i_org
diff -r ICE_SM/Tests/NIST_fire/debugcode.i ICE_SM_TEST//Tests/NIST_fire/debugcode.i
37c37
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
49c49
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
61c61
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
73c73
<          free_vector(    data_array1,       1, max_len);                              
---
>          free_vector_nr(    data_array1,       1, max_len);                              
172c172
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
185c185
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
198c198
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
211c211
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
234c234
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
246c246
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
258c258
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
270c270
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
339,340c339,340
<         free_vector(    data_array1,       1, max_len);
<         free_vector(    data_array2,       1, max_len);                     
---
>         free_vector_nr(    data_array1,       1, max_len);
>         free_vector_nr(    data_array2,       1, max_len);                     
391c391
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
404c404
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
867c867
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
878c878
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
889c889
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
900c900
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
949c949
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
962c962
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1005c1005
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1072c1072
<             free_vector(    data_array1,       1, max_len);
---
>             free_vector_nr(    data_array1,       1, max_len);
1154c1154
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1164c1164
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1174c1174
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1184c1184
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1318c1318
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1327c1327
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1336c1336
<         free_vector(    data_array1,       1, max_len);  
---
>         free_vector_nr(    data_array1,       1, max_len);  
1345c1345
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
1359c1359
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1368c1368
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1377c1377
<         free_vector(    data_array1,       1, max_len);          
---
>         free_vector_nr(    data_array1,       1, max_len);          
1434c1434
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1445c1445
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1456c1456
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1642c1642
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1654c1654
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
diff -r ICE_SM/Tests/NIST_fire/energy.c ICE_SM_TEST//Tests/NIST_fire/energy.c
120c120
<                     int_eng_source_tmp          =   -delt * press_CC[i][j][k][m] * div_velFC_CC[i][j][k][m];
---
>                     int_eng_source_tmp          =   -delt * press_CC[m][i][j][k] * div_velFC_CC[m][i][j][k];
126c126
<                     int_eng_source[i][j][k][m]  =   switch_eng * int_eng_source_tmp;
---
>                     int_eng_source[m][i][j][k]  =   switch_eng * int_eng_source_tmp;
152,157c152,157
<     QUITE_FULLWARN(delPress_CC[0][0][0][1]);                  
<     QUITE_FULLWARN(mass_CC[0][0][0][1]);    QUITE_FULLWARN(speedSound[0][0][0][1]);
<     QUITE_FULLWARN(rho_CC[0][0][0][1]);     QUITE_FULLWARN(Temp_CC[0][0][0][1]);
<     QUITE_FULLWARN(cv_CC[0][0][0][1]);      QUITE_FULLWARN(grav[1]);
<     QUITE_FULLWARN(uvel_CC[0][0][0][1]);    QUITE_FULLWARN(vvel_CC[0][0][0][1]);
<     QUITE_FULLWARN(wvel_CC[0][0][0][1]);    QUITE_FULLWARN(nMaterials);
---
>     QUITE_FULLWARN(delPress_CC[1][0][0][0]);                  
>     QUITE_FULLWARN(mass_CC[1][0][0][0]);    QUITE_FULLWARN(speedSound[1][0][0][0]);
>     QUITE_FULLWARN(rho_CC[1][0][0][0]);     QUITE_FULLWARN(Temp_CC[1][0][0][0]);
>     QUITE_FULLWARN(cv_CC[1][0][0][0]);      QUITE_FULLWARN(grav[1]);
>     QUITE_FULLWARN(uvel_CC[1][0][0][0]);    QUITE_FULLWARN(vvel_CC[1][0][0][0]);
>     QUITE_FULLWARN(wvel_CC[1][0][0][0]);    QUITE_FULLWARN(nMaterials);
diff -r ICE_SM/Tests/NIST_fire/free_memory.i ICE_SM_TEST//Tests/NIST_fire/free_memory.i
5,10c5,10
<    free_dvector(  t_inject_TE,     1, 3);
<    free_dvector(  t_inject_TE_parms,1, N_THERMAL_ELEMENTS);
<    free_dvector(  x_TE,            1, N_THERMAL_ELEMENTS);
<    free_dvector(  y_TE,            1, N_THERMAL_ELEMENTS);
<    free_dvector(  z_TE,            1, N_THERMAL_ELEMENTS);
<    free_dvector(  Q_TE,            1, N_THERMAL_ELEMENTS);
---
>    free_dvector_nr(  t_inject_TE,     1, 3);
>    free_dvector_nr(  t_inject_TE_parms,1, N_THERMAL_ELEMENTS);
>    free_dvector_nr(  x_TE,            1, N_THERMAL_ELEMENTS);
>    free_dvector_nr(  y_TE,            1, N_THERMAL_ELEMENTS);
>    free_dvector_nr(  z_TE,            1, N_THERMAL_ELEMENTS);
>    free_dvector_nr(  Q_TE,            1, N_THERMAL_ELEMENTS);
13c13
<    free_dvector(  scalar_TE,       1, N_THERMAL_ELEMENTS);
---
>    free_dvector_nr(  scalar_TE,       1, N_THERMAL_ELEMENTS);
15c15
<    free_ivector(  index_inject_TE, 1, 7);
---
>    free_ivector_nr(  index_inject_TE, 1, 7);
22,27c22,27
<    free_darray_4d( uvel_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( vvel_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( wvel_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( rho_CC,          0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( press_CC,        0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( delPress_CC,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( uvel_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( vvel_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( wvel_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( rho_CC,          1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( press_CC,        1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( delPress_CC,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
29,41c29,41
<    free_darray_4d( Temp_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( viscosity_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( thermalCond_CC,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( cv_CC,           0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_dvector( R,                  1, N_MATERIAL);
<    free_dvector( gamma,                  1, N_MATERIAL);
<    free_darray_4d( mass_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( xmom_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( ymom_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( zmom_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( int_eng_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( total_eng_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( div_velFC_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( Temp_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( viscosity_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( thermalCond_CC,  1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( cv_CC,           1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_dvector_nr( R,                  1, N_MATERIAL);
>    free_dvector_nr( gamma,                  1, N_MATERIAL);
>    free_darray_4d( mass_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( xmom_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( ymom_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( zmom_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( int_eng_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( total_eng_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( div_velFC_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
44,48c44,48
<    free_darray_4d( scalar1_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( scalar2_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( scalar3_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_dvector( grav,              1, 3);
<    free_darray_4d( speedSound,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( scalar1_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( scalar2_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( scalar3_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_dvector_nr( grav,              1, 3);
>    free_darray_4d( speedSound,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
51,54c51,54
<    free_darray_4d( xmom_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( ymom_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( zmom_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( int_eng_L_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( xmom_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( ymom_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( zmom_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( int_eng_L_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
57,61c57,61
<    free_darray_4d( press_L_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( mass_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( rho_L_CC,        0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( Temp_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( Vol_L_CC,        0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( press_L_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( mass_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( rho_L_CC,        1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( Temp_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( Vol_L_CC,        1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
63,67c63,67
<    free_darray_4d( mass_source,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
<    free_darray_4d( xmom_source,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
<    free_darray_4d( ymom_source,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
<    free_darray_4d( zmom_source,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
<    free_darray_4d( int_eng_source,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
---
>    free_darray_4d( mass_source,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( xmom_source,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( ymom_source,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( zmom_source,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( int_eng_source,  1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
77,78c77,78
<    free_dvector(t_output_vars,       1, 3);
<    free_dvector(delt_limits,         1, 3);   
---
>    free_dvector_nr(t_output_vars,       1, 3);
>    free_dvector_nr(delt_limits,         1, 3);   
Only in ICE_SM_TEST//Tests/NIST_fire: free_memory.i_org
diff -r ICE_SM/Tests/NIST_fire/input.c ICE_SM_TEST//Tests/NIST_fire/input.c
189,191c189,191
<        uvel_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]      = readdouble(fp," U velocity",switchDebug_readInputFile);
<        vvel_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]      = readdouble(fp," V velocity",switchDebug_readInputFile);
<        wvel_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]      = readdouble(fp," W velocity",switchDebug_readInputFile);
---
>        uvel_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]      = readdouble(fp," U velocity",switchDebug_readInputFile);
>        vvel_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]      = readdouble(fp," V velocity",switchDebug_readInputFile);
>        wvel_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]      = readdouble(fp," W velocity",switchDebug_readInputFile);
193,195c193,195
<        rho_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]       = readdouble(fp," Density",switchDebug_readInputFile);               
<        Temp_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]      = readdouble(fp," Temperature",switchDebug_readInputFile);
<        Press_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]     = readdouble(fp," Pressure",switchDebug_readInputFile);
---
>        rho_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]       = readdouble(fp," Density",switchDebug_readInputFile);               
>        Temp_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]      = readdouble(fp," Temperature",switchDebug_readInputFile);
>        Press_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]     = readdouble(fp," Pressure",switchDebug_readInputFile);
197,199c197,199
<        scalar1_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]   = readdouble(fp," Scalar 1",switchDebug_readInputFile);
<        scalar2_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]   = readdouble(fp," Scalar 2",switchDebug_readInputFile);
<        scalar3_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]   = readdouble(fp," Scalar 3",switchDebug_readInputFile);
---
>        scalar1_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]   = readdouble(fp," Scalar 1",switchDebug_readInputFile);
>        scalar2_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]   = readdouble(fp," Scalar 2",switchDebug_readInputFile);
>        scalar3_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]   = readdouble(fp," Scalar 3",switchDebug_readInputFile);
204,207c204,207
<        viscosity_CC[*xLoLimit][*yLoLimit][*zLoLimit][m] = readdouble(fp," Viscosity",switchDebug_readInputFile);
<        thermalCond_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]= readdouble(fp," Thermal conductivity",switchDebug_readInputFile);
<        cv_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]        = readdouble(fp," Constant Specific heat",switchDebug_readInputFile);
<        speedSound[*xLoLimit][*yLoLimit][*zLoLimit][m]   = readdouble(fp," Speed of sound",switchDebug_readInputFile);
---
>        viscosity_CC[m][*xLoLimit][*yLoLimit][*zLoLimit] = readdouble(fp," Viscosity",switchDebug_readInputFile);
>        thermalCond_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]= readdouble(fp," Thermal conductivity",switchDebug_readInputFile);
>        cv_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]        = readdouble(fp," Constant Specific heat",switchDebug_readInputFile);
>        speedSound[m][*xLoLimit][*yLoLimit][*zLoLimit]   = readdouble(fp," Speed of sound",switchDebug_readInputFile);
289,301c289,301
<                      uvel_CC[i][j][k][m]        = uvel_CC[*xLoLimit][*yLoLimit][*zLoLimit][m];
<                      vvel_CC[i][j][k][m]        = vvel_CC[*xLoLimit][*yLoLimit][*zLoLimit][m];
<                      wvel_CC[i][j][k][m]        = wvel_CC[*xLoLimit][*yLoLimit][*zLoLimit][m];
<                      rho_CC[i][j][k][m]         = rho_CC[*xLoLimit][*yLoLimit][*zLoLimit][m];
<                      Temp_CC[i][j][k][m]        = Temp_CC[*xLoLimit][*yLoLimit][*zLoLimit][m];                
<                      Press_CC[i][j][k][m]       = Press_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      scalar1_CC[i][j][k][m]     = scalar1_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      scalar2_CC[i][j][k][m]     = scalar2_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      scalar3_CC[i][j][k][m]     = scalar3_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      viscosity_CC[i][j][k][m]   = viscosity_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      thermalCond_CC[i][j][k][m] = thermalCond_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      cv_CC[i][j][k][m]          = cv_CC[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
<                      speedSound[i][j][k][m]     = speedSound[*xLoLimit][*yLoLimit][*zLoLimit][m]; 
---
>                      uvel_CC[m][i][j][k]        = uvel_CC[m][*xLoLimit][*yLoLimit][*zLoLimit];
>                      vvel_CC[m][i][j][k]        = vvel_CC[m][*xLoLimit][*yLoLimit][*zLoLimit];
>                      wvel_CC[m][i][j][k]        = wvel_CC[m][*xLoLimit][*yLoLimit][*zLoLimit];
>                      rho_CC[m][i][j][k]         = rho_CC[m][*xLoLimit][*yLoLimit][*zLoLimit];
>                      Temp_CC[m][i][j][k]        = Temp_CC[m][*xLoLimit][*yLoLimit][*zLoLimit];                
>                      Press_CC[m][i][j][k]       = Press_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      scalar1_CC[m][i][j][k]     = scalar1_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      scalar2_CC[m][i][j][k]     = scalar2_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      scalar3_CC[m][i][j][k]     = scalar3_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      viscosity_CC[m][i][j][k]   = viscosity_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      thermalCond_CC[m][i][j][k] = thermalCond_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      cv_CC[m][i][j][k]          = cv_CC[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
>                      speedSound[m][i][j][k]     = speedSound[m][*xLoLimit][*yLoLimit][*zLoLimit]; 
522c522
<         if( rho_CC[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || rho_CC[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( rho_CC[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || rho_CC[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
525c525
<         if( Temp_CC[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || Temp_CC[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( Temp_CC[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || Temp_CC[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
528c528
<         if( Press_CC[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || Press_CC[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( Press_CC[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || Press_CC[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
531c531
<         if( speedSound[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || speedSound[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( speedSound[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || speedSound[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
534c534
<         if( cv_CC[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || cv_CC[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( cv_CC[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || cv_CC[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
537c537
<         if( thermalCond_CC[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || thermalCond_CC[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( thermalCond_CC[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || thermalCond_CC[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
541c541
<         if( viscosity_CC[xLoLimit][yLoLimit][zLoLimit][m] < 0.0 || viscosity_CC[xLoLimit][yLoLimit][zLoLimit][m] > BIG_NUM)
---
>         if( viscosity_CC[m][xLoLimit][yLoLimit][zLoLimit] < 0.0 || viscosity_CC[m][xLoLimit][yLoLimit][zLoLimit] > BIG_NUM)
diff -r ICE_SM/Tests/NIST_fire/interpolate_vel_CC_to_FC.c ICE_SM_TEST//Tests/NIST_fire/interpolate_vel_CC_to_FC.c
88c88
<     grad_P = dvector(1,N_CELL_FACES);
---
>     grad_P = dvector_nr(1,N_CELL_FACES);
149c149
<                         rho_FC = (rho_CC[i][cell][k][m]    + rho_CC[i][j][k][m])/2.0;
---
>                         rho_FC = (rho_CC[m][i][cell][k]    + rho_CC[m][i][j][k])/2.0;
155,156c155,156
<                          term1  = (rho_CC[i][cell][k][m]    * vvel_CC[i][cell][k][m] 
<                                 +   rho_CC[i][j][k][m]      * vvel_CC[i][j][k][m])/ (2.0 * rho_FC);
---
>                          term1  = (rho_CC[m][i][cell][k]    * vvel_CC[m][i][cell][k] 
>                                 +   rho_CC[m][i][j][k]      * vvel_CC[m][i][j][k])/ (2.0 * rho_FC);
216c216
<                         rho_FC = (rho_CC[cell][j][k][m]    + rho_CC[i][j][k][m])/2.0;
---
>                         rho_FC = (rho_CC[m][cell][j][k]    + rho_CC[m][i][j][k])/2.0;
222,223c222,223
<                         term1   = (rho_CC[cell][j][k][m]    * uvel_CC[cell][j][k][m] 
<                                 +   rho_CC[i][j][k][m]      * uvel_CC[i][j][k][m])/ (2.0*rho_FC);
---
>                         term1   = (rho_CC[m][cell][j][k]    * uvel_CC[m][cell][j][k] 
>                                 +   rho_CC[m][i][j][k]      * uvel_CC[m][i][j][k])/ (2.0*rho_FC);
280c280
<                         rho_FC = (rho_CC[i][j][cell][m]    + rho_CC[i][j][k][m])/2.0;
---
>                         rho_FC = (rho_CC[m][i][j][cell]    + rho_CC[m][i][j][k])/2.0;
286,287c286,287
<                         term1 = (rho_CC[i][j][cell][m]    * wvel_CC[i][j][cell][m] 
<                              +   rho_CC[i][j][k][m]       * wvel_CC[i][j][k][m])/ (2.0 * rho_FC);
---
>                         term1 = (rho_CC[m][i][j][cell]    * wvel_CC[m][i][j][cell] 
>                              +   rho_CC[m][i][j][k]       * wvel_CC[m][i][j][k])/ (2.0 * rho_FC);
372c372
<     free_dvector(grad_P, 1, N_CELL_FACES);
---
>     free_dvector_nr(grad_P, 1, N_CELL_FACES);
diff -r ICE_SM/Tests/NIST_fire/momentum.c ICE_SM_TEST//Tests/NIST_fire/momentum.c
156c156
<                     mass = rho_CC[i][j][k][m] * delX * delY * delZ;
---
>                     mass = rho_CC[m][i][j][k] * delX * delY * delZ;
169c169
<                     xmom_source[i][j][k][m] =   switch_x * xmom_source_temp;
---
>                     xmom_source[m][i][j][k] =   switch_x * xmom_source_temp;
183c183
<                     ymom_source[i][j][k][m] =   switch_y * ymom_source_temp;
---
>                     ymom_source[m][i][j][k] =   switch_y * ymom_source_temp;
198c198
<                     zmom_source[i][j][k][m] =   switch_z * zmom_source_temp;
---
>                     zmom_source[m][i][j][k] =   switch_z * zmom_source_temp;
222c222
<     QUITE_FULLWARN(mass_CC[0][0][0][1]);
---
>     QUITE_FULLWARN(mass_CC[1][0][0][0]);
225,228c225,228
<     QUITE_FULLWARN(rho_CC[0][0][0][1]);     QUITE_FULLWARN(Temp_CC[0][0][0][1]);
<     QUITE_FULLWARN(cv_CC[0][0][0][1]);      QUITE_FULLWARN(viscosity_CC[0][0][0][1]);
<     QUITE_FULLWARN(uvel_CC[0][0][0][1]);    QUITE_FULLWARN(vvel_CC[0][0][0][1]);
<     QUITE_FULLWARN(wvel_CC[0][0][0][1]);    QUITE_FULLWARN(nMaterials);
---
>     QUITE_FULLWARN(rho_CC[1][0][0][0]);     QUITE_FULLWARN(Temp_CC[1][0][0][0]);
>     QUITE_FULLWARN(cv_CC[1][0][0][0]);      QUITE_FULLWARN(viscosity_CC[1][0][0][0]);
>     QUITE_FULLWARN(uvel_CC[1][0][0][0]);    QUITE_FULLWARN(vvel_CC[1][0][0][0]);
>     QUITE_FULLWARN(wvel_CC[1][0][0][0]);    QUITE_FULLWARN(nMaterials);
diff -r ICE_SM/Tests/NIST_fire/nist_fire.c ICE_SM_TEST//Tests/NIST_fire/nist_fire.c
91,92c91,92
<     QUITE_FULLWARN(Temp_CC[0][0][0][1]);        
<     QUITE_FULLWARN(rho_CC[0][0][0][1]);
---
>     QUITE_FULLWARN(Temp_CC[1][0][0][0]);        
>     QUITE_FULLWARN(rho_CC[1][0][0][0]);
265c265
<              free_vector(    data_array1,       1, max_len);
---
>              free_vector_nr(    data_array1,       1, max_len);
348,350c348,350
<             x_TE[n] = x_TE[n] + delt * uvel_CC[i][j][k][m];
<             y_TE[n] = y_TE[n] + delt * vvel_CC[i][j][k][m];
<             z_TE[n] = z_TE[n] + delt * wvel_CC[i][j][k][m];
---
>             x_TE[n] = x_TE[n] + delt * uvel_CC[m][i][j][k];
>             y_TE[n] = y_TE[n] + delt * vvel_CC[m][i][j][k];
>             z_TE[n] = z_TE[n] + delt * wvel_CC[m][i][j][k];
Only in ICE_SM_TEST//Tests/NIST_fire: nist_fire.c_org
diff -r ICE_SM/Tests/NIST_fire/plot_particles.c ICE_SM_TEST//Tests/NIST_fire/plot_particles.c
63c63
<     data_float = vector(1, nParticles);
---
>     data_float = vector_nr(1, nParticles);
155c155
<     free_vector(data_float, 1, nParticles);   
---
>     free_vector_nr(data_float, 1, nParticles);   
Only in ICE_SM_TEST//Tests/NIST_fire: plot_particles.c_org
Only in ICE_SM_TEST//Tests/NIST_fire: plot_particles.c_tmp
diff -r ICE_SM/Tests/Riemann/Makefile ICE_SM_TEST//Tests/Riemann/Makefile
18c18
< ICE_DIR         = /usr/people/harman/Csafe/ICE_SM
---
> ICE_DIR         = /usr/people/harman/Csafe/ICE_SM_TEST
diff -r ICE_SM/Tests/Riemann/debugcode.i ICE_SM_TEST//Tests/Riemann/debugcode.i
38c38
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
50c50
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
63c63
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
76c76
<          free_vector(    data_array1,       1, max_len);                              
---
>          free_vector_nr(    data_array1,       1, max_len);                              
184c184
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
197c197
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
211c211
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
223c223
<         data_array1 = vector(1, X_MAX_LIM); 
---
>         data_array1 = vector_nr(1, X_MAX_LIM); 
229c229
<         free_vector(    data_array1,       1, X_MAX_LIM);
---
>         free_vector_nr(    data_array1,       1, X_MAX_LIM);
233c233
<         data_array1 = vector(1, X_MAX_LIM);
---
>         data_array1 = vector_nr(1, X_MAX_LIM);
239c239
<         free_vector(    data_array1,       1, X_MAX_LIM);
---
>         free_vector_nr(    data_array1,       1, X_MAX_LIM);
243c243
<         data_array1 = vector(1, X_MAX_LIM);
---
>         data_array1 = vector_nr(1, X_MAX_LIM);
249c249
<         free_vector(    data_array1,       1, X_MAX_LIM);
---
>         free_vector_nr(    data_array1,       1, X_MAX_LIM);
254c254
<         data_array1 = vector(1, X_MAX_LIM);
---
>         data_array1 = vector_nr(1, X_MAX_LIM);
259c259
<         free_vector(    data_array1,       1, X_MAX_LIM);
---
>         free_vector_nr(    data_array1,       1, X_MAX_LIM);
276c276
<         data_array2     = vector(1, X_MAX_LIM); 
---
>         data_array2     = vector_nr(1, X_MAX_LIM); 
295,296c295,296
<         free_vector(    data_array2,       1, X_MAX_LIM);
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array2,       1, X_MAX_LIM);
>         free_vector_nr(    data_array1,       1, max_len);
301c301
<         data_array2     = vector(1, X_MAX_LIM); 
---
>         data_array2     = vector_nr(1, X_MAX_LIM); 
316,317c316,317
<         free_vector(    data_array1,       1, max_len);
<         free_vector(    data_array2,       1, X_MAX_LIM);
---
>         free_vector_nr(    data_array1,       1, max_len);
>         free_vector_nr(    data_array2,       1, X_MAX_LIM);
322c322
<         data_array2     = vector(1, X_MAX_LIM); 
---
>         data_array2     = vector_nr(1, X_MAX_LIM); 
337,338c337,338
<         free_vector(    data_array1,       1, max_len);
<         free_vector(    data_array2,       1, X_MAX_LIM);
---
>         free_vector_nr(    data_array1,       1, max_len);
>         free_vector_nr(    data_array2,       1, X_MAX_LIM);
345c345
<         data_array2     = vector(1, X_MAX_LIM); 
---
>         data_array2     = vector_nr(1, X_MAX_LIM); 
359,360c359,360
<         free_vector(    data_array1,       1, max_len);
<         free_vector(    data_array2,       1, X_MAX_LIM);
---
>         free_vector_nr(    data_array1,       1, max_len);
>         free_vector_nr(    data_array2,       1, X_MAX_LIM);
384c384
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
396c396
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
408c408
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
420c420
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
504c504
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
520c520
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
816c816
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
827c827
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
838c838
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
849c849
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
913c913
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
925c925
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1018c1018
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1029c1029
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1071c1071
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1083c1083
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1121c1121
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1131c1131
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1141c1141
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1151c1151
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1289c1289
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1298c1298
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1307c1307
<         free_vector(    data_array1,       1, max_len);  
---
>         free_vector_nr(    data_array1,       1, max_len);  
1316c1316
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
1330c1330
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1339c1339
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1348c1348
<         free_vector(    data_array1,       1, max_len);          
---
>         free_vector_nr(    data_array1,       1, max_len);          
1401c1401
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1412c1412
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1423c1423
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
diff -r ICE_SM/Tests/Riemann/overide_initial_conds.i ICE_SM_TEST//Tests/Riemann/overide_initial_conds.i
20,25c20,25
<               /*   uvel_CC[i][j][k][m] = u4; */
<                 uvel_CC[i][j][k][m]     = u4;
<                 rho_CC[i][j][k][m]      = rho4;
<                 press_CC[i][j][k][m]    = p4;
<                 Temp_CC[i][j][k][m]     = p4/(R[m] * rho4);
<                 speedSound[i][j][k][m]  = sqrt(1.4*press_CC[i][j][k][m]/rho_CC[i][j][k][m]);
---
>               /*   uvel_CC[m][i][j][k] = u4; */
>                 uvel_CC[m][i][j][k]     = u4;
>                 rho_CC[m][i][j][k]      = rho4;
>                 press_CC[m][i][j][k]    = p4;
>                 Temp_CC[m][i][j][k]     = p4/(R[m] * rho4);
>                 speedSound[m][i][j][k]  = sqrt(1.4*press_CC[m][i][j][k]/rho_CC[m][i][j][k]);
31,36c31,36
<                     /* uvel_CC[i][j][k][m] = u1; */
<                     uvel_CC[i][j][k][m]     = u1;
<                     rho_CC[i][j][k][m]      = rho1;
<                     press_CC[i][j][k][m]    = p1;
<                     Temp_CC[i][j][k][m]     = p1/(R[m] * rho1);
<                     speedSound[i][j][k][m] = sqrt(1.4*press_CC[i][j][k][m]/rho_CC[i][j][k][m]);
---
>                     /* uvel_CC[m][i][j][k] = u1; */
>                     uvel_CC[m][i][j][k]     = u1;
>                     rho_CC[m][i][j][k]      = rho1;
>                     press_CC[m][i][j][k]    = p1;
>                     Temp_CC[m][i][j][k]     = p1/(R[m] * rho1);
>                     speedSound[m][i][j][k] = sqrt(1.4*press_CC[m][i][j][k]/rho_CC[m][i][j][k]);
diff -r ICE_SM/Tests/Riemann/overides.c ICE_SM_TEST//Tests/Riemann/overides.c
281,285c281,285
< /**/    u_Rieman    = dvector(0, Q_MAX_LIM);
< /**/    a_Rieman    = dvector(0, Q_MAX_LIM);
< /**/    p_Rieman    = dvector(0, Q_MAX_LIM);
< /**/    rho_Rieman  = dvector(0, Q_MAX_LIM);
< /**/    T_Rieman    = dvector(0, Q_MAX_LIM);
---
> /**/    u_Rieman    = dvector_nr(0, Q_MAX_LIM);
> /**/    a_Rieman    = dvector_nr(0, Q_MAX_LIM);
> /**/    p_Rieman    = dvector_nr(0, Q_MAX_LIM);
> /**/    rho_Rieman  = dvector_nr(0, Q_MAX_LIM);
> /**/    T_Rieman    = dvector_nr(0, Q_MAX_LIM);
824,828c824,828
<     free_dvector( u_Rieman,     0, Q_MAX_LIM);
<     free_dvector( a_Rieman,     0, Q_MAX_LIM);
<     free_dvector( p_Rieman,     0, Q_MAX_LIM);
<     free_dvector( rho_Rieman,   0, Q_MAX_LIM); 
<     free_dvector( T_Rieman,     0, Q_MAX_LIM);    
---
>     free_dvector_nr( u_Rieman,     0, Q_MAX_LIM);
>     free_dvector_nr( a_Rieman,     0, Q_MAX_LIM);
>     free_dvector_nr( p_Rieman,     0, Q_MAX_LIM);
>     free_dvector_nr( rho_Rieman,   0, Q_MAX_LIM); 
>     free_dvector_nr( T_Rieman,     0, Q_MAX_LIM);    
diff -r ICE_SM/Tests/Stagnation_pf/Makefile ICE_SM_TEST//Tests/Stagnation_pf/Makefile
18c18
< ICE_DIR         = /usr/people/harman/Csafe/ICE_SM
---
> ICE_DIR         = /usr/people/harman/Csafe/ICE_SM_TEST
diff -r ICE_SM/Tests/Stagnation_pf/debugcode.i ICE_SM_TEST//Tests/Stagnation_pf/debugcode.i
42c42
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
54c54
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
66c66
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
78c78
<          free_vector(    data_array1,       1, max_len);                              
---
>          free_vector_nr(    data_array1,       1, max_len);                              
135c135
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
147c147
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
159c159
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
173c173
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
194c194
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
206c206
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
218c218
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
230c230
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
295,296c295,296
<         free_vector(    data_array1,       1, max_len);
<         free_vector(    data_array2,       1, max_len);                     
---
>         free_vector_nr(    data_array1,       1, max_len);
>         free_vector_nr(    data_array2,       1, max_len);                     
350c350
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
366c366
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
644c644
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
655c655
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
666c666
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
677c677
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
741c741
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
753c753
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
846c846
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
857c857
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
899c899
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
911c911
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
949c949
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
959c959
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
969c969
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
979c979
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1116c1116
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1125c1125
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1134c1134
<         free_vector(    data_array1,       1, max_len);  
---
>         free_vector_nr(    data_array1,       1, max_len);  
1143c1143
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
1157c1157
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1166c1166
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1175c1175
<         free_vector(    data_array1,       1, max_len);          
---
>         free_vector_nr(    data_array1,       1, max_len);          
1228c1228
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1239c1239
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1250c1250
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
diff -r ICE_SM/Tests/Stagnation_pf/overide_initial_conds.i ICE_SM_TEST//Tests/Stagnation_pf/overide_initial_conds.i
12c12
<                    Temp_CC[i][j][k][m]   = 1.0;                           
---
>                    Temp_CC[m][i][j][k]   = 1.0;                           
19c19
<                    Temp_CC[i][j][k][m]   = 2.0;
---
>                    Temp_CC[m][i][j][k]   = 2.0;
24c24
<                    rho_CC[i][j][k][m]   = 2.0;
---
>                    rho_CC[m][i][j][k]   = 2.0;
29c29
<                    rho_CC[i][j][k][m]   = 2.0;
---
>                    rho_CC[m][i][j][k]   = 2.0;
33c33
<                    rho_CC[i][j][k][m]   = 2.0;
---
>                    rho_CC[m][i][j][k]   = 2.0;
diff -r ICE_SM/Tests/Test/Makefile ICE_SM_TEST//Tests/Test/Makefile
18c18
< ICE_DIR         = /usr/people/harman/Csafe/ICE_SM
---
> ICE_DIR         = /usr/people/harman/Csafe/ICE_SM_TEST
diff -r ICE_SM/Tests/Test/allocate_memory.i ICE_SM_TEST//Tests/Test/allocate_memory.i
16,21c16,21
<     uvel_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     vvel_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     wvel_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     rho_CC          = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     press_CC        = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     delPress_CC     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     uvel_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     vvel_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     wvel_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     rho_CC          = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     press_CC        = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     delPress_CC     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
23,28c23,28
<     Temp_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     viscosity_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     thermalCond_CC  = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     cv_CC           = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     R               = dvector(1, N_MATERIAL);
<     gamma           = dvector(1, N_MATERIAL);
---
>     Temp_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     viscosity_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     thermalCond_CC  = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     cv_CC           = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     R               = dvector_nr(1, N_MATERIAL);
>     gamma           = dvector_nr(1, N_MATERIAL);
30,36c30,36
<     mass_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     xmom_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     ymom_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     zmom_CC         = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     int_eng_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     total_eng_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     div_velFC_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     mass_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     xmom_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     ymom_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     zmom_CC         = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     int_eng_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     total_eng_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     div_velFC_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
40,44c40,44
<     scalar1_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     scalar2_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     scalar3_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     grav            = dvector(1, 3);
<     speedSound      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     scalar1_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     scalar2_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     scalar3_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     grav            = dvector_nr(1, 3);
>     speedSound      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
48,51c48,51
<     xmom_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     ymom_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     zmom_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);    
<     int_eng_L_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);    
---
>     xmom_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     ymom_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     zmom_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);    
>     int_eng_L_CC    = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);    
53,57c53,57
<     press_L_CC      = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     mass_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     rho_L_CC        = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     Temp_L_CC       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     Vol_L_CC        = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     press_L_CC      = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     mass_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     rho_L_CC        = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     Temp_L_CC       = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     Vol_L_CC        = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
59,63c59,63
<     mass_source     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     xmom_source     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     ymom_source     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     zmom_source     = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<     int_eng_source  = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>     mass_source     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     xmom_source     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     ymom_source     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     zmom_source     = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>     int_eng_source  = darray_4d(1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
72,73c72,73
<     t_output_vars   = dvector(  1,  3);
<     delt_limits     = dvector(  1,  3);    
---
>     t_output_vars   = dvector_nr(  1,  3);
>     delt_limits     = dvector_nr(  1,  3);    
diff -r ICE_SM/Tests/Test/debugcode.i ICE_SM_TEST//Tests/Test/debugcode.i
42c42
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
54c54
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
66c66
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
78c78
<          free_vector(    data_array1,       1, max_len);                              
---
>          free_vector_nr(    data_array1,       1, max_len);                              
123c123
<         free_vector(    data_array1,       1, max_len);  
---
>         free_vector_nr(    data_array1,       1, max_len);  
152c152
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
164c164
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
176c176
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
190c190
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
211c211
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
223c223
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
235c235
<          free_vector(    data_array1,       1, max_len);
---
>          free_vector_nr(    data_array1,       1, max_len);
247c247
<          free_vector(    data_array1,       1, max_len); 
---
>          free_vector_nr(    data_array1,       1, max_len); 
313,314c313,314
<         free_vector(    data_array1,       1, max_len);
<         free_vector(    data_array2,       1, max_len);                     
---
>         free_vector_nr(    data_array1,       1, max_len);
>         free_vector_nr(    data_array2,       1, max_len);                     
368c368
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
384c384
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
663c663
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
674c674
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
685c685
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
696c696
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
760c760
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
772c772
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
865c865
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
876c876
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
918c918
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
930c930
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
968c968
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
978c978
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
988c988
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
998c998
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1135c1135
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1144c1144
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1153c1153
<         free_vector(    data_array1,       1, max_len);  
---
>         free_vector_nr(    data_array1,       1, max_len);  
1162c1162
<         free_vector(    data_array1,       1, max_len); 
---
>         free_vector_nr(    data_array1,       1, max_len); 
1176c1176
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1185c1185
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1194c1194
<         free_vector(    data_array1,       1, max_len);          
---
>         free_vector_nr(    data_array1,       1, max_len);          
1247c1247
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1258c1258
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
1269c1269
<         free_vector(    data_array1,       1, max_len);
---
>         free_vector_nr(    data_array1,       1, max_len);
diff -r ICE_SM/Tests/Test/free_memory.i ICE_SM_TEST//Tests/Test/free_memory.i
17,22c17,22
<    free_darray_4d( uvel_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( vvel_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( wvel_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( rho_CC,          0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( press_CC,        0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( delPress_CC,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( uvel_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( vvel_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( wvel_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( rho_CC,          1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( press_CC,        1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( delPress_CC,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
24,36c24,36
<    free_darray_4d( Temp_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( viscosity_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( thermalCond_CC,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( cv_CC,           0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_dvector( R,                  1, N_MATERIAL);
<    free_dvector( gamma,                  1, N_MATERIAL);
<    free_darray_4d( mass_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( xmom_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( ymom_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( zmom_CC,         0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( int_eng_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( total_eng_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( div_velFC_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( Temp_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( viscosity_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( thermalCond_CC,  1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( cv_CC,           1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_dvector_nr( R,                  1, N_MATERIAL);
>    free_dvector_nr( gamma,                  1, N_MATERIAL);
>    free_darray_4d( mass_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( xmom_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( ymom_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( zmom_CC,         1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( int_eng_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( total_eng_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( div_velFC_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
39,43c39,43
<    free_darray_4d( scalar1_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( scalar2_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( scalar3_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_dvector( grav,              1, 3);
<    free_darray_4d( speedSound,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( scalar1_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( scalar2_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( scalar3_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_dvector_nr( grav,              1, 3);
>    free_darray_4d( speedSound,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
46,49c46,49
<    free_darray_4d( xmom_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( ymom_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( zmom_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( int_eng_L_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( xmom_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( ymom_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( zmom_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( int_eng_L_CC,    1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
52,56c52,56
<    free_darray_4d( press_L_CC,      0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( mass_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( rho_L_CC,        0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( Temp_L_CC,       0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
<    free_darray_4d( Vol_L_CC,        0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
---
>    free_darray_4d( press_L_CC,      1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( mass_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( rho_L_CC,        1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( Temp_L_CC,       1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( Vol_L_CC,        1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
58,62c58,62
<    free_darray_4d( mass_source,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
<    free_darray_4d( xmom_source,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
<    free_darray_4d( ymom_source,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
<    free_darray_4d( zmom_source,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
<    free_darray_4d( int_eng_source,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_CELL_FACES);
---
>    free_darray_4d( mass_source,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( xmom_source,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( ymom_source,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( zmom_source,     1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
>    free_darray_4d( int_eng_source,  1, N_MATERIAL,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM);
72,73c72,73
<    free_dvector(t_output_vars,       1, 3);
<    free_dvector(delt_limits,         1, 3);   
---
>    free_dvector_nr(t_output_vars,       1, 3);
>    free_dvector_nr(delt_limits,         1, 3);   
Only in ICE_SM_TEST//Tests/Test: free_memory.i_org
diff -r ICE_SM/Tests/Test/overide_initial_conds.i ICE_SM_TEST//Tests/Test/overide_initial_conds.i
12c12
<                    Temp_CC[i][j][k][m]   = 1.0;                           
---
>                    Temp_CC[m][i][j][k]   = 1.0;                           
19c19
<                    Temp_CC[i][j][k][m]   = 2.0;
---
>                    Temp_CC[m][i][j][k]   = 2.0;
24c24
<                    rho_CC[i][j][k][m]   = 2.0;
---
>                    rho_CC[m][i][j][k]   = 2.0;
29c29
<                    rho_CC[i][j][k][m]   = 2.0;
---
>                    rho_CC[m][i][j][k]   = 2.0;
33c33
<                    rho_CC[i][j][k][m]   = 2.0;
---
>                    rho_CC[m][i][j][k]   = 2.0;
diff -r ICE_SM/Tests/Test/overides.c ICE_SM_TEST//Tests/Test/overides.c
342,344c342,344
<                     uvel_CC_old[i][j][k] = uvel_CC[i][j][k][m];
<                     vvel_CC_old[i][j][k] = vvel_CC[i][j][k][m];
<                     wvel_CC_old[i][j][k] = wvel_CC[i][j][k][m];
---
>                     uvel_CC_old[i][j][k] = uvel_CC[m][i][j][k];
>                     vvel_CC_old[i][j][k] = vvel_CC[m][i][j][k];
>                     wvel_CC_old[i][j][k] = wvel_CC[m][i][j][k];
662c662
<                     vel_difference[i][j][k] = vvel_CC_old[i][j][k] - vvel_CC[i][j][k][m];
---
>                     vel_difference[i][j][k] = vvel_CC_old[i][j][k] - vvel_CC[m][i][j][k];
Common subdirectories: ICE_SM/Write_output/CVS and ICE_SM_TEST//Write_output/CVS
diff -r ICE_SM/Write_output/output_CC.c ICE_SM_TEST//Write_output/output_CC.c
166,167c166,167
<     QUITE_FULLWARN(scalar1_CC[0][0][0][1]);     QUITE_FULLWARN(scalar2_CC[0][0][0][1]);
<     QUITE_FULLWARN(scalar3_CC[0][0][0][1]);
---
>     QUITE_FULLWARN(scalar1_CC[1][0][0][0]);     QUITE_FULLWARN(scalar2_CC[1][0][0][0]);
>     QUITE_FULLWARN(scalar3_CC[1][0][0][0]);
331c331
<                      x2[k][j][i]= data_array[xLoLimit+i][yLoLimit+j][zLoLimit+k][m];
---
>                      x2[k][j][i]= data_array[m][xLoLimit+i][yLoLimit+j][zLoLimit+k];
diff -r ICE_SM/Write_output/output_FC.c ICE_SM_TEST//Write_output/output_FC.c
259c259
<     x2= dvector(0, lim ); 
---
>     x2= dvector_nr(0, lim ); 
301c301
<     free_dvector(x2, 0, lim );
---
>     free_dvector_nr(x2, 0, lim );
393c393
<     x2= dvector(0, lim ); 
---
>     x2= dvector_nr(0, lim ); 
436c436
<     free_dvector(x2, 0, lim );
---
>     free_dvector_nr(x2, 0, lim );
