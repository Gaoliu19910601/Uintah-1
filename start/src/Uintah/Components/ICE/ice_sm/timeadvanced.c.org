/* 
 ======================================================================*/
#include <assert.h>
#include <time.h>
#include <sys/types.h>
#include <math.h>
#include <stdlib.h>              
#include "functionDeclare.h"
#include "parameters.h"
#include "switches.h"
#include "nrutil+.h"
#include "macros.h"

/* --------------------------------------------------------------------- 

 Function:  advect_and_advance_in_time--Steps 6 and 7:  controller for step 6 and updates the variables to n+1.   
 Filename:  timeadvanced.c 

 Purpose:
   This function calculates the The cell-centered, time n+1, rho, u, v, w velocities
   and internal energy
   
 History:
    Version   Programmer         Date       Description
    -------   ----------         ----       -----------
       1.0     Todd Harman       09/??/99     

Need to include kinetic energy 
 ---------------------------------------------------------------------  */
void advect_and_advance_in_time(  
        int     xLoLimit,               /* x-array lower limit              */
        int     yLoLimit,               /* y-array lower limit              */
        int     zLoLimit,               /* z-array lower limit              */
        int     xHiLimit,               /* x-array upper limit              */
        int     yHiLimit,               /* y-array upper limit              */
        int     zHiLimit,               /* z-array upper limit              */
        double  delX,                   /* distance/cell, xdir              (INPUT) */
        double  delY,                   /* distance/cell, ydir              (INPUT) */
        double  delZ,                   /* distance/cell, zdir              (INPUT) */ 
        double  ***Vol_CC,              /* cell-centered volume             (INPUT) */
        double  ****rho_CC,             /* cell-centered density            (OUPUT) */
        double  ****uvel_CC,            /* u cell-centered velocity         (INPUT) */
        double  ****vvel_CC,            /* v cell-centered velocity         (INPUT) */
        double  ****wvel_CC,            /* w cell-centered velocity         (INPUT) */
        double  ****xmom_CC,            /* cell-centered x-momentum         (OUPUT) */
        double  ****ymom_CC,            /* cell-centered x-momentum         (OUPUT) */
        double  ****zmom_CC,            /* cell-centered x-momentum         (OUPUT) */
        double  ****Vol_L_CC,           /* Lagrangian cell-centered volume  (INPUT) */
        double  ****rho_L_CC,           /* Lagrangian cell-centered density (INPUT) */
        double  ****mass_L_CC,          /* Lagrangian cell-centered mass    (INPUT) */
        double  ****xmom_L_CC,          /* Lagrangian cell-centered momentum(INPUT) */
        double  ****ymom_L_CC,          /* Lagrangian cell-centered momentum(INPUT) */
        double  ****zmom_L_CC,          /* Lagrangian cell-centered momentum(INPUT) */
        double  ****int_eng_CC,         /* internal energy                  (OUPUT) */
        double  ****int_eng_L_CC,       /* Lagrangian CC internal energy    (INPUT) */
        double  ******uvel_FC,          /*  u-face-centered velocity        (INPUT) */
        double  ******vvel_FC,          /*  v-face-centered velocity        (INPUT) */
        double  ******wvel_FC,          /* w face-centered velocity         (INPUT) */
        double  delt,                   /* delta t                          (INPUT) */
        int     nMaterials      )
/* Local Definitions________________________________________________________*/
{
    int     i, j, k,m,                  /*   loop indices  locators         */
            ***influx_counter;          /* volume segments flowing from one */
                                        /* cell to another                  */            
    
    double  vol,                        /* Temporary variable               */
            ****advct_xmom_CC,          /* Advected momemtum                */
            ****advct_ymom_CC,
            ****advct_zmom_CC,
            ****mass_L_TEMP,
            ****xmom_L_TEMP,              /* temporary variables              */
            ****ymom_L_TEMP,
            ****zmom_L_TEMP,
            ****int_eng_L_TEMP,
            ****advct_rho_CC,
            ****advct_int_eng_CC,       /* Advected interal energy          */            
            *****r_out_x,               /* x-dir centroid array (i,j,k,vol  */ 
            *****r_out_y,               /* y-dir centroid array             */                   
            *****r_out_z,               /* z-dir centroid array             */                 
            ****outflux_volume,         /* array containing the size of each*/
                                        /* of the outflux volumes           */ 
                                        /* (i,j,k,vol)                      */                      
            ****influx_volume;          /* array containing the size of each*/
                                        /* of the influx volumes            */ 
                                        /* (i,j,k,counter)                  */
       
/*__________________________________
*   Plotting variables
*___________________________________*/ 
#if (switchDebug_advect_and_advance_in_time)
    #include "plot_declare_vars.h"   
#endif
#if sw_advect_and_advance_in_time    
    time_t start,secs;                  /* timing variables                 */               
    start = time(NULL);
#endif
/*START_DOC*/ 

/*__________________________________
* Check that the inputs are reasonable
*___________________________________*/
    assert ( xLoLimit > 0 && xHiLimit < X_MAX_LIM);
    assert ( yLoLimit > 0 && yHiLimit < Y_MAX_LIM);
    assert ( zLoLimit > 0 && zHiLimit < Z_MAX_LIM);
/*__________________________________
* Allocate memory for local arrays
*___________________________________*/
    advct_xmom_CC   = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
    advct_ymom_CC   = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
    advct_zmom_CC   = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
    advct_rho_CC    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
    advct_int_eng_CC= darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);

    mass_L_TEMP       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);    
    xmom_L_TEMP       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
    ymom_L_TEMP       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
    zmom_L_TEMP       = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
    int_eng_L_TEMP    = darray_4d(0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
/*-----------------------------------------------------------------------  
*  Allocate memory for the arrays  and zero all the locally defined arrays        
*-----------------------------------------------------------------------  */
    influx_counter  = iarray_3d(-1, X_MAX_LIM+1,    -1, Y_MAX_LIM+1,-1, Z_MAX_LIM+1);
    r_out_x         = darray_5d(0, X_MAX_LIM,       0, Y_MAX_LIM, 0,    Z_MAX_LIM, 1, N_MATERIAL,  1, N_OUTFLOW_DEL_V);
    r_out_y         = darray_5d(0, X_MAX_LIM,       0, Y_MAX_LIM, 0,    Z_MAX_LIM, 1, N_MATERIAL,  1, N_OUTFLOW_DEL_V);
    r_out_z         = darray_5d(0, X_MAX_LIM,       0, Y_MAX_LIM, 0,    Z_MAX_LIM, 1, N_MATERIAL,  1, N_OUTFLOW_DEL_V);    
    outflux_volume  = darray_4d(0, X_MAX_LIM,       0, Y_MAX_LIM, 0,    Z_MAX_LIM, 1, N_OUTFLOW_DEL_V);
    influx_volume   = darray_4d(-1,   X_MAX_LIM+1, -1, Y_MAX_LIM+1,-1,  Z_MAX_LIM+1,               1, N_INFLOW_DEL_V);    

    zero_arrays_4d(
                        xLoLimit,       yLoLimit,       zLoLimit,             
                        xHiLimit,       yHiLimit,       zHiLimit,
                        1,              nMaterials,     11,             
                        advct_xmom_CC,  advct_ymom_CC,  advct_zmom_CC,  
                        advct_int_eng_CC,advct_rho_CC,  int_eng_L_TEMP, 
                        xmom_L_TEMP,    ymom_L_TEMP,    zmom_L_TEMP,
                        mass_L_TEMP,
                        outflux_volume);
                        
    zero_arrays_5d(
                        xLoLimit,       yLoLimit,       zLoLimit,             
                        xHiLimit,       yHiLimit,       zHiLimit,
                        1,              nMaterials,     1,
                        N_OUTFLOW_DEL_V,                3,             
                        r_out_x,        r_out_y,        r_out_z);
    
#if switch_step6_OnOff

/*__________________________________
*   since all of the momentum arrays
*   are defined as mass*velocity
*   we need to convert them into 
*   rho * velocity before we pass that
*   data into the advection operator.
*   So we divide the momentum arrays by the volume
*___________________________________*/
    for (m = 1; m <= nMaterials; m++)
    {     
        for ( i = GC_LO(xLoLimit); i <= GC_HI(xHiLimit); i++)
        {
            for ( j = GC_LO(yLoLimit); j <= GC_HI(yHiLimit); j++)
            {
                for ( k = GC_LO(zLoLimit); k <= GC_HI(zHiLimit); k++)
                {            
                    assert ( Vol_CC[i][j][k] >0.0);

                    vol = Vol_CC[i][j][k];                
                    mass_L_TEMP[i][j][k][m]       = mass_L_CC[i][j][k][m]/vol;
                    xmom_L_TEMP[i][j][k][m]       = xmom_L_CC[i][j][k][m]/vol;
                    ymom_L_TEMP[i][j][k][m]       = ymom_L_CC[i][j][k][m]/vol;
                    zmom_L_TEMP[i][j][k][m]       = zmom_L_CC[i][j][k][m]/vol;
                    int_eng_L_TEMP[i][j][k][m]    = int_eng_L_CC[i][j][k][m]/vol;

                }
            }
        }
    }
/*______________________________________________________________________
* Calculate the advection terms
*_______________________________________________________________________*/

    for (m = 1; m <= nMaterials; m++)
    {   
        putenv("PGPLOT_PLOTTING_ON_OFF=1");
    /*__________________________________
    * Compute stuff that only needs to be
    * calculated only once (i.e. r_out[*],
    * influx_volume, outflux_volume, 
    * influx_counter
    *___________________________________*/  
        advect_preprocess(
                        xLoLimit,       yLoLimit,       zLoLimit,         
                        xHiLimit,       yHiLimit,       zHiLimit,         
                        delX,           delY,           delZ,
                        delt,             
                        uvel_CC,        vvel_CC,        wvel_CC,             
                        uvel_FC,        vvel_FC,        wvel_FC,    
                        r_out_x,        r_out_y,        r_out_z,     
                        outflux_volume,  influx_counter, influx_volume,
                        m );   

        /*-------density-------*/                                
         advect_q(
                        xLoLimit,       yLoLimit,       zLoLimit,
                        xHiLimit,       yHiLimit,       zHiLimit,
                        delX,           delY,           delZ,
                        mass_L_TEMP,
                        uvel_CC,        vvel_CC,        wvel_CC,         
                        r_out_x,        r_out_y,        r_out_z,
                        outflux_volume, influx_counter, influx_volume,
                        advct_rho_CC,   m);

        putenv("PGPLOT_PLOTTING_ON_OFF=0");   

        /*-----Internal Energy-----*/
        advect_q(
                        xLoLimit,       yLoLimit,       zLoLimit,
                        xHiLimit,       yHiLimit,       zHiLimit,
                        delX,           delY,           delZ,
                        int_eng_L_TEMP,
                        uvel_CC,        vvel_CC,        wvel_CC,   
                        r_out_x,        r_out_y,        r_out_z,
                        outflux_volume, influx_counter, influx_volume,
                        advct_int_eng_CC,m);

        /*-------x-momentum------*/
        advect_q(
                        xLoLimit,       yLoLimit,       zLoLimit,
                        xHiLimit,       yHiLimit,       zHiLimit,
                        delX,           delY,           delZ,
                        xmom_L_TEMP,
                        uvel_CC,        vvel_CC,        wvel_CC,      
                         r_out_x,        r_out_y,        r_out_z,
                        outflux_volume, influx_counter, influx_volume,
                        advct_xmom_CC,  m); 
        /*-------y-momentum------*/
         advect_q(
                        xLoLimit,       yLoLimit,       zLoLimit,
                        xHiLimit,       yHiLimit,       zHiLimit,
                        delX,           delY,           delZ,
                        ymom_L_TEMP,
                        uvel_CC,        vvel_CC,        wvel_CC,      
                        r_out_x,        r_out_y,        r_out_z,
                        outflux_volume, influx_counter, influx_volume,
                        advct_ymom_CC,  m);


    /*      advect_q(
                        xLoLimit,       yLoLimit,       zLoLimit,
                        xHiLimit,       yHiLimit,       zHiLimit,
                        delX,           delY,           delZ,
                        zmom_L_TEMP,
                        uvel_CC,        vvel_CC,        wvel_CC,      
                         r_out_x,        r_out_y,        r_out_z,
                        outflux_volume, influx_counter, influx_volume,
                        advct_zmom_CC,  m); */

    }
                    

#endif

#if switch_step7_OnOff 
putenv("PGPLOT_PLOTTING_ON_OFF=1");
/*__________________________________
* Now advance in time
*___________________________________*/
    for (m = 1; m <= nMaterials; m++)
    { 
        for ( i = xLoLimit; i <= xHiLimit; i++)
        {
            for ( j = yLoLimit; j <= yHiLimit; j++)
            {
                for ( k = zLoLimit; k <= zHiLimit; k++)
                {            
                    assert ( Vol_CC[i][j][k] >0.0);

                    /*__________________________________
                    * update x, y, z components of momentum
                    *___________________________________*/
                    xmom_CC[i][j][k][m] = ( xmom_L_CC[i][j][k][m] + advct_xmom_CC[i][j][k][m] );
                    ymom_CC[i][j][k][m] = ( ymom_L_CC[i][j][k][m] + advct_ymom_CC[i][j][k][m] );
                    zmom_CC[i][j][k][m] = ( zmom_L_CC[i][j][k][m] + advct_zmom_CC[i][j][k][m] );  

                    /*__________________________________
                    *   Update the internal energy
                    *___________________________________*/
                    int_eng_CC[i][j][k][m] = ( int_eng_L_CC[i][j][k][m] + advct_int_eng_CC[i][j][k][m] );
                    
                    /*__________________________________
                    *  update density You must do this last
                    *   so you don't overwrite the rho_CC
                    *___________________________________*/
/*`==========TESTING==========*/ 

                   rho_CC[i][j][k][m] = (mass_L_CC[i][j][k][m] + 
                                         +advct_rho_CC[i][j][k][m] )/ Vol_CC[i][j][k];
                                         
 /*==========TESTING==========`*/

                }
            }
        }
    }
#endif
/*______________________________________________________________________
*   DEBUGGING AND STOP WATCH INFORMATION
*_______________________________________________________________________*/
#if switchDebug_advect_and_advance_in_time
    #define switchInclude_advect_and_advance_in_time 1
    #include "debugcode.i"
    #undef switchInclude_advect_and_advance_in_time                   
#endif 
       
#if sw_advect_and_advance_in_time
    stopwatch("time_advance function",start);
#endif
/*__________________________________
* Free local memory
*___________________________________*/
   free_darray_4d( advct_xmom_CC,   0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
   free_darray_4d( advct_ymom_CC,   0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
   free_darray_4d( advct_zmom_CC,   0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
   free_darray_4d( mass_L_TEMP,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
   free_darray_4d( xmom_L_TEMP,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
   free_darray_4d( ymom_L_TEMP,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
   free_darray_4d( zmom_L_TEMP,     0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
   free_darray_4d( int_eng_L_TEMP,  0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);

   free_darray_4d( advct_rho_CC,    0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
   free_darray_4d( advct_int_eng_CC,0, X_MAX_LIM, 0, Y_MAX_LIM, 0, Z_MAX_LIM, 1, N_MATERIAL);
  
   free_iarray_3d( influx_counter,        -1,   X_MAX_LIM+1,-1, Y_MAX_LIM+1,-1, Z_MAX_LIM+1);    
   free_darray_5d( r_out_x, 0, X_MAX_LIM, 0,    Y_MAX_LIM,  0,  Z_MAX_LIM,  1, N_MATERIAL,      1, N_OUTFLOW_DEL_V);
   free_darray_5d( r_out_y, 0, X_MAX_LIM, 0,    Y_MAX_LIM,  0,  Z_MAX_LIM,  1, N_MATERIAL,      1, N_OUTFLOW_DEL_V);
   free_darray_5d( r_out_z, 0, X_MAX_LIM, 0,    Y_MAX_LIM,  0,  Z_MAX_LIM,  1, N_MATERIAL,      1, N_OUTFLOW_DEL_V);                   
   free_darray_4d(outflux_volume,         0,    X_MAX_LIM,  0,  Y_MAX_LIM,  0, Z_MAX_LIM,       1, N_OUTFLOW_DEL_V);
   free_darray_4d(influx_volume,          -1,   X_MAX_LIM+1,-1, Y_MAX_LIM+1,-1, Z_MAX_LIM+1,    1, N_INFLOW_DEL_V);
   
/*__________________________________
*   Quite fullwarn remarks in a way that
*   is compiler independent
*___________________________________*/
    QUITE_FULLWARN(Vol_L_CC[0][0][0][1]); 
    rho_L_CC = rho_L_CC; 

}
/*STOP_DOC*/

