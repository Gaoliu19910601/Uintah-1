% Adapted from Rnady McDermott's FDS plotspec_uvw.m
% original may be found here:
% http://code.google.com/p/fds-smv/source/browse/trunk/FDS/trunk/Utilities/
% Matlab/scripts/plotspec_uvw.m
%
% Author: Tony Saad
% Date: Sept 2012
%
% energy_spectrum_uda: calculates the turbulent kinetic energy spectrum given
% u, v, and w velocities. This specific routine takes data generated by
% using lineextract with Uintah's uda file format.
%
% Usage: From your uda archive, use lineextract and save the u, v, and w
% velocities into seperate files. Then, call this function with the
% respective u, v and w filenames generated by lineextract. You must also
% pass in the domain size L, assuming we have a box of equal sides.
% Finally, the symbol is a string denoting the symbol to use in this plot

function [k_nyquist] = energy_spectrum_uda(uFileName, vFileName, wFileName, L, symbol)

% load the data files
uData = load(uFileName);
vData = load(vFileName);
wData = load(wFileName);

% get the total size, n total: nt= nx * ny * nz
nt = size(uData,1);

% nx, ny, and nz are all equal
n = round(nt^(1/3));

% allocate memory for physical u, v, and w
u = zeros(n,n,n);
v = zeros(n,n,n);
w = zeros(n,n,n);

% extract the velocities from the datafiles generated by lineextract
for p=1:nt
    i = uData(p,1) + 1;
    j = uData(p,2) + 1;
    k = uData(p,3) + 1;
    u(i,j,k) = uData(p,4);
    v(i,j,k) = vData(p,4);
    w(i,j,k) = wData(p,4);    
end

% perform multidimensional fourier transform
u_hat = fftn(u)/nt;
v_hat = fftn(v)/nt;
w_hat = fftn(w)/nt;

% allocate memory for spectral turbulent kinetic energy
tke_hat=zeros(n,n,n);
 for k=1:n
     for j=1:n
         for i=1:n
             % NOTE: use conjugate in spectral space
             tke_hat(i,j,k) = 0.5*( u_hat(i,j,k)*conj(u_hat(i,j,k)) + ...
                                    v_hat(i,j,k)*conj(v_hat(i,j,k)) + ...
                                    w_hat(i,j,k)*conj(w_hat(i,j,k)) );
         end
     end
 end
 
% -----------------------------------------------------------------------%
% spectrum calculation
% -----------------------------------------------------------------------%
% For a wave form cos(2*Pi*m*x/L) = cos(k_m x), k0 = 2*Pi/L is the
% largest wave form (one period) that can be fit into a grid
k0 = 2*pi/L;
kmax = n/2; % This is the maximum number of "waves" or peaks that can fit on a grid with npoints
wn = k0*[0:n]; % wavenumber array
vt = zeros(size(wn));

for kx=1:n
    rkx = kx-1;
    if (kx>kmax+1); rkx=rkx-n; end % conjugate symmetry
    
    for ky=1:n
        rky = ky-1;
        if (ky>kmax+1); rky=rky-n; end % conjugate symmetry
        
        for kz=1:n
            rkz = kz-1;
            if (kz>kmax+1); rkz=rkz-n; end % conjugate symmetry
            
            rk = sqrt(rkx^2+rky^2+rkz^2);
            k = round(rk);
            
            vt(k+1) = vt(k+1) + tke_hat(kx,ky,kz)/k0;
        end
    end
end

        
% plot the energy spectrum
loglog(wn(2:n),vt(2:n),symbol,'MarkerSize',15);

% return value
k_nyquist = k0*n/2;