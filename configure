#! /bin/sh
# Guess values for system-dependent variables and create Makefiles.
# Generated by GNU Autoconf 2.53.
#
# Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This configure script is free software; the Free Software Foundation
# gives unlimited permission to copy, distribute and modify it.

if expr a : '\(a\)' >/dev/null 2>&1; then
  as_expr=expr
else
  as_expr=false
fi


## --------------------- ##
## M4sh Initialization.  ##
## --------------------- ##

# Be Bourne compatible
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
elif test -n "${BASH_VERSION+set}" && (set -o posix) >/dev/null 2>&1; then
  set -o posix
fi

# NLS nuisances.
# Support unset when possible.
if (FOO=FOO; unset FOO) >/dev/null 2>&1; then
  as_unset=unset
else
  as_unset=false
fi

(set +x; test -n "`(LANG=C; export LANG) 2>&1`") &&
    { $as_unset LANG || test "${LANG+set}" != set; } ||
      { LANG=C; export LANG; }
(set +x; test -n "`(LC_ALL=C; export LC_ALL) 2>&1`") &&
    { $as_unset LC_ALL || test "${LC_ALL+set}" != set; } ||
      { LC_ALL=C; export LC_ALL; }
(set +x; test -n "`(LC_TIME=C; export LC_TIME) 2>&1`") &&
    { $as_unset LC_TIME || test "${LC_TIME+set}" != set; } ||
      { LC_TIME=C; export LC_TIME; }
(set +x; test -n "`(LC_CTYPE=C; export LC_CTYPE) 2>&1`") &&
    { $as_unset LC_CTYPE || test "${LC_CTYPE+set}" != set; } ||
      { LC_CTYPE=C; export LC_CTYPE; }
(set +x; test -n "`(LANGUAGE=C; export LANGUAGE) 2>&1`") &&
    { $as_unset LANGUAGE || test "${LANGUAGE+set}" != set; } ||
      { LANGUAGE=C; export LANGUAGE; }
(set +x; test -n "`(LC_COLLATE=C; export LC_COLLATE) 2>&1`") &&
    { $as_unset LC_COLLATE || test "${LC_COLLATE+set}" != set; } ||
      { LC_COLLATE=C; export LC_COLLATE; }
(set +x; test -n "`(LC_NUMERIC=C; export LC_NUMERIC) 2>&1`") &&
    { $as_unset LC_NUMERIC || test "${LC_NUMERIC+set}" != set; } ||
      { LC_NUMERIC=C; export LC_NUMERIC; }
(set +x; test -n "`(LC_MESSAGES=C; export LC_MESSAGES) 2>&1`") &&
    { $as_unset LC_MESSAGES || test "${LC_MESSAGES+set}" != set; } ||
      { LC_MESSAGES=C; export LC_MESSAGES; }


# Name of the executable.
as_me=`(basename "$0") 2>/dev/null ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)$' \| \
	 .     : '\(.\)' 2>/dev/null ||
echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{ s//\1/; q; }
  	  /^X\/\(\/\/\)$/{ s//\1/; q; }
  	  /^X\/\(\/\).*/{ s//\1/; q; }
  	  s/.*/./; q'`

# PATH needs CR, and LINENO needs CR and PATH.
# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  echo "#! /bin/sh" >conftest.sh
  echo  "exit 0"   >>conftest.sh
  chmod +x conftest.sh
  if (PATH=".;."; conftest.sh) >/dev/null 2>&1; then
    PATH_SEPARATOR=';'
  else
    PATH_SEPARATOR=:
  fi
  rm -f conftest.sh
fi


  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  as_lineno_3=`(expr $as_lineno_1 + 1) 2>/dev/null`
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x$as_lineno_3"  = "x$as_lineno_2"  || {
  # Find who we are.  Look in the path if we contain no path at all
  # relative or not.
  case $0 in
    *[\\/]* ) as_myself=$0 ;;
    *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
done

       ;;
  esac
  # We did not find ourselves, most probably we were run as `sh COMMAND'
  # in which case we are not to be found in the path.
  if test "x$as_myself" = x; then
    as_myself=$0
  fi
  if test ! -f "$as_myself"; then
    { echo "$as_me: error: cannot find myself; rerun with an absolute path" >&2
   { (exit 1); exit 1; }; }
  fi
  case $CONFIG_SHELL in
  '')
    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for as_base in sh bash ksh sh5; do
	 case $as_dir in
	 /*)
	   if ("$as_dir/$as_base" -c '
  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  as_lineno_3=`(expr $as_lineno_1 + 1) 2>/dev/null`
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x$as_lineno_3"  = "x$as_lineno_2" ') 2>/dev/null; then
	     CONFIG_SHELL=$as_dir/$as_base
	     export CONFIG_SHELL
	     exec "$CONFIG_SHELL" "$0" ${1+"$@"}
	   fi;;
	 esac
       done
done
;;
  esac

  # Create $as_me.lineno as a copy of $as_myself, but with $LINENO
  # uniformly replaced by the line number.  The first 'sed' inserts a
  # line-number line before each line; the second 'sed' does the real
  # work.  The second script uses 'N' to pair each line-number line
  # with the numbered line, and appends trailing '-' during
  # substitution so that $LINENO is not a special case at line end.
  # (Raja R Harinath suggested sed '=', and Paul Eggert wrote the
  # second 'sed' script.  Blame Lee E. McMahon for sed's syntax.  :-)
  sed '=' <$as_myself |
    sed '
      N
      s,$,-,
      : loop
      s,^\(['$as_cr_digits']*\)\(.*\)[$]LINENO\([^'$as_cr_alnum'_]\),\1\2\1\3,
      t loop
      s,-$,,
      s,^['$as_cr_digits']*\n,,
    ' >$as_me.lineno &&
  chmod +x $as_me.lineno ||
    { echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2
   { (exit 1); exit 1; }; }

  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensible to this).
  . ./$as_me.lineno
  # Exit status is that of the last command.
  exit
}


case `echo "testing\c"; echo 1,2,3`,`echo -n testing; echo 1,2,3` in
  *c*,-n*) ECHO_N= ECHO_C='
' ECHO_T='	' ;;
  *c*,*  ) ECHO_N=-n ECHO_C= ECHO_T= ;;
  *)       ECHO_N= ECHO_C='\c' ECHO_T= ;;
esac

if expr a : '\(a\)' >/dev/null 2>&1; then
  as_expr=expr
else
  as_expr=false
fi

rm -f conf$$ conf$$.exe conf$$.file
echo >conf$$.file
if ln -s conf$$.file conf$$ 2>/dev/null; then
  # We could just check for DJGPP; but this test a) works b) is more generic
  # and c) will remain valid once DJGPP supports symlinks (DJGPP 2.04).
  if test -f conf$$.exe; then
    # Don't use ln at all; we don't have any links
    as_ln_s='cp -p'
  else
    as_ln_s='ln -s'
  fi
elif ln conf$$.file conf$$ 2>/dev/null; then
  as_ln_s=ln
else
  as_ln_s='cp -p'
fi
rm -f conf$$ conf$$.exe conf$$.file

as_executable_p="test -f"

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="sed y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="sed y%*+%pp%;s%[^_$as_cr_alnum]%_%g"


# IFS
# We need space, tab and new line, in precisely that order.
as_nl='
'
IFS=" 	$as_nl"

# CDPATH.
$as_unset CDPATH || test "${CDPATH+set}" != set || { CDPATH=$PATH_SEPARATOR; export CDPATH; }


# Name of the host.
# hostname on some systems (SVR3.2, Linux) returns a bogus exit status,
# so uname gets run too.
ac_hostname=`(hostname || uname -n) 2>/dev/null | sed 1q`

exec 6>&1

#
# Initializations.
#
ac_default_prefix=/usr/local
cross_compiling=no
subdirs=
MFLAGS=
MAKEFLAGS=
SHELL=${CONFIG_SHELL-/bin/sh}

# Maximum number of lines to put in a shell here document.
# This variable seems obsolete.  It should probably be removed, and
# only ac_max_sed_lines should be used.
: ${ac_max_here_lines=38}

# Identity of this package.
PACKAGE_NAME=
PACKAGE_TARNAME=
PACKAGE_VERSION=
PACKAGE_STRING=
PACKAGE_BUGREPORT=

# Factoring default headers for most tests.
ac_includes_default="\
#include <stdio.h>
#if HAVE_SYS_TYPES_H
# include <sys/types.h>
#endif
#if HAVE_SYS_STAT_H
# include <sys/stat.h>
#endif
#if STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# if HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif
#if HAVE_STRING_H
# if !STDC_HEADERS && HAVE_MEMORY_H
#  include <memory.h>
# endif
# include <string.h>
#endif
#if HAVE_STRINGS_H
# include <strings.h>
#endif
#if HAVE_INTTYPES_H
# include <inttypes.h>
#else
# if HAVE_STDINT_H
#  include <stdint.h>
# endif
#endif
#if HAVE_UNISTD_H
# include <unistd.h>
#endif"


# Initialize some variables set by options.
ac_init_help=
ac_init_version=false
# The variables have the same names as the options, with
# dashes changed to underlines.
cache_file=/dev/null
exec_prefix=NONE
no_create=
no_recursion=
prefix=NONE
program_prefix=NONE
program_suffix=NONE
program_transform_name=s,x,x,
silent=
site=
srcdir=
verbose=
x_includes=NONE
x_libraries=NONE

# Installation directory options.
# These are left unexpanded so users can "make install exec_prefix=/foo"
# and all the variables that are supposed to be based on exec_prefix
# by default will actually change.
# Use braces instead of parens because sh, perl, etc. also accept them.
bindir='${exec_prefix}/bin'
sbindir='${exec_prefix}/sbin'
libexecdir='${exec_prefix}/libexec'
datadir='${prefix}/share'
sysconfdir='${prefix}/etc'
sharedstatedir='${prefix}/com'
localstatedir='${prefix}/var'
libdir='${exec_prefix}/lib'
includedir='${prefix}/include'
oldincludedir='/usr/include'
infodir='${prefix}/info'
mandir='${prefix}/man'

ac_prev=
for ac_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$ac_prev"; then
    eval "$ac_prev=\$ac_option"
    ac_prev=
    continue
  fi

  ac_optarg=`expr "x$ac_option" : 'x[^=]*=\(.*\)'`

  # Accept the important Cygnus configure options, so we can diagnose typos.

  case $ac_option in

  -bindir | --bindir | --bindi | --bind | --bin | --bi)
    ac_prev=bindir ;;
  -bindir=* | --bindir=* | --bindi=* | --bind=* | --bin=* | --bi=*)
    bindir=$ac_optarg ;;

  -build | --build | --buil | --bui | --bu)
    ac_prev=build_alias ;;
  -build=* | --build=* | --buil=* | --bui=* | --bu=*)
    build_alias=$ac_optarg ;;

  -cache-file | --cache-file | --cache-fil | --cache-fi \
  | --cache-f | --cache- | --cache | --cach | --cac | --ca | --c)
    ac_prev=cache_file ;;
  -cache-file=* | --cache-file=* | --cache-fil=* | --cache-fi=* \
  | --cache-f=* | --cache-=* | --cache=* | --cach=* | --cac=* | --ca=* | --c=*)
    cache_file=$ac_optarg ;;

  --config-cache | -C)
    cache_file=config.cache ;;

  -datadir | --datadir | --datadi | --datad | --data | --dat | --da)
    ac_prev=datadir ;;
  -datadir=* | --datadir=* | --datadi=* | --datad=* | --data=* | --dat=* \
  | --da=*)
    datadir=$ac_optarg ;;

  -disable-* | --disable-*)
    ac_feature=`expr "x$ac_option" : 'x-*disable-\(.*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_feature" : ".*[^-_$as_cr_alnum]" >/dev/null &&
      { echo "$as_me: error: invalid feature name: $ac_feature" >&2
   { (exit 1); exit 1; }; }
    ac_feature=`echo $ac_feature | sed 's/-/_/g'`
    eval "enable_$ac_feature=no" ;;

  -enable-* | --enable-*)
    ac_feature=`expr "x$ac_option" : 'x-*enable-\([^=]*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_feature" : ".*[^-_$as_cr_alnum]" >/dev/null &&
      { echo "$as_me: error: invalid feature name: $ac_feature" >&2
   { (exit 1); exit 1; }; }
    ac_feature=`echo $ac_feature | sed 's/-/_/g'`
    case $ac_option in
      *=*) ac_optarg=`echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"`;;
      *) ac_optarg=yes ;;
    esac
    eval "enable_$ac_feature='$ac_optarg'" ;;

  -exec-prefix | --exec_prefix | --exec-prefix | --exec-prefi \
  | --exec-pref | --exec-pre | --exec-pr | --exec-p | --exec- \
  | --exec | --exe | --ex)
    ac_prev=exec_prefix ;;
  -exec-prefix=* | --exec_prefix=* | --exec-prefix=* | --exec-prefi=* \
  | --exec-pref=* | --exec-pre=* | --exec-pr=* | --exec-p=* | --exec-=* \
  | --exec=* | --exe=* | --ex=*)
    exec_prefix=$ac_optarg ;;

  -gas | --gas | --ga | --g)
    # Obsolete; use --with-gas.
    with_gas=yes ;;

  -help | --help | --hel | --he | -h)
    ac_init_help=long ;;
  -help=r* | --help=r* | --hel=r* | --he=r* | -hr*)
    ac_init_help=recursive ;;
  -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
    ac_init_help=short ;;

  -host | --host | --hos | --ho)
    ac_prev=host_alias ;;
  -host=* | --host=* | --hos=* | --ho=*)
    host_alias=$ac_optarg ;;

  -includedir | --includedir | --includedi | --included | --include \
  | --includ | --inclu | --incl | --inc)
    ac_prev=includedir ;;
  -includedir=* | --includedir=* | --includedi=* | --included=* | --include=* \
  | --includ=* | --inclu=* | --incl=* | --inc=*)
    includedir=$ac_optarg ;;

  -infodir | --infodir | --infodi | --infod | --info | --inf)
    ac_prev=infodir ;;
  -infodir=* | --infodir=* | --infodi=* | --infod=* | --info=* | --inf=*)
    infodir=$ac_optarg ;;

  -libdir | --libdir | --libdi | --libd)
    ac_prev=libdir ;;
  -libdir=* | --libdir=* | --libdi=* | --libd=*)
    libdir=$ac_optarg ;;

  -libexecdir | --libexecdir | --libexecdi | --libexecd | --libexec \
  | --libexe | --libex | --libe)
    ac_prev=libexecdir ;;
  -libexecdir=* | --libexecdir=* | --libexecdi=* | --libexecd=* | --libexec=* \
  | --libexe=* | --libex=* | --libe=*)
    libexecdir=$ac_optarg ;;

  -localstatedir | --localstatedir | --localstatedi | --localstated \
  | --localstate | --localstat | --localsta | --localst \
  | --locals | --local | --loca | --loc | --lo)
    ac_prev=localstatedir ;;
  -localstatedir=* | --localstatedir=* | --localstatedi=* | --localstated=* \
  | --localstate=* | --localstat=* | --localsta=* | --localst=* \
  | --locals=* | --local=* | --loca=* | --loc=* | --lo=*)
    localstatedir=$ac_optarg ;;

  -mandir | --mandir | --mandi | --mand | --man | --ma | --m)
    ac_prev=mandir ;;
  -mandir=* | --mandir=* | --mandi=* | --mand=* | --man=* | --ma=* | --m=*)
    mandir=$ac_optarg ;;

  -nfp | --nfp | --nf)
    # Obsolete; use --without-fp.
    with_fp=no ;;

  -no-create | --no-create | --no-creat | --no-crea | --no-cre \
  | --no-cr | --no-c | -n)
    no_create=yes ;;

  -no-recursion | --no-recursion | --no-recursio | --no-recursi \
  | --no-recurs | --no-recur | --no-recu | --no-rec | --no-re | --no-r)
    no_recursion=yes ;;

  -oldincludedir | --oldincludedir | --oldincludedi | --oldincluded \
  | --oldinclude | --oldinclud | --oldinclu | --oldincl | --oldinc \
  | --oldin | --oldi | --old | --ol | --o)
    ac_prev=oldincludedir ;;
  -oldincludedir=* | --oldincludedir=* | --oldincludedi=* | --oldincluded=* \
  | --oldinclude=* | --oldinclud=* | --oldinclu=* | --oldincl=* | --oldinc=* \
  | --oldin=* | --oldi=* | --old=* | --ol=* | --o=*)
    oldincludedir=$ac_optarg ;;

  -prefix | --prefix | --prefi | --pref | --pre | --pr | --p)
    ac_prev=prefix ;;
  -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)
    prefix=$ac_optarg ;;

  -program-prefix | --program-prefix | --program-prefi | --program-pref \
  | --program-pre | --program-pr | --program-p)
    ac_prev=program_prefix ;;
  -program-prefix=* | --program-prefix=* | --program-prefi=* \
  | --program-pref=* | --program-pre=* | --program-pr=* | --program-p=*)
    program_prefix=$ac_optarg ;;

  -program-suffix | --program-suffix | --program-suffi | --program-suff \
  | --program-suf | --program-su | --program-s)
    ac_prev=program_suffix ;;
  -program-suffix=* | --program-suffix=* | --program-suffi=* \
  | --program-suff=* | --program-suf=* | --program-su=* | --program-s=*)
    program_suffix=$ac_optarg ;;

  -program-transform-name | --program-transform-name \
  | --program-transform-nam | --program-transform-na \
  | --program-transform-n | --program-transform- \
  | --program-transform | --program-transfor \
  | --program-transfo | --program-transf \
  | --program-trans | --program-tran \
  | --progr-tra | --program-tr | --program-t)
    ac_prev=program_transform_name ;;
  -program-transform-name=* | --program-transform-name=* \
  | --program-transform-nam=* | --program-transform-na=* \
  | --program-transform-n=* | --program-transform-=* \
  | --program-transform=* | --program-transfor=* \
  | --program-transfo=* | --program-transf=* \
  | --program-trans=* | --program-tran=* \
  | --progr-tra=* | --program-tr=* | --program-t=*)
    program_transform_name=$ac_optarg ;;

  -q | -quiet | --quiet | --quie | --qui | --qu | --q \
  | -silent | --silent | --silen | --sile | --sil)
    silent=yes ;;

  -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)
    ac_prev=sbindir ;;
  -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \
  | --sbi=* | --sb=*)
    sbindir=$ac_optarg ;;

  -sharedstatedir | --sharedstatedir | --sharedstatedi \
  | --sharedstated | --sharedstate | --sharedstat | --sharedsta \
  | --sharedst | --shareds | --shared | --share | --shar \
  | --sha | --sh)
    ac_prev=sharedstatedir ;;
  -sharedstatedir=* | --sharedstatedir=* | --sharedstatedi=* \
  | --sharedstated=* | --sharedstate=* | --sharedstat=* | --sharedsta=* \
  | --sharedst=* | --shareds=* | --shared=* | --share=* | --shar=* \
  | --sha=* | --sh=*)
    sharedstatedir=$ac_optarg ;;

  -site | --site | --sit)
    ac_prev=site ;;
  -site=* | --site=* | --sit=*)
    site=$ac_optarg ;;

  -srcdir | --srcdir | --srcdi | --srcd | --src | --sr)
    ac_prev=srcdir ;;
  -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=*)
    srcdir=$ac_optarg ;;

  -sysconfdir | --sysconfdir | --sysconfdi | --sysconfd | --sysconf \
  | --syscon | --sysco | --sysc | --sys | --sy)
    ac_prev=sysconfdir ;;
  -sysconfdir=* | --sysconfdir=* | --sysconfdi=* | --sysconfd=* | --sysconf=* \
  | --syscon=* | --sysco=* | --sysc=* | --sys=* | --sy=*)
    sysconfdir=$ac_optarg ;;

  -target | --target | --targe | --targ | --tar | --ta | --t)
    ac_prev=target_alias ;;
  -target=* | --target=* | --targe=* | --targ=* | --tar=* | --ta=* | --t=*)
    target_alias=$ac_optarg ;;

  -v | -verbose | --verbose | --verbos | --verbo | --verb)
    verbose=yes ;;

  -version | --version | --versio | --versi | --vers | -V)
    ac_init_version=: ;;

  -with-* | --with-*)
    ac_package=`expr "x$ac_option" : 'x-*with-\([^=]*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_package" : ".*[^-_$as_cr_alnum]" >/dev/null &&
      { echo "$as_me: error: invalid package name: $ac_package" >&2
   { (exit 1); exit 1; }; }
    ac_package=`echo $ac_package| sed 's/-/_/g'`
    case $ac_option in
      *=*) ac_optarg=`echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"`;;
      *) ac_optarg=yes ;;
    esac
    eval "with_$ac_package='$ac_optarg'" ;;

  -without-* | --without-*)
    ac_package=`expr "x$ac_option" : 'x-*without-\(.*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_package" : ".*[^-_$as_cr_alnum]" >/dev/null &&
      { echo "$as_me: error: invalid package name: $ac_package" >&2
   { (exit 1); exit 1; }; }
    ac_package=`echo $ac_package | sed 's/-/_/g'`
    eval "with_$ac_package=no" ;;

  --x)
    # Obsolete; use --with-x.
    with_x=yes ;;

  -x-includes | --x-includes | --x-include | --x-includ | --x-inclu \
  | --x-incl | --x-inc | --x-in | --x-i)
    ac_prev=x_includes ;;
  -x-includes=* | --x-includes=* | --x-include=* | --x-includ=* | --x-inclu=* \
  | --x-incl=* | --x-inc=* | --x-in=* | --x-i=*)
    x_includes=$ac_optarg ;;

  -x-libraries | --x-libraries | --x-librarie | --x-librari \
  | --x-librar | --x-libra | --x-libr | --x-lib | --x-li | --x-l)
    ac_prev=x_libraries ;;
  -x-libraries=* | --x-libraries=* | --x-librarie=* | --x-librari=* \
  | --x-librar=* | --x-libra=* | --x-libr=* | --x-lib=* | --x-li=* | --x-l=*)
    x_libraries=$ac_optarg ;;

  -*) { echo "$as_me: error: unrecognized option: $ac_option
Try \`$0 --help' for more information." >&2
   { (exit 1); exit 1; }; }
    ;;

  *=*)
    ac_envvar=`expr "x$ac_option" : 'x\([^=]*\)='`
    # Reject names that are not valid shell variable names.
    expr "x$ac_envvar" : ".*[^_$as_cr_alnum]" >/dev/null &&
      { echo "$as_me: error: invalid variable name: $ac_envvar" >&2
   { (exit 1); exit 1; }; }
    ac_optarg=`echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"`
    eval "$ac_envvar='$ac_optarg'"
    export $ac_envvar ;;

  *)
    # FIXME: should be removed in autoconf 3.0.
    echo "$as_me: WARNING: you should use --build, --host, --target" >&2
    expr "x$ac_option" : ".*[^-._$as_cr_alnum]" >/dev/null &&
      echo "$as_me: WARNING: invalid host type: $ac_option" >&2
    : ${build_alias=$ac_option} ${host_alias=$ac_option} ${target_alias=$ac_option}
    ;;

  esac
done

if test -n "$ac_prev"; then
  ac_option=--`echo $ac_prev | sed 's/_/-/g'`
  { echo "$as_me: error: missing argument to $ac_option" >&2
   { (exit 1); exit 1; }; }
fi

# Be sure to have absolute paths.
for ac_var in exec_prefix prefix
do
  eval ac_val=$`echo $ac_var`
  case $ac_val in
    [\\/$]* | ?:[\\/]* | NONE | '' ) ;;
    *)  { echo "$as_me: error: expected an absolute directory name for --$ac_var: $ac_val" >&2
   { (exit 1); exit 1; }; };;
  esac
done

# Be sure to have absolute paths.
for ac_var in bindir sbindir libexecdir datadir sysconfdir sharedstatedir \
              localstatedir libdir includedir oldincludedir infodir mandir
do
  eval ac_val=$`echo $ac_var`
  case $ac_val in
    [\\/$]* | ?:[\\/]* ) ;;
    *)  { echo "$as_me: error: expected an absolute directory name for --$ac_var: $ac_val" >&2
   { (exit 1); exit 1; }; };;
  esac
done

# There might be people who depend on the old broken behavior: `$host'
# used to hold the argument of --host etc.
# FIXME: To remove some day.
build=$build_alias
host=$host_alias
target=$target_alias

# FIXME: To remove some day.
if test "x$host_alias" != x; then
  if test "x$build_alias" = x; then
    cross_compiling=maybe
    echo "$as_me: WARNING: If you wanted to set the --build type, don't use --host.
    If a cross compiler is detected then cross compile mode will be used." >&2
  elif test "x$build_alias" != "x$host_alias"; then
    cross_compiling=yes
  fi
fi

ac_tool_prefix=
test -n "$host_alias" && ac_tool_prefix=$host_alias-

test "$silent" = yes && exec 6>/dev/null


# Find the source files, if location was not specified.
if test -z "$srcdir"; then
  ac_srcdir_defaulted=yes
  # Try the directory containing this script, then its parent.
  ac_confdir=`(dirname "$0") 2>/dev/null ||
$as_expr X"$0" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
         X"$0" : 'X\(//\)[^/]' \| \
         X"$0" : 'X\(//\)$' \| \
         X"$0" : 'X\(/\)' \| \
         .     : '\(.\)' 2>/dev/null ||
echo X"$0" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{ s//\1/; q; }
  	  /^X\(\/\/\)[^/].*/{ s//\1/; q; }
  	  /^X\(\/\/\)$/{ s//\1/; q; }
  	  /^X\(\/\).*/{ s//\1/; q; }
  	  s/.*/./; q'`
  srcdir=$ac_confdir
  if test ! -r $srcdir/$ac_unique_file; then
    srcdir=..
  fi
else
  ac_srcdir_defaulted=no
fi
if test ! -r $srcdir/$ac_unique_file; then
  if test "$ac_srcdir_defaulted" = yes; then
    { echo "$as_me: error: cannot find sources ($ac_unique_file) in $ac_confdir or .." >&2
   { (exit 1); exit 1; }; }
  else
    { echo "$as_me: error: cannot find sources ($ac_unique_file) in $srcdir" >&2
   { (exit 1); exit 1; }; }
  fi
fi
srcdir=`echo "$srcdir" | sed 's%\([^\\/]\)[\\/]*$%\1%'`
ac_env_build_alias_set=${build_alias+set}
ac_env_build_alias_value=$build_alias
ac_cv_env_build_alias_set=${build_alias+set}
ac_cv_env_build_alias_value=$build_alias
ac_env_host_alias_set=${host_alias+set}
ac_env_host_alias_value=$host_alias
ac_cv_env_host_alias_set=${host_alias+set}
ac_cv_env_host_alias_value=$host_alias
ac_env_target_alias_set=${target_alias+set}
ac_env_target_alias_value=$target_alias
ac_cv_env_target_alias_set=${target_alias+set}
ac_cv_env_target_alias_value=$target_alias
ac_env_CC_set=${CC+set}
ac_env_CC_value=$CC
ac_cv_env_CC_set=${CC+set}
ac_cv_env_CC_value=$CC
ac_env_CFLAGS_set=${CFLAGS+set}
ac_env_CFLAGS_value=$CFLAGS
ac_cv_env_CFLAGS_set=${CFLAGS+set}
ac_cv_env_CFLAGS_value=$CFLAGS
ac_env_LDFLAGS_set=${LDFLAGS+set}
ac_env_LDFLAGS_value=$LDFLAGS
ac_cv_env_LDFLAGS_set=${LDFLAGS+set}
ac_cv_env_LDFLAGS_value=$LDFLAGS
ac_env_CPPFLAGS_set=${CPPFLAGS+set}
ac_env_CPPFLAGS_value=$CPPFLAGS
ac_cv_env_CPPFLAGS_set=${CPPFLAGS+set}
ac_cv_env_CPPFLAGS_value=$CPPFLAGS
ac_env_CXX_set=${CXX+set}
ac_env_CXX_value=$CXX
ac_cv_env_CXX_set=${CXX+set}
ac_cv_env_CXX_value=$CXX
ac_env_CXXFLAGS_set=${CXXFLAGS+set}
ac_env_CXXFLAGS_value=$CXXFLAGS
ac_cv_env_CXXFLAGS_set=${CXXFLAGS+set}
ac_cv_env_CXXFLAGS_value=$CXXFLAGS
ac_env_F77_set=${F77+set}
ac_env_F77_value=$F77
ac_cv_env_F77_set=${F77+set}
ac_cv_env_F77_value=$F77
ac_env_FFLAGS_set=${FFLAGS+set}
ac_env_FFLAGS_value=$FFLAGS
ac_cv_env_FFLAGS_set=${FFLAGS+set}
ac_cv_env_FFLAGS_value=$FFLAGS
ac_env_CPP_set=${CPP+set}
ac_env_CPP_value=$CPP
ac_cv_env_CPP_set=${CPP+set}
ac_cv_env_CPP_value=$CPP
ac_env_CXXCPP_set=${CXXCPP+set}
ac_env_CXXCPP_value=$CXXCPP
ac_cv_env_CXXCPP_set=${CXXCPP+set}
ac_cv_env_CXXCPP_value=$CXXCPP

#
# Report the --help message.
#
if test "$ac_init_help" = "long"; then
  # Omit some internal or obsolete options to make the list less imposing.
  # This message is too long to be a string in the A/UX 3.1 sh.
  cat <<_ACEOF
\`configure' configures this package to adapt to many kinds of systems.

Usage: $0 [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print \`checking...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for \`--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or \`..']

_ACEOF

  cat <<_ACEOF
Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [$ac_default_prefix]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, \`make install' will install all the files in
\`$ac_default_prefix/bin', \`$ac_default_prefix/lib' etc.  You can specify
an installation prefix other than \`$ac_default_prefix' using \`--prefix',
for instance \`--prefix=\$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR           user executables [EPREFIX/bin]
  --sbindir=DIR          system admin executables [EPREFIX/sbin]
  --libexecdir=DIR       program executables [EPREFIX/libexec]
  --datadir=DIR          read-only architecture-independent data [PREFIX/share]
  --sysconfdir=DIR       read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR   modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR    modifiable single-machine data [PREFIX/var]
  --libdir=DIR           object code libraries [EPREFIX/lib]
  --includedir=DIR       C header files [PREFIX/include]
  --oldincludedir=DIR    C header files for non-gcc [/usr/include]
  --infodir=DIR          info documentation [PREFIX/info]
  --mandir=DIR           man documentation [PREFIX/man]
_ACEOF

  cat <<\_ACEOF

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]
_ACEOF
fi

if test -n "$ac_init_help"; then

  cat <<\_ACEOF

Optional Features:
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
--enable-verbosity                Turn on verbose configure output
--enable-threads                  Specify a thread implementation (pthreads or irix)
--enable-debug                    Turn on debugging (usually -g flag)
--enable-optimize                 Turn on optimize (usually -O2 flag)
--enable-64bit                    Compile in 64 bit mode
--enable-32bit                    Compile in 32 bit mode
--enable-output-avg-walltime      Output ellapsed wall-times
--enable-perfex                   Use perfex hardware counters
--enable-package                  Build the specified packages
--enable-exename                  Override the default executable name
--enable-largesos                 Build one .so per directory
--enable-sci-malloc               Use SCI malloc checker
--enable-assertion-level=N        Use assertion level N (0-3)
--enable-scirun2                  build experimental SCIRun 2

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
--with-thirdparty=<path-to-thirdparty>    <path-to-thirdparty>/lib/<all-thirdparty-libs}
--with-tcl=<path-to-tcl>          <path-to-tcl>/lib/libtcl.so
--with-xercesc=<path-to-xerces>   <path-to-xerces-c>/lib/libxerces-c.so
--with-teem=<path-to-teem>        <path-to-nrrd>/lib/libnrrd.so et al
--with-mpeg=<path-to-mpeg>        <path-to-mpege>/lib/libmpege.so
--with-blas=<path-to-blas>        <path-to-blas>/lib/libblas.a
--with-lapack=<path-to-lapack>    <path-to-lapack>/lib/liblapack.a
--with-mpi=<path-to-mpi>          <path-to-mpi>
--with-mpiuni=<path-to-mpiuni>    <path-to-mpiuni>
--with-hypre=<path-to-hypre>      <path-to-hypre>
--with-netsolve=<path-to-netsolve> <path-to-netsolve>
--with-petsc=<path-to-petsc>      <path-to-petsc>
--with-unipetsc=<path-to-unipetsc>  <path-to-petsc>/lib/libpetsc.so
--with-tau=<tau-makefile>         Specify Tau Makefile
--with-globus=DIR                 Use the globus installation in DIR
--with-insight=DIR                     Use the Insight installation in DIR
--with-qt=DIR                     Use the Qt installation in DIR
--with-babel=DIR                  Use the Babel installation in DIR
--with-opengl=DIR                 Use the OpenGL installation in DIR
--with-zlib=DIR                   Use the zlib installation in DIR
--with-vdt=DIR                    <path-to-vdt>
--with-jpeg=DIR                   <path-to-jpeg>/lib/libjpeg.so
--with-tiff=DIR                   <path-to-tiff>/lib/libtiff.so
--with-imagemagick=DIR            <path-to-imagemagick>
--with-mdsplus=<path-to-mdsplus>  <path-to-mdsplus>/lib/MdsLib_client.so
--with-glut=DIR                   Use the glut installation in DIR
--with-glui=DIR                   Use the glui installation in DIR
--with-oogl=DIR                   Use the oogl installation in DIR
--with-audio=DIR                   Use the audio installation in DIR

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  CPPFLAGS    C/C++ preprocessor flags, e.g. -I<include dir> if you have
              headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  F77         Fortran 77 compiler command
  FFLAGS      Fortran 77 compiler flags
  CPP         C preprocessor
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

_ACEOF
fi

if test "$ac_init_help" = "recursive"; then
  # If there are subdirs, report their specific --help.
  ac_popdir=`pwd`
  for ac_dir in : $ac_subdirs_all; do test "x$ac_dir" = x: && continue
    test -d $ac_dir || continue
    ac_builddir=.

if test "$ac_dir" != .; then
  ac_dir_suffix=/`echo "$ac_dir" | sed 's,^\.[\\/],,'`
  # A "../" for each directory in $ac_dir_suffix.
  ac_top_builddir=`echo "$ac_dir_suffix" | sed 's,/[^\\/]*,../,g'`
else
  ac_dir_suffix= ac_top_builddir=
fi

case $srcdir in
  .)  # No --srcdir option.  We are building in place.
    ac_srcdir=.
    if test -z "$ac_top_builddir"; then
       ac_top_srcdir=.
    else
       ac_top_srcdir=`echo $ac_top_builddir | sed 's,/$,,'`
    fi ;;
  [\\/]* | ?:[\\/]* )  # Absolute path.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir ;;
  *) # Relative path.
    ac_srcdir=$ac_top_builddir$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_builddir$srcdir ;;
esac
# Don't blindly perform a `cd "$ac_dir"/$ac_foo && pwd` since $ac_foo can be
# absolute.
ac_abs_builddir=`cd "$ac_dir" && cd $ac_builddir && pwd`
ac_abs_top_builddir=`cd "$ac_dir" && cd $ac_top_builddir && pwd`
ac_abs_srcdir=`cd "$ac_dir" && cd $ac_srcdir && pwd`
ac_abs_top_srcdir=`cd "$ac_dir" && cd $ac_top_srcdir && pwd`

    cd $ac_dir
    # Check for guested configure; otherwise get Cygnus style configure.
    if test -f $ac_srcdir/configure.gnu; then
      echo
      $SHELL $ac_srcdir/configure.gnu  --help=recursive
    elif test -f $ac_srcdir/configure; then
      echo
      $SHELL $ac_srcdir/configure  --help=recursive
    elif test -f $ac_srcdir/configure.ac ||
           test -f $ac_srcdir/configure.in; then
      echo
      $ac_configure --help
    else
      echo "$as_me: WARNING: no configuration information is in $ac_dir" >&2
    fi
    cd $ac_popdir
  done
fi

test -n "$ac_init_help" && exit 0
if $ac_init_version; then
  cat <<\_ACEOF

Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002
Free Software Foundation, Inc.
This configure script is free software; the Free Software Foundation
gives unlimited permission to copy, distribute and modify it.
_ACEOF
  exit 0
fi
exec 5>config.log
cat >&5 <<_ACEOF
This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by $as_me, which was
generated by GNU Autoconf 2.53.  Invocation command line was

  $ $0 $@

_ACEOF
{
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
hostinfo               = `(hostinfo) 2>/dev/null               || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  echo "PATH: $as_dir"
done

} >&5

cat >&5 <<_ACEOF


## ----------- ##
## Core tests. ##
## ----------- ##

_ACEOF


# Keep a trace of the command line.
# Strip out --no-create and --no-recursion so they do not pile up.
# Also quote any args containing shell meta-characters.
ac_configure_args=
ac_sep=
for ac_arg
do
  case $ac_arg in
  -no-create | --no-create | --no-creat | --no-crea | --no-cre \
  | --no-cr | --no-c | -n ) continue ;;
  -no-recursion | --no-recursion | --no-recursio | --no-recursi \
  | --no-recurs | --no-recur | --no-recu | --no-rec | --no-re | --no-r)
    continue ;;
  *" "*|*"	"*|*[\[\]\~\#\$\^\&\*\(\)\{\}\\\|\;\<\>\?\"\']*)
    ac_arg=`echo "$ac_arg" | sed "s/'/'\\\\\\\\''/g"` ;;
  esac
  case " $ac_configure_args " in
    *" '$ac_arg' "*) ;; # Avoid dups.  Use of quotes ensures accuracy.
    *) ac_configure_args="$ac_configure_args$ac_sep'$ac_arg'"
       ac_sep=" " ;;
  esac
  # Get rid of the leading space.
done

# When interrupted or exit'd, cleanup temporary files, and complete
# config.log.  We remove comments because anyway the quotes in there
# would cause problems or look ugly.
# WARNING: Be sure not to use single quotes in there, as some shells,
# such as our DU 5.0 friend, will then `close' the trap.
trap 'exit_status=$?
  # Save into config.log some information that might help in debugging.
  {
    echo
    cat <<\_ASBOX
## ---------------- ##
## Cache variables. ##
## ---------------- ##
_ASBOX
    echo
    # The following way of writing the cache mishandles newlines in values,
{
  (set) 2>&1 |
    case `(ac_space='"'"' '"'"'; set | grep ac_space) 2>&1` in
    *ac_space=\ *)
      sed -n \
        "s/'"'"'/'"'"'\\\\'"'"''"'"'/g;
    	  s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1='"'"'\\2'"'"'/p"
      ;;
    *)
      sed -n \
        "s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1=\\2/p"
      ;;
    esac;
}
    echo
    if test -s confdefs.h; then
      cat <<\_ASBOX
## ----------- ##
## confdefs.h. ##
## ----------- ##
_ASBOX
      echo
      sed "/^$/d" confdefs.h
      echo
    fi
    test "$ac_signal" != 0 &&
      echo "$as_me: caught signal $ac_signal"
    echo "$as_me: exit $exit_status"
  } >&5
  rm -f core core.* *.core &&
  rm -rf conftest* confdefs* conf$$* $ac_clean_files &&
    exit $exit_status
     ' 0
for ac_signal in 1 2 13 15; do
  trap 'ac_signal='$ac_signal'; { (exit 1); exit 1; }' $ac_signal
done
ac_signal=0

# confdefs.h avoids OS command line length limits that DEFS can exceed.
rm -rf conftest* confdefs.h
# AIX cpp loses on an empty file, so make sure it contains at least a newline.
echo >confdefs.h

# Predefined preprocessor variables.

cat >>confdefs.h <<_ACEOF
#define PACKAGE_NAME "$PACKAGE_NAME"
_ACEOF


cat >>confdefs.h <<_ACEOF
#define PACKAGE_TARNAME "$PACKAGE_TARNAME"
_ACEOF


cat >>confdefs.h <<_ACEOF
#define PACKAGE_VERSION "$PACKAGE_VERSION"
_ACEOF


cat >>confdefs.h <<_ACEOF
#define PACKAGE_STRING "$PACKAGE_STRING"
_ACEOF


cat >>confdefs.h <<_ACEOF
#define PACKAGE_BUGREPORT "$PACKAGE_BUGREPORT"
_ACEOF


# Let the site file select an alternate cache file if it wants to.
# Prefer explicitly selected file to automatically selected ones.
if test -z "$CONFIG_SITE"; then
  if test "x$prefix" != xNONE; then
    CONFIG_SITE="$prefix/share/config.site $prefix/etc/config.site"
  else
    CONFIG_SITE="$ac_default_prefix/share/config.site $ac_default_prefix/etc/config.site"
  fi
fi
for ac_site_file in $CONFIG_SITE; do
  if test -r "$ac_site_file"; then
    { echo "$as_me:$LINENO: loading site script $ac_site_file" >&5
echo "$as_me: loading site script $ac_site_file" >&6;}
    sed 's/^/| /' "$ac_site_file" >&5
    . "$ac_site_file"
  fi
done

if test -r "$cache_file"; then
  # Some versions of bash will fail to source /dev/null (special
  # files actually), so we avoid doing that.
  if test -f "$cache_file"; then
    { echo "$as_me:$LINENO: loading cache $cache_file" >&5
echo "$as_me: loading cache $cache_file" >&6;}
    case $cache_file in
      [\\/]* | ?:[\\/]* ) . $cache_file;;
      *)                      . ./$cache_file;;
    esac
  fi
else
  { echo "$as_me:$LINENO: creating cache $cache_file" >&5
echo "$as_me: creating cache $cache_file" >&6;}
  >$cache_file
fi

# Check that the precious variables saved in the cache have kept the same
# value.
ac_cache_corrupted=false
for ac_var in `(set) 2>&1 |
               sed -n 's/^ac_env_\([a-zA-Z_0-9]*\)_set=.*/\1/p'`; do
  eval ac_old_set=\$ac_cv_env_${ac_var}_set
  eval ac_new_set=\$ac_env_${ac_var}_set
  eval ac_old_val="\$ac_cv_env_${ac_var}_value"
  eval ac_new_val="\$ac_env_${ac_var}_value"
  case $ac_old_set,$ac_new_set in
    set,)
      { echo "$as_me:$LINENO: error: \`$ac_var' was set to \`$ac_old_val' in the previous run" >&5
echo "$as_me: error: \`$ac_var' was set to \`$ac_old_val' in the previous run" >&2;}
      ac_cache_corrupted=: ;;
    ,set)
      { echo "$as_me:$LINENO: error: \`$ac_var' was not set in the previous run" >&5
echo "$as_me: error: \`$ac_var' was not set in the previous run" >&2;}
      ac_cache_corrupted=: ;;
    ,);;
    *)
      if test "x$ac_old_val" != "x$ac_new_val"; then
        { echo "$as_me:$LINENO: error: \`$ac_var' has changed since the previous run:" >&5
echo "$as_me: error: \`$ac_var' has changed since the previous run:" >&2;}
        { echo "$as_me:$LINENO:   former value:  $ac_old_val" >&5
echo "$as_me:   former value:  $ac_old_val" >&2;}
        { echo "$as_me:$LINENO:   current value: $ac_new_val" >&5
echo "$as_me:   current value: $ac_new_val" >&2;}
        ac_cache_corrupted=:
      fi;;
  esac
  # Pass precious variables to config.status.
  if test "$ac_new_set" = set; then
    case $ac_new_val in
    *" "*|*"	"*|*[\[\]\~\#\$\^\&\*\(\)\{\}\\\|\;\<\>\?\"\']*)
      ac_arg=$ac_var=`echo "$ac_new_val" | sed "s/'/'\\\\\\\\''/g"` ;;
    *) ac_arg=$ac_var=$ac_new_val ;;
    esac
    case " $ac_configure_args " in
      *" '$ac_arg' "*) ;; # Avoid dups.  Use of quotes ensures accuracy.
      *) ac_configure_args="$ac_configure_args '$ac_arg'" ;;
    esac
  fi
done
if $ac_cache_corrupted; then
  { echo "$as_me:$LINENO: error: changes in the environment can compromise the build" >&5
echo "$as_me: error: changes in the environment can compromise the build" >&2;}
  { { echo "$as_me:$LINENO: error: run \`make distclean' and/or \`rm $cache_file' and start over" >&5
echo "$as_me: error: run \`make distclean' and/or \`rm $cache_file' and start over" >&2;}
   { (exit 1); exit 1; }; }
fi

ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu



















##  require autoconf version 2.0


##  set the location of config.guess, config.sub, and install.sh
ac_aux_dir=
for ac_dir in scripts $srcdir/scripts; do
  if test -f $ac_dir/install-sh; then
    ac_aux_dir=$ac_dir
    ac_install_sh="$ac_aux_dir/install-sh -c"
    break
  elif test -f $ac_dir/install.sh; then
    ac_aux_dir=$ac_dir
    ac_install_sh="$ac_aux_dir/install.sh -c"
    break
  elif test -f $ac_dir/shtool; then
    ac_aux_dir=$ac_dir
    ac_install_sh="$ac_aux_dir/shtool install -c"
    break
  fi
done
if test -z "$ac_aux_dir"; then
  { { echo "$as_me:$LINENO: error: cannot find install-sh or install.sh in scripts $srcdir/scripts" >&5
echo "$as_me: error: cannot find install-sh or install.sh in scripts $srcdir/scripts" >&2;}
   { (exit 1); exit 1; }; }
fi
ac_config_guess="$SHELL $ac_aux_dir/config.guess"
ac_config_sub="$SHELL $ac_aux_dir/config.sub"
ac_configure="$SHELL $ac_aux_dir/configure" # This should be Cygnus configure.


##  set the autoconf list delimiter
IFS=' '

##  set the output header to "sci_config.h"
ac_config_headers="$ac_config_headers sci_config.h"


##  initialize the recognized argument lists
SCI_ARG_WITH_LIST="--no-create --no-recursion"
SCI_ARG_ENABLE_LIST=""

## Pass on the echo flags to the other scripts.
ECHO_N=$ac_n
ECHO_C=$ac_c




##  -- test if echo needs "-e" to behave correctly (ie: to use \n)
result=`echo -e abc`
if test "$result" = "abc"; then
  use_minus_e="-e"
fi

LDRUN_PREFIX="-Wl,-rpath -Wl,"

##  ---------------------------------------------------------------------
##  --------------------  new macro definitions  ------------------------
##  ---------------------------------------------------------------------

##  none of the new macros can be nested with or within other macros

##  these are platform sensitive - be very careful, when adding or
##  editing, to make sure it works on all required platforms

##  SCI_MSG_ERROR(message)
##
##     Wrapper for AC_MSG_ERROR but tells user to try configuring with
##     --enable-verbosity to get more help in figuring out what is
##     wrong.



##
##  SCI_CHECK_LIB(paths,
##                lib,
##                function,
##                other-libraries,
##                cxx,
##                optional)
##
##  - Check whether the function exists within the lib found in path(s).
##      (If "path" is blank (""), then see if the compiler automatically
##      finds it.)
##  - Set function to "main" if you want to see if the lib just exists
##      within the lib found in path(s).
##  - Set function to "" if you want to see if the lib just exists.
##  - Use other-libraries to resolve undefined symbols.
##
##  - Sets the following shell variables (Note: $lib will be in all caps.):
##    (path is path to the library.  If not found, these are set to '')
##
##      Variable            Value
##      --------            -----
##      LIB_DIR_$lib        => path
##      $lib_LIB_DIR_FLAG   => -Lpath
##      $lib_LIB_FLAG  =>   -l$2 (The $2 is lib name)
##      HAVE_LIB_$lib   =>   yes
##
##  - cxx == "no" => C lib, don't need "extern C" stuff.
##        == "yes" or anything else => Lib being tested for is a C++ lib.
##        This is done because we need to be able to use this check on
##        C only libraries.  This is done before we call
##        AC_LANG_CPLUSPLUS (which (I think) switches everything into
##        C++ only mode.)
##  - optional: whether this library is optional.  If the library is
##        not found and is marked as not-optional, configure will
##        exit and print diagnostic info.
##        PARAMETER MUST BE SET TO EITHER: "not-optional", or "optional".
##


## END SCI_CHECK_LIB

##
##  SCI_CHECK_HEADERS(paths,
##                    header-list,
##                    other-paths,
##                    cxx,
##                    optional)
##
##  If "paths" is blank, see if compiler can find it in a generic
##  path.  Otherwise, check whether the listed headers exist in the
##  path(s).  Use 'other-paths' if the headers nee to #include other
##  headers in different paths
##
##  cxx == "yes" => c++ header
##      == "no" or anything else => C header,
##
##  SCI_CHECK_HEADERS will set (in allcaps):
##                       Example       If found        If not found
#                          Name     (& not generic)  (or in generic path)
##                      ---------   ---------------  --------------------
##  INC_$<first-header> INC_MATH_H     -I$path                ''
##  HAVE_<HEADER_H>     HAVE_MATH_H     'yes'                 ''
##


## END SCI CHECK HEADERS

##
##  SCI_CHECK_VERSION(prog,verflag,need-version,if-correct,if-not-correct,comp)
##
##  check whether the prog's version is >= need-version.
##  currently only supports version numbers of the form NUM(.NUM)*, no
##  letters allowed!  comp is the optional comparison used to _reject_
##  the program's version - the default is "-gt" (i.e. is need > have)
##



##
##  SCI_CHECK_VAR_VERSION(name,var,need-version,if-correct,if-not-correct,comp)
##
##  check whether the var (which represents a version number) version
##  is >= need-version.
##  currently only supports version numbers of the form NUM(.NUM)*, no
##  letters allowed!  comp is the optional comparison used to _reject_
##  the program's version - the default is "-gt" (i.e. is need > have)
##



##
##  SCI_CHECK_OS_VERSION(need-version,if-correct,if-not-correct,comp)
##
##  check whether the OS's version (uname -r) is >= need-version.
##  currently only supports version numbers of the form NUM(.NUM)*, no
##  letters allowed!  comp is the optional comparison used to _reject_
##  the program's version - the default is "-gt" (i.e. is need > have)
##



##
##  SCI_ARG_WITH(arg-string, usage-string, if-used, if-not-used)
##
##    if an arg is provide to the "with", the arg must be a directory
##    or a file.  If not, a configure error is raised.  This will avoid
##    the problem of mis-typing the name of the "--with" dir/file.
##
##    does the same thing as AC_ARG_WITH (infact, it uses it), but
##    also appends arg-string to the master list of arg-strings
##



##
##  SCI_ARG_ENABLE(arg-string, usage-string, if-used, if-not-used)
##
##  does the same thing as AC_ARG_ENABLE (infact, it uses it), but
##  also appends arg-string to the master list of arg-strings
##



##  --------------------------------------------------------------------
##  Save off the arguments to configure, being careful to save
##  Package strings for later parsing.
##  --------------------------------------------------------------------

IFS='^'
args=`echo "$*" | sed 's% %_%g'`
myargs=`echo $args | sed 's%\^% %g'`
IFS=' '

DIRNAME_IS=`type dirname | sed 's%^.* %%'`
BASENAME_IS=`type dirname | sed 's%^.* %%'`

## We use both of these in a number of spots, so I think this is fair:
## (Eventually we could write our own if necessary...
if test -z "$DIRNAME_IS" -o -z "$BASENAME_IS"; then
  { { echo "$as_me:$LINENO: error: dirname or basename not found.  Configure script won't work!" >&5
echo "$as_me: error: dirname or basename not found.  Configure script won't work!" >&2;}
   { (exit 1); exit 1; }; }
fi

if test "$CC" = ""; then
  ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu
if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}gcc", so it can be a program name with args.
set dummy ${ac_tool_prefix}gcc; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_CC+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$CC"; then
  ac_cv_prog_CC="$CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_CC="${ac_tool_prefix}gcc"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
CC=$ac_cv_prog_CC
if test -n "$CC"; then
  echo "$as_me:$LINENO: result: $CC" >&5
echo "${ECHO_T}$CC" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

fi
if test -z "$ac_cv_prog_CC"; then
  ac_ct_CC=$CC
  # Extract the first word of "gcc", so it can be a program name with args.
set dummy gcc; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_ac_ct_CC+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$ac_ct_CC"; then
  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_CC="gcc"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
ac_ct_CC=$ac_cv_prog_ac_ct_CC
if test -n "$ac_ct_CC"; then
  echo "$as_me:$LINENO: result: $ac_ct_CC" >&5
echo "${ECHO_T}$ac_ct_CC" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

  CC=$ac_ct_CC
else
  CC="$ac_cv_prog_CC"
fi

if test -z "$CC"; then
  if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}cc", so it can be a program name with args.
set dummy ${ac_tool_prefix}cc; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_CC+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$CC"; then
  ac_cv_prog_CC="$CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_CC="${ac_tool_prefix}cc"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
CC=$ac_cv_prog_CC
if test -n "$CC"; then
  echo "$as_me:$LINENO: result: $CC" >&5
echo "${ECHO_T}$CC" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

fi
if test -z "$ac_cv_prog_CC"; then
  ac_ct_CC=$CC
  # Extract the first word of "cc", so it can be a program name with args.
set dummy cc; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_ac_ct_CC+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$ac_ct_CC"; then
  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_CC="cc"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
ac_ct_CC=$ac_cv_prog_ac_ct_CC
if test -n "$ac_ct_CC"; then
  echo "$as_me:$LINENO: result: $ac_ct_CC" >&5
echo "${ECHO_T}$ac_ct_CC" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

  CC=$ac_ct_CC
else
  CC="$ac_cv_prog_CC"
fi

fi
if test -z "$CC"; then
  # Extract the first word of "cc", so it can be a program name with args.
set dummy cc; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_CC+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$CC"; then
  ac_cv_prog_CC="$CC" # Let the user override the test.
else
  ac_prog_rejected=no
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    if test "$as_dir/$ac_word$ac_exec_ext" = "/usr/ucb/cc"; then
       ac_prog_rejected=yes
       continue
     fi
    ac_cv_prog_CC="cc"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

if test $ac_prog_rejected = yes; then
  # We found a bogon in the path, so make sure we never use it.
  set dummy $ac_cv_prog_CC
  shift
  if test $# != 0; then
    # We chose a different compiler from the bogus one.
    # However, it has the same basename, so the bogon will be chosen
    # first if we set CC to just the basename; use the full file name.
    shift
    set dummy "$as_dir/$ac_word" ${1+"$@"}
    shift
    ac_cv_prog_CC="$@"
  fi
fi
fi
fi
CC=$ac_cv_prog_CC
if test -n "$CC"; then
  echo "$as_me:$LINENO: result: $CC" >&5
echo "${ECHO_T}$CC" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

fi
if test -z "$CC"; then
  if test -n "$ac_tool_prefix"; then
  for ac_prog in cl
  do
    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
set dummy $ac_tool_prefix$ac_prog; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_CC+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$CC"; then
  ac_cv_prog_CC="$CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_CC="$ac_tool_prefix$ac_prog"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
CC=$ac_cv_prog_CC
if test -n "$CC"; then
  echo "$as_me:$LINENO: result: $CC" >&5
echo "${ECHO_T}$CC" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

    test -n "$CC" && break
  done
fi
if test -z "$CC"; then
  ac_ct_CC=$CC
  for ac_prog in cl
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_ac_ct_CC+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$ac_ct_CC"; then
  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_CC="$ac_prog"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
ac_ct_CC=$ac_cv_prog_ac_ct_CC
if test -n "$ac_ct_CC"; then
  echo "$as_me:$LINENO: result: $ac_ct_CC" >&5
echo "${ECHO_T}$ac_ct_CC" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

  test -n "$ac_ct_CC" && break
done

  CC=$ac_ct_CC
fi

fi


test -z "$CC" && { { echo "$as_me:$LINENO: error: no acceptable C compiler found in \$PATH" >&5
echo "$as_me: error: no acceptable C compiler found in \$PATH" >&2;}
   { (exit 1); exit 1; }; }

# Provide some information about the compiler.
echo "$as_me:$LINENO:" \
     "checking for C compiler version" >&5
ac_compiler=`set X $ac_compile; echo $2`
{ (eval echo "$as_me:$LINENO: \"$ac_compiler --version </dev/null >&5\"") >&5
  (eval $ac_compiler --version </dev/null >&5) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }
{ (eval echo "$as_me:$LINENO: \"$ac_compiler -v </dev/null >&5\"") >&5
  (eval $ac_compiler -v </dev/null >&5) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }
{ (eval echo "$as_me:$LINENO: \"$ac_compiler -V </dev/null >&5\"") >&5
  (eval $ac_compiler -V </dev/null >&5) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }

cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"

#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{

  ;
  return 0;
}
_ACEOF
ac_clean_files_save=$ac_clean_files
ac_clean_files="$ac_clean_files a.out a.exe"
# Try to create an executable without -o first, disregard a.out.
# It will help us diagnose broken compilers, and finding out an intuition
# of exeext.
echo "$as_me:$LINENO: checking for C compiler default output" >&5
echo $ECHO_N "checking for C compiler default output... $ECHO_C" >&6
ac_link_default=`echo "$ac_link" | sed 's/ -o *conftest[^ ]*//'`
if { (eval echo "$as_me:$LINENO: \"$ac_link_default\"") >&5
  (eval $ac_link_default) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; then
  # Find the output, starting from the most likely.  This scheme is
# not robust to junk in `.', hence go to wildcards (a.*) only as a last
# resort.

# Be careful to initialize this variable, since it used to be cached.
# Otherwise an old cache value of `no' led to `EXEEXT = no' in a Makefile.
ac_cv_exeext=
for ac_file in `ls a_out.exe a.exe conftest.exe 2>/dev/null;
                ls a.out conftest 2>/dev/null;
                ls a.* conftest.* 2>/dev/null`; do
  case $ac_file in
    *.$ac_ext | *.o | *.obj | *.xcoff | *.tds | *.d | *.pdb | *.xSYM ) ;;
    a.out ) # We found the default executable, but exeext='' is most
            # certainly right.
            break;;
    *.* ) ac_cv_exeext=`expr "$ac_file" : '[^.]*\(\..*\)'`
          # FIXME: I believe we export ac_cv_exeext for Libtool --akim.
          export ac_cv_exeext
          break;;
    * ) break;;
  esac
done
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
{ { echo "$as_me:$LINENO: error: C compiler cannot create executables" >&5
echo "$as_me: error: C compiler cannot create executables" >&2;}
   { (exit 77); exit 77; }; }
fi

ac_exeext=$ac_cv_exeext
echo "$as_me:$LINENO: result: $ac_file" >&5
echo "${ECHO_T}$ac_file" >&6

# Check the compiler produces executables we can run.  If not, either
# the compiler is broken, or we cross compile.
echo "$as_me:$LINENO: checking whether the C compiler works" >&5
echo $ECHO_N "checking whether the C compiler works... $ECHO_C" >&6
# FIXME: These cross compiler hacks should be removed for Autoconf 3.0
# If not cross compiling, check that we can run a simple program.
if test "$cross_compiling" != yes; then
  if { ac_try='./$ac_file'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
    cross_compiling=no
  else
    if test "$cross_compiling" = maybe; then
	cross_compiling=yes
    else
	{ { echo "$as_me:$LINENO: error: cannot run C compiled programs.
If you meant to cross compile, use \`--host'." >&5
echo "$as_me: error: cannot run C compiled programs.
If you meant to cross compile, use \`--host'." >&2;}
   { (exit 1); exit 1; }; }
    fi
  fi
fi
echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6

rm -f a.out a.exe conftest$ac_cv_exeext
ac_clean_files=$ac_clean_files_save
# Check the compiler produces executables we can run.  If not, either
# the compiler is broken, or we cross compile.
echo "$as_me:$LINENO: checking whether we are cross compiling" >&5
echo $ECHO_N "checking whether we are cross compiling... $ECHO_C" >&6
echo "$as_me:$LINENO: result: $cross_compiling" >&5
echo "${ECHO_T}$cross_compiling" >&6

echo "$as_me:$LINENO: checking for suffix of executables" >&5
echo $ECHO_N "checking for suffix of executables... $ECHO_C" >&6
if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
  (eval $ac_link) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; then
  # If both `conftest.exe' and `conftest' are `present' (well, observable)
# catch `conftest.exe'.  For instance with Cygwin, `ls conftest' will
# work properly (i.e., refer to `conftest.exe'), while it won't with
# `rm'.
for ac_file in `(ls conftest.exe; ls conftest; ls conftest.*) 2>/dev/null`; do
  case $ac_file in
    *.$ac_ext | *.o | *.obj | *.xcoff | *.tds | *.d | *.pdb ) ;;
    *.* ) ac_cv_exeext=`expr "$ac_file" : '[^.]*\(\..*\)'`
          export ac_cv_exeext
          break;;
    * ) break;;
  esac
done
else
  { { echo "$as_me:$LINENO: error: cannot compute suffix of executables: cannot compile and link" >&5
echo "$as_me: error: cannot compute suffix of executables: cannot compile and link" >&2;}
   { (exit 1); exit 1; }; }
fi

rm -f conftest$ac_cv_exeext
echo "$as_me:$LINENO: result: $ac_cv_exeext" >&5
echo "${ECHO_T}$ac_cv_exeext" >&6

rm -f conftest.$ac_ext
EXEEXT=$ac_cv_exeext
ac_exeext=$EXEEXT
echo "$as_me:$LINENO: checking for suffix of object files" >&5
echo $ECHO_N "checking for suffix of object files... $ECHO_C" >&6
if test "${ac_cv_objext+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"

#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{

  ;
  return 0;
}
_ACEOF
rm -f conftest.o conftest.obj
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; then
  for ac_file in `(ls conftest.o conftest.obj; ls conftest.*) 2>/dev/null`; do
  case $ac_file in
    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb ) ;;
    *) ac_cv_objext=`expr "$ac_file" : '.*\.\(.*\)'`
       break;;
  esac
done
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
{ { echo "$as_me:$LINENO: error: cannot compute suffix of object files: cannot compile" >&5
echo "$as_me: error: cannot compute suffix of object files: cannot compile" >&2;}
   { (exit 1); exit 1; }; }
fi

rm -f conftest.$ac_cv_objext conftest.$ac_ext
fi
echo "$as_me:$LINENO: result: $ac_cv_objext" >&5
echo "${ECHO_T}$ac_cv_objext" >&6
OBJEXT=$ac_cv_objext
ac_objext=$OBJEXT
echo "$as_me:$LINENO: checking whether we are using the GNU C compiler" >&5
echo $ECHO_N "checking whether we are using the GNU C compiler... $ECHO_C" >&6
if test "${ac_cv_c_compiler_gnu+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"

#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
#ifndef __GNUC__
       choke me
#endif

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_compiler_gnu=yes
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_compiler_gnu=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext
ac_cv_c_compiler_gnu=$ac_compiler_gnu

fi
echo "$as_me:$LINENO: result: $ac_cv_c_compiler_gnu" >&5
echo "${ECHO_T}$ac_cv_c_compiler_gnu" >&6
GCC=`test $ac_compiler_gnu = yes && echo yes`
ac_test_CFLAGS=${CFLAGS+set}
ac_save_CFLAGS=$CFLAGS
CFLAGS="-g"
echo "$as_me:$LINENO: checking whether $CC accepts -g" >&5
echo $ECHO_N "checking whether $CC accepts -g... $ECHO_C" >&6
if test "${ac_cv_prog_cc_g+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"

#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_cv_prog_cc_g=yes
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_cv_prog_cc_g=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext
fi
echo "$as_me:$LINENO: result: $ac_cv_prog_cc_g" >&5
echo "${ECHO_T}$ac_cv_prog_cc_g" >&6
if test "$ac_test_CFLAGS" = set; then
  CFLAGS=$ac_save_CFLAGS
elif test $ac_cv_prog_cc_g = yes; then
  if test "$GCC" = yes; then
    CFLAGS="-g -O2"
  else
    CFLAGS="-g"
  fi
else
  if test "$GCC" = yes; then
    CFLAGS="-O2"
  else
    CFLAGS=
  fi
fi
# Some people use a C++ compiler to compile C.  Since we use `exit',
# in C++ we need to declare it.  In case someone uses the same compiler
# for both compiling C and C++ we need to have the C++ compiler decide
# the declaration of exit, since it's the most demanding environment.
cat >conftest.$ac_ext <<_ACEOF
#ifndef __cplusplus
  choke me
#endif
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  for ac_declaration in \
   ''\
   '#include <stdlib.h>' \
   'extern "C" void std::exit (int) throw (); using std::exit;' \
   'extern "C" void std::exit (int); using std::exit;' \
   'extern "C" void exit (int) throw ();' \
   'extern "C" void exit (int);' \
   'void exit (int);'
do
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <stdlib.h>
$ac_declaration
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
exit (42);
  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  :
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
continue
fi
rm -f conftest.$ac_objext conftest.$ac_ext
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
$ac_declaration
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
exit (42);
  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  break
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
fi
rm -f conftest.$ac_objext conftest.$ac_ext
done
rm -f conftest*
if test -n "$ac_declaration"; then
  echo '#ifdef __cplusplus' >>confdefs.h
  echo $ac_declaration      >>confdefs.h
  echo '#endif'             >>confdefs.h
fi

else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
fi
rm -f conftest.$ac_objext conftest.$ac_ext
ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu

  { echo "$as_me:$LINENO: WARNING: C compiler not specified with 'CC' environment variable.\
	    Using default... $CC" >&5
echo "$as_me: WARNING: C compiler not specified with 'CC' environment variable.\
	    Using default... $CC" >&2;}

fi

if test "$CXX" = ""; then
  ac_ext=cc
ac_cpp='$CXXCPP $CPPFLAGS'
ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
if test -n "$ac_tool_prefix"; then
  for ac_prog in $CCC CC gcc g++ c++
  do
    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
set dummy $ac_tool_prefix$ac_prog; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_CXX+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$CXX"; then
  ac_cv_prog_CXX="$CXX" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_CXX="$ac_tool_prefix$ac_prog"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
CXX=$ac_cv_prog_CXX
if test -n "$CXX"; then
  echo "$as_me:$LINENO: result: $CXX" >&5
echo "${ECHO_T}$CXX" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

    test -n "$CXX" && break
  done
fi
if test -z "$CXX"; then
  ac_ct_CXX=$CXX
  for ac_prog in $CCC CC gcc g++ c++
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_ac_ct_CXX+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$ac_ct_CXX"; then
  ac_cv_prog_ac_ct_CXX="$ac_ct_CXX" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_CXX="$ac_prog"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
ac_ct_CXX=$ac_cv_prog_ac_ct_CXX
if test -n "$ac_ct_CXX"; then
  echo "$as_me:$LINENO: result: $ac_ct_CXX" >&5
echo "${ECHO_T}$ac_ct_CXX" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

  test -n "$ac_ct_CXX" && break
done
test -n "$ac_ct_CXX" || ac_ct_CXX="g++"

  CXX=$ac_ct_CXX
fi


# Provide some information about the compiler.
echo "$as_me:$LINENO:" \
     "checking for C++ compiler version" >&5
ac_compiler=`set X $ac_compile; echo $2`
{ (eval echo "$as_me:$LINENO: \"$ac_compiler --version </dev/null >&5\"") >&5
  (eval $ac_compiler --version </dev/null >&5) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }
{ (eval echo "$as_me:$LINENO: \"$ac_compiler -v </dev/null >&5\"") >&5
  (eval $ac_compiler -v </dev/null >&5) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }
{ (eval echo "$as_me:$LINENO: \"$ac_compiler -V </dev/null >&5\"") >&5
  (eval $ac_compiler -V </dev/null >&5) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }

echo "$as_me:$LINENO: checking whether we are using the GNU C++ compiler" >&5
echo $ECHO_N "checking whether we are using the GNU C++ compiler... $ECHO_C" >&6
if test "${ac_cv_cxx_compiler_gnu+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"

#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
#ifndef __GNUC__
       choke me
#endif

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_compiler_gnu=yes
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_compiler_gnu=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext
ac_cv_cxx_compiler_gnu=$ac_compiler_gnu

fi
echo "$as_me:$LINENO: result: $ac_cv_cxx_compiler_gnu" >&5
echo "${ECHO_T}$ac_cv_cxx_compiler_gnu" >&6
GXX=`test $ac_compiler_gnu = yes && echo yes`
ac_test_CXXFLAGS=${CXXFLAGS+set}
ac_save_CXXFLAGS=$CXXFLAGS
CXXFLAGS="-g"
echo "$as_me:$LINENO: checking whether $CXX accepts -g" >&5
echo $ECHO_N "checking whether $CXX accepts -g... $ECHO_C" >&6
if test "${ac_cv_prog_cxx_g+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"

#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_cv_prog_cxx_g=yes
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_cv_prog_cxx_g=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext
fi
echo "$as_me:$LINENO: result: $ac_cv_prog_cxx_g" >&5
echo "${ECHO_T}$ac_cv_prog_cxx_g" >&6
if test "$ac_test_CXXFLAGS" = set; then
  CXXFLAGS=$ac_save_CXXFLAGS
elif test $ac_cv_prog_cxx_g = yes; then
  if test "$GXX" = yes; then
    CXXFLAGS="-g -O2"
  else
    CXXFLAGS="-g"
  fi
else
  if test "$GXX" = yes; then
    CXXFLAGS="-O2"
  else
    CXXFLAGS=
  fi
fi
for ac_declaration in \
   ''\
   '#include <stdlib.h>' \
   'extern "C" void std::exit (int) throw (); using std::exit;' \
   'extern "C" void std::exit (int); using std::exit;' \
   'extern "C" void exit (int) throw ();' \
   'extern "C" void exit (int);' \
   'void exit (int);'
do
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <stdlib.h>
$ac_declaration
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
exit (42);
  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  :
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
continue
fi
rm -f conftest.$ac_objext conftest.$ac_ext
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
$ac_declaration
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
exit (42);
  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  break
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
fi
rm -f conftest.$ac_objext conftest.$ac_ext
done
rm -f conftest*
if test -n "$ac_declaration"; then
  echo '#ifdef __cplusplus' >>confdefs.h
  echo $ac_declaration      >>confdefs.h
  echo '#endif'             >>confdefs.h
fi

ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu

  { echo "$as_me:$LINENO: WARNING: C++ compiler not specified with 'CXX' environment variable.\
	    Using default... $CXX" >&5
echo "$as_me: WARNING: C++ compiler not specified with 'CXX' environment variable.\
	    Using default... $CXX" >&2;}

fi
if test "$F77" = ""; then
  ac_ext=f
ac_compile='$F77 -c $FFLAGS conftest.$ac_ext >&5'
ac_link='$F77 -o conftest$ac_exeext $FFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_f77_compiler_gnu
if test -n "$ac_tool_prefix"; then
  for ac_prog in g77 f77 xlf cf77 cft77 frt pgf77 fl32 af77 fort77 f90 xlf90 pgf90 epcf90 f95 fort xlf95 lf95 g95 fc
  do
    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
set dummy $ac_tool_prefix$ac_prog; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_F77+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$F77"; then
  ac_cv_prog_F77="$F77" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_F77="$ac_tool_prefix$ac_prog"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
F77=$ac_cv_prog_F77
if test -n "$F77"; then
  echo "$as_me:$LINENO: result: $F77" >&5
echo "${ECHO_T}$F77" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

    test -n "$F77" && break
  done
fi
if test -z "$F77"; then
  ac_ct_F77=$F77
  for ac_prog in g77 f77 xlf cf77 cft77 frt pgf77 fl32 af77 fort77 f90 xlf90 pgf90 epcf90 f95 fort xlf95 lf95 g95 fc
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_ac_ct_F77+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$ac_ct_F77"; then
  ac_cv_prog_ac_ct_F77="$ac_ct_F77" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_F77="$ac_prog"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
ac_ct_F77=$ac_cv_prog_ac_ct_F77
if test -n "$ac_ct_F77"; then
  echo "$as_me:$LINENO: result: $ac_ct_F77" >&5
echo "${ECHO_T}$ac_ct_F77" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

  test -n "$ac_ct_F77" && break
done

  F77=$ac_ct_F77
fi


# Provide some information about the compiler.
echo "$as_me:2666:" \
     "checking for Fortran 77 compiler version" >&5
ac_compiler=`set X $ac_compile; echo $2`
{ (eval echo "$as_me:$LINENO: \"$ac_compiler --version </dev/null >&5\"") >&5
  (eval $ac_compiler --version </dev/null >&5) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }
{ (eval echo "$as_me:$LINENO: \"$ac_compiler -v </dev/null >&5\"") >&5
  (eval $ac_compiler -v </dev/null >&5) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }
{ (eval echo "$as_me:$LINENO: \"$ac_compiler -V </dev/null >&5\"") >&5
  (eval $ac_compiler -V </dev/null >&5) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }

# If we don't use `.F' as extension, the preprocessor is not run on the
# input file.
ac_save_ext=$ac_ext
ac_ext=F
echo "$as_me:$LINENO: checking whether we are using the GNU Fortran 77 compiler" >&5
echo $ECHO_N "checking whether we are using the GNU Fortran 77 compiler... $ECHO_C" >&6
if test "${ac_cv_f77_compiler_gnu+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.$ac_ext <<_ACEOF
      program main
#ifndef __GNUC__
       choke me
#endif

      end
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_compiler_gnu=yes
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_compiler_gnu=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext
ac_cv_f77_compiler_gnu=$ac_compiler_gnu

fi
echo "$as_me:$LINENO: result: $ac_cv_f77_compiler_gnu" >&5
echo "${ECHO_T}$ac_cv_f77_compiler_gnu" >&6
ac_ext=$ac_save_ext
G77=`test $ac_compiler_gnu = yes && echo yes`
ac_test_FFLAGS=${FFLAGS+set}
ac_save_FFLAGS=$FFLAGS
FFLAGS=
echo "$as_me:$LINENO: checking whether $F77 accepts -g" >&5
echo $ECHO_N "checking whether $F77 accepts -g... $ECHO_C" >&6
if test "${ac_cv_prog_f77_g+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  FFLAGS=-g
cat >conftest.$ac_ext <<_ACEOF
      program main

      end
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_cv_prog_f77_g=yes
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_cv_prog_f77_g=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext

fi
echo "$as_me:$LINENO: result: $ac_cv_prog_f77_g" >&5
echo "${ECHO_T}$ac_cv_prog_f77_g" >&6
if test "$ac_test_FFLAGS" = set; then
  FFLAGS=$ac_save_FFLAGS
elif test $ac_cv_prog_f77_g = yes; then
  if test "$G77" = yes; then
    FFLAGS="-g -O2"
  else
    FFLAGS="-g"
  fi
else
  if test "$G77" = yes; then
    FFLAGS="-O2"
  else
    FFLAGS=
  fi
fi
ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu

  { echo "$as_me:$LINENO: WARNING: Fortran compiler not specified with 'F77' environment \
	    variable. Using default... $F77" >&5
echo "$as_me: WARNING: Fortran compiler not specified with 'F77' environment \
	    variable. Using default... $F77" >&2;}
fi

CC_REALLY_IS=`type $CC | sed 's%^.* %%'`
# Going to look for "as", "ld", etc in this dir:
COMPILER_DIR=`dirname $CC_REALLY_IS`

##  --------------------------------------------------------------------
##  ------------------  declare all arguments here  --------------------
##  --------------------------------------------------------------------

##
##  Use the SCI_ARG_WITH and SCI_ARG_ENABLE macros to declare arguments
##


    ##  SCI_ARG_WITH


# Check whether --with-thirdparty or --without-thirdparty was given.
if test "${with_thirdparty+set}" = set; then
  withval="$with_thirdparty"
  thirdparty="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-thirdparty --without-thirdparty"
else
  thirdparty=""
fi;

    if test -n "$thirdparty" -a ! -e "$thirdparty"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($thirdparty) specified for --with-thirdparty does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($thirdparty) specified for --with-thirdparty does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-tcl or --without-tcl was given.
if test "${with_tcl+set}" = set; then
  withval="$with_tcl"
  with_tcl="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-tcl --without-tcl"
else
  with_tcl=""
fi;

    if test -n "$tcl" -a ! -e "$tcl"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($tcl) specified for --with-tcl does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($tcl) specified for --with-tcl does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-xercesc or --without-xercesc was given.
if test "${with_xercesc+set}" = set; then
  withval="$with_xercesc"
  with_xercesc="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-xercesc --without-xercesc"
else
  with_xercesc=""
fi;

    if test -n "$xercesc" -a ! -e "$xercesc"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($xercesc) specified for --with-xercesc does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($xercesc) specified for --with-xercesc does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-teem or --without-teem was given.
if test "${with_teem+set}" = set; then
  withval="$with_teem"
  with_teem="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-teem --without-teem"
else
  with_teem=""
fi;

    if test -n "$teem" -a ! -e "$teem"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($teem) specified for --with-teem does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($teem) specified for --with-teem does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-mpeg or --without-mpeg was given.
if test "${with_mpeg+set}" = set; then
  withval="$with_mpeg"
  with_mpeg="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-mpeg --without-mpeg"
else
  with_mpeg=""
fi;

    if test -n "$mpeg" -a ! -e "$mpeg"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($mpeg) specified for --with-mpeg does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($mpeg) specified for --with-mpeg does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-blas or --without-blas was given.
if test "${with_blas+set}" = set; then
  withval="$with_blas"
  with_blas="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-blas --without-blas"
else
  with_blas=""
fi;

    if test -n "$blas" -a ! -e "$blas"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($blas) specified for --with-blas does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($blas) specified for --with-blas does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-lapack or --without-lapack was given.
if test "${with_lapack+set}" = set; then
  withval="$with_lapack"
  with_lapack="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-lapack --without-lapack"
else
  with_lapack=""
fi;

    if test -n "$lapack" -a ! -e "$lapack"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($lapack) specified for --with-lapack does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($lapack) specified for --with-lapack does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-mpi or --without-mpi was given.
if test "${with_mpi+set}" = set; then
  withval="$with_mpi"
  with_mpi="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-mpi --without-mpi"
else
  with_mpi=""
fi;

    if test -n "$mpi" -a ! -e "$mpi"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($mpi) specified for --with-mpi does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($mpi) specified for --with-mpi does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-mpiuni or --without-mpiuni was given.
if test "${with_mpiuni+set}" = set; then
  withval="$with_mpiuni"
  with_mpiuni="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-mpiuni --without-mpiuni"
else
  with_mpiuni=""
fi;

    if test -n "$mpiuni" -a ! -e "$mpiuni"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($mpiuni) specified for --with-mpiuni does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($mpiuni) specified for --with-mpiuni does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-hypre or --without-hypre was given.
if test "${with_hypre+set}" = set; then
  withval="$with_hypre"
  with_hypre="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-hypre --without-hypre"
else
  with_hypre=""
fi;

    if test -n "$hypre" -a ! -e "$hypre"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($hypre) specified for --with-hypre does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($hypre) specified for --with-hypre does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-netsolve or --without-netsolve was given.
if test "${with_netsolve+set}" = set; then
  withval="$with_netsolve"
  with_netsolve="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-netsolve --without-netsolve"
else
  with_netsolve=""
fi;

    if test -n "$netsolve" -a ! -e "$netsolve"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($netsolve) specified for --with-netsolve does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($netsolve) specified for --with-netsolve does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-petsc or --without-petsc was given.
if test "${with_petsc+set}" = set; then
  withval="$with_petsc"
  with_petsc="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-petsc --without-petsc"
else
  with_petsc=""
fi;

    if test -n "$petsc" -a ! -e "$petsc"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($petsc) specified for --with-petsc does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($petsc) specified for --with-petsc does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-unipetsc or --without-unipetsc was given.
if test "${with_unipetsc+set}" = set; then
  withval="$with_unipetsc"
  with_unipetsc="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-unipetsc --without-unipetsc"
else
  with_unipetsc=""
fi;

    if test -n "$unipetsc" -a ! -e "$unipetsc"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($unipetsc) specified for --with-unipetsc does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($unipetsc) specified for --with-unipetsc does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-tau or --without-tau was given.
if test "${with_tau+set}" = set; then
  withval="$with_tau"
  with_tau="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-tau --without-tau"
else
  with_tau=""
fi;

    if test -n "$tau" -a ! -e "$tau"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($tau) specified for --with-tau does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($tau) specified for --with-tau does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-globus or --without-globus was given.
if test "${with_globus+set}" = set; then
  withval="$with_globus"
  with_globus="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-globus --without-globus"
else
  with_globus=""
fi;

    if test -n "$globus" -a ! -e "$globus"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($globus) specified for --with-globus does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($globus) specified for --with-globus does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-insight or --without-insight was given.
if test "${with_insight+set}" = set; then
  withval="$with_insight"
  with_insight="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-insight --without-insight"
else
  with_insight=""
fi;

    if test -n "$insight" -a ! -e "$insight"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($insight) specified for --with-insight does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($insight) specified for --with-insight does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-qt or --without-qt was given.
if test "${with_qt+set}" = set; then
  withval="$with_qt"
  with_qt="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-qt --without-qt"
else
  with_qt=""
fi;

    if test -n "$qt" -a ! -e "$qt"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($qt) specified for --with-qt does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($qt) specified for --with-qt does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-babel or --without-babel was given.
if test "${with_babel+set}" = set; then
  withval="$with_babel"
  with_babel="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-babel --without-babel"
else
  with_babel=""
fi;

    if test -n "$babel" -a ! -e "$babel"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($babel) specified for --with-babel does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($babel) specified for --with-babel does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-opengl or --without-opengl was given.
if test "${with_opengl+set}" = set; then
  withval="$with_opengl"
  with_opengl="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-opengl --without-opengl"
else
  with_opengl=""
fi;

    if test -n "$opengl" -a ! -e "$opengl"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($opengl) specified for --with-opengl does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($opengl) specified for --with-opengl does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-zlib or --without-zlib was given.
if test "${with_zlib+set}" = set; then
  withval="$with_zlib"
  with_zlib="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-zlib --without-zlib"
else
  with_zlib=""
fi;

    if test -n "$zlib" -a ! -e "$zlib"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($zlib) specified for --with-zlib does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($zlib) specified for --with-zlib does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-vdt or --without-vdt was given.
if test "${with_vdt+set}" = set; then
  withval="$with_vdt"
  with_vdt="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-vdt --without-vdt"
else
  with_vdt=""
fi;

    if test -n "$vdt" -a ! -e "$vdt"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($vdt) specified for --with-vdt does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($vdt) specified for --with-vdt does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-jpeg or --without-jpeg was given.
if test "${with_jpeg+set}" = set; then
  withval="$with_jpeg"
  with_jpeg="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-jpeg --without-jpeg"
else
  with_jpeg=""
fi;

    if test -n "$jpeg" -a ! -e "$jpeg"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($jpeg) specified for --with-jpeg does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($jpeg) specified for --with-jpeg does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-tiff or --without-tiff was given.
if test "${with_tiff+set}" = set; then
  withval="$with_tiff"
  with_tiff="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-tiff --without-tiff"
else
  with_tiff=""
fi;

    if test -n "$tiff" -a ! -e "$tiff"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($tiff) specified for --with-tiff does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($tiff) specified for --with-tiff does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-imagemagick or --without-imagemagick was given.
if test "${with_imagemagick+set}" = set; then
  withval="$with_imagemagick"
  with_imagemagick="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-imagemagick --without-imagemagick"
else
  with_imagemagick=""
fi;

    if test -n "$imagemagick" -a ! -e "$imagemagick"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($imagemagick) specified for --with-imagemagick does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($imagemagick) specified for --with-imagemagick does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-mdsplus or --without-mdsplus was given.
if test "${with_mdsplus+set}" = set; then
  withval="$with_mdsplus"
  with_mdsplus="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-mdsplus --without-mdsplus"
else
  with_mdsplus=""
fi;

    if test -n "$mdsplus" -a ! -e "$mdsplus"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($mdsplus) specified for --with-mdsplus does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($mdsplus) specified for --with-mdsplus does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-glut or --without-glut was given.
if test "${with_glut+set}" = set; then
  withval="$with_glut"
  with_glut="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-glut --without-glut"
else
  with_glut=""
fi;

    if test -n "$glut" -a ! -e "$glut"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($glut) specified for --with-glut does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($glut) specified for --with-glut does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-glui or --without-glui was given.
if test "${with_glui+set}" = set; then
  withval="$with_glui"
  with_glui="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-glui --without-glui"
else
  with_glui=""
fi;

    if test -n "$glui" -a ! -e "$glui"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($glui) specified for --with-glui does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($glui) specified for --with-glui does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-oogl or --without-oogl was given.
if test "${with_oogl+set}" = set; then
  withval="$with_oogl"
  with_oogl="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-oogl --without-oogl"
else
  with_oogl=""
fi;

    if test -n "$oogl" -a ! -e "$oogl"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($oogl) specified for --with-oogl does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($oogl) specified for --with-oogl does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_WITH


# Check whether --with-audio or --without-audio was given.
if test "${with_audio+set}" = set; then
  withval="$with_audio"
  with_audio="$withval"
      SCI_ARG_WITH_LIST="$SCI_ARG_WITH_LIST --with-audio --without-audio"
else
  with_audio=""
fi;

    if test -n "$audio" -a ! -e "$audio"; then
      { { echo "$as_me:$LINENO: error: The file or directory parameter ($audio) specified for --with-audio does not exist!  Please verify that the path and file are correct." >&5
echo "$as_me: error: The file or directory parameter ($audio) specified for --with-audio does not exist!  Please verify that the path and file are correct." >&2;}
   { (exit 1); exit 1; }; }
    fi



    ##  SCI_ARG_ENABLE

    # Check whether --enable-verbosity or --disable-verbosity was given.
if test "${enable_verbosity+set}" = set; then
  enableval="$enable_verbosity"
  debugging="yes"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-verbosity --disable-verbosity"
else
  debugging="no"
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-threads or --disable-threads was given.
if test "${enable_threads+set}" = set; then
  enableval="$enable_threads"
  threads="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-threads --disable-threads"
else
  threads=${threads='unknown'}
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-debug or --disable-debug was given.
if test "${enable_debug+set}" = set; then
  enableval="$enable_debug"
  debug="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-debug --disable-debug"
else
  debug="no"
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-optimize or --disable-optimize was given.
if test "${enable_optimize+set}" = set; then
  enableval="$enable_optimize"
  optimize="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-optimize --disable-optimize"
else
  optimize=${optimize='no'}
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-64bit or --disable-64bit was given.
if test "${enable_64bit+set}" = set; then
  enableval="$enable_64bit"
  enable_64bit="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-64bit --disable-64bit"
else
  enable_64bit=$i{enable_64bit='no'}
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-32bit or --disable-32bit was given.
if test "${enable_32bit+set}" = set; then
  enableval="$enable_32bit"
  enable_32bit="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-32bit --disable-32bit"
else
  enable_32bit=$i{enable_32bit='no'}
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-output-avg-walltime or --disable-output-avg-walltime was given.
if test "${enable_output_avg_walltime+set}" = set; then
  enableval="$enable_output_avg_walltime"
  output_avg_walltime="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-output-avg-walltime --disable-output-avg-walltime"
else
  output_avg_walltime=${output_avg_walltime='no'}
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-perfex or --disable-perfex was given.
if test "${enable_perfex+set}" = set; then
  enableval="$enable_perfex"
  enable_perfex="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-perfex --disable-perfex"
else
  enable_perfex=${perfex='no'}
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-package or --disable-package was given.
if test "${enable_package+set}" = set; then
  enableval="$enable_package"
  package="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-package --disable-package"
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-exename or --disable-exename was given.
if test "${enable_exename+set}" = set; then
  enableval="$enable_exename"
  exename="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-exename --disable-exename"
else
  exename=${exename='default'}
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-largesos or --disable-largesos was given.
if test "${enable_largesos+set}" = set; then
  enableval="$enable_largesos"
  largesos="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-largesos --disable-largesos"
else
  largesos=${largesos='no'}
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-sci-malloc or --disable-sci-malloc was given.
if test "${enable_sci_malloc+set}" = set; then
  enableval="$enable_sci_malloc"
  enable_sci_malloc="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-sci-malloc --disable-sci-malloc"
else
  enable_sci_malloc=${enable_sci_malloc='yes'}
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-assertion-level or --disable-assertion-level was given.
if test "${enable_assertion_level+set}" = set; then
  enableval="$enable_assertion_level"
  enable_assertion_level="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-assertion-level --disable-assertion-level"
else
  enable_assertion_level=${enable_assertion_level=3}
fi;



    ##  SCI_ARG_ENABLE

    # Check whether --enable-scirun2 or --disable-scirun2 was given.
if test "${enable_scirun2+set}" = set; then
  enableval="$enable_scirun2"
  enable_scirun2="$enableval"
      SCI_ARG_ENABLE_LIST="$SCI_ARG_ENABLE_LIST --enable-scirun2 --disable-scirun2"
else
  enable_scirun2=${enable_scirun2='no'}
fi;



##  --------------------------------------------------------------------
##  -----------  check for unknown or mis-spelled arguments  -----------
##  --------------------------------------------------------------------

##
##  If you use SCI_ARG_WITH or SCI_ARG_ENABLE to declare arguments, they
##  will be added automatically to this check.  There should be no need
##  to modify this section.
##

FOUND_ARG=no
for i in $myargs; do
  i_mod=`echo $i | sed 's% %%g' | sed 's%=.*%%g'`
  for j in $SCI_ARG_WITH_LIST $SCI_ARG_ENABLE_LIST; do
    if test $i_mod = $j; then
      FOUND_ARG=yes
      break
    fi
  done
  if test "$FOUND_ARG" = "yes"; then
    FOUND_ARG=no
    continue
  else
    echo

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: unknown (or mis-spelled) argument: $i." >&5
echo "$as_me: error: unknown (or mis-spelled) argument: $i." >&2;}
   { (exit 1); exit 1; }; }

  fi
done

##  --------------------------------------------------------------------
##  -----  determine host type, processor count and OS version  --------
##  --------------------------------------------------------------------

echo
# Make sure we can run config.sub.
$ac_config_sub sun4 >/dev/null 2>&1 ||
  { { echo "$as_me:$LINENO: error: cannot run $ac_config_sub" >&5
echo "$as_me: error: cannot run $ac_config_sub" >&2;}
   { (exit 1); exit 1; }; }

echo "$as_me:$LINENO: checking build system type" >&5
echo $ECHO_N "checking build system type... $ECHO_C" >&6
if test "${ac_cv_build+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  ac_cv_build_alias=$build_alias
test -z "$ac_cv_build_alias" &&
  ac_cv_build_alias=`$ac_config_guess`
test -z "$ac_cv_build_alias" &&
  { { echo "$as_me:$LINENO: error: cannot guess build type; you must specify one" >&5
echo "$as_me: error: cannot guess build type; you must specify one" >&2;}
   { (exit 1); exit 1; }; }
ac_cv_build=`$ac_config_sub $ac_cv_build_alias` ||
  { { echo "$as_me:$LINENO: error: $ac_config_sub $ac_cv_build_alias failed" >&5
echo "$as_me: error: $ac_config_sub $ac_cv_build_alias failed" >&2;}
   { (exit 1); exit 1; }; }

fi
echo "$as_me:$LINENO: result: $ac_cv_build" >&5
echo "${ECHO_T}$ac_cv_build" >&6
build=$ac_cv_build
build_cpu=`echo $ac_cv_build | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\1/'`
build_vendor=`echo $ac_cv_build | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\2/'`
build_os=`echo $ac_cv_build | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\3/'`


echo "$as_me:$LINENO: checking host system type" >&5
echo $ECHO_N "checking host system type... $ECHO_C" >&6
if test "${ac_cv_host+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  ac_cv_host_alias=$host_alias
test -z "$ac_cv_host_alias" &&
  ac_cv_host_alias=$ac_cv_build_alias
ac_cv_host=`$ac_config_sub $ac_cv_host_alias` ||
  { { echo "$as_me:$LINENO: error: $ac_config_sub $ac_cv_host_alias failed" >&5
echo "$as_me: error: $ac_config_sub $ac_cv_host_alias failed" >&2;}
   { (exit 1); exit 1; }; }

fi
echo "$as_me:$LINENO: result: $ac_cv_host" >&5
echo "${ECHO_T}$ac_cv_host" >&6
host=$ac_cv_host
host_cpu=`echo $ac_cv_host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\1/'`
host_vendor=`echo $ac_cv_host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\2/'`
host_os=`echo $ac_cv_host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\3/'`



unset NUM_CPUS
case $host in
  *-irix*)

    ##  SCI_CHECK_OS_VERSION

    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="6.5"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for OS version 6.5" >&5
echo $ECHO_N "checking for OS version 6.5... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "configure: error: wrong Irix version. exiting.;exit"; then
      _SCI_NOTCORRECT_='configure: error: wrong Irix version. exiting.;exit'
    fi

    if test ""; then
      _SCI_COMP_=""
    else
      _SCI_COMP_="-gt"
    fi

    eval "uname -r 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi

    NUM_CPUS="`TERM=dumb top -n 1 | fgrep CPUs | cut -d' ' -f1`"
    ;;
  *linux*)

    ##  SCI_CHECK_OS_VERSION

    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="2.2.17"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for OS version 2.2.17" >&5
echo $ECHO_N "checking for OS version 2.2.17... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "configure: error: wrong Linux version. exiting.;exit"; then
      _SCI_NOTCORRECT_='configure: error: wrong Linux version. exiting.;exit'
    fi

    if test ""; then
      _SCI_COMP_=""
    else
      _SCI_COMP_="-gt"
    fi

    eval "uname -r 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi

    NUM_CPUS="`cat /proc/cpuinfo | fgrep processor | wc | cut -c1-7`"
    ;;
  *-dec*)
    NUM_CPUS=1
    ;;
  *-darwin*)
    NUM_CPUS=2
    HAVE_OSX="yes"
    ;;
  *-aix*)
    NUM_CPUS=4
    ;;
  *)
    echo
    { echo "$as_me:$LINENO: WARNING: !!!!!! This system is untested - You are on your own !!!!!!" >&5
echo "$as_me: WARNING: !!!!!! This system is untested - You are on your own !!!!!!" >&2;}
    echo
    NUM_CPUS="1"
    ;;
esac



echo "$as_me:$LINENO: checking physical processor count" >&5
echo $ECHO_N "checking physical processor count... $ECHO_C" >&6
if test -z "$NUM_CPUS"; then
  NUM_CPUS="1"
fi
echo "$as_me:$LINENO: result: $NUM_CPUS" >&5
echo "${ECHO_T}$NUM_CPUS" >&6

## MAKE_PARALLELISM is used to tell the compiler how many cpus to use
## when linking.  1 is usually a good number to use per link,
## espcially for smaller number of cpu machines.  I think 4 is
## sufficient for even nirvana.
if test $NUM_CPUS -le 2 ; then
  MAKE_PARALLELISM=1
else
  if test $NUM_CPUS -le 8 ; then
    MAKE_PARALLELISM=2
  else
    MAKE_PARALLELISM=8
  fi
fi

echo "$as_me:$LINENO: checking host system word length" >&5
echo $ECHO_N "checking host system word length... $ECHO_C" >&6
if test "$enable_64bit" = "yes"; then
  echo "$as_me:$LINENO: result: 64 bits" >&5
echo "${ECHO_T}64 bits" >&6
  if test "$enable_32bit" = "yes"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Both 64 and 32 bit compiles specified." >&5
echo "$as_me: error: Both 64 and 32 bit compiles specified." >&2;}
   { (exit 1); exit 1; }; }

  fi
else
  echo "$as_me:$LINENO: result: 32 bits" >&5
echo "${ECHO_T}32 bits" >&6
fi

##  --------------------------------------------------------------------
##  ----------------------  set variable defaults  ---------------------
##  --------------------------------------------------------------------

##
##  DO NOT "hardcode" ANY libraries (i.e. no -l or -L or -I allowed).
##

TIME_IMPL=Time_unix.cc
TEMPLATE_TAG=
TEMPLATE_BOX="<>"

case $host in
     *-darwin*)
	SO_OR_ARCHIVE_EXTENSION=dylib
	;;
     *-aix*)
        # On AIX, don't automatically generate .so's.  Make .a's and then
        # later we will make .so's from them.
	SO_OR_ARCHIVE_EXTENSION=a
	;;
     *)
	SO_OR_ARCHIVE_EXTENSION=so
        ;;
esac

ASSERTION_LEVEL=$enable_assertion_level

extra_cflags="";

if test "$output_avg_walltime" != "no"; then
  extra_cflags="-DOUTPUT_AVG_ELAPSED_WALLTIME ${extra_cflags}"
fi

PACKAGE_DIRS=""

path_to_src=`echo $0 | sed 's/configure//'`

if test "$path_to_src" = "./"; then
   { echo "$as_me:$LINENO: WARNING: DO NOT CONFIGURE IN THE SRC DIRECTORY:" >&5
echo "$as_me: WARNING: DO NOT CONFIGURE IN THE SRC DIRECTORY:" >&2;}
   { echo "$as_me:$LINENO: WARNING: ___ Try creating a dir such as: ../archBITSdebug" >&5
echo "$as_me: WARNING: ___ Try creating a dir such as: ../archBITSdebug" >&2;}
   { echo "$as_me:$LINENO: WARNING: ___ eg: ../sgi32opt or ../linux32debug" >&5
echo "$as_me: WARNING: ___ eg: ../sgi32opt or ../linux32debug" >&2;}
   { echo "$as_me:$LINENO: WARNING: ___ cd to that dir and then type: ../src/configure params" >&5
echo "$as_me: WARNING: ___ cd to that dir and then type: ../src/configure params" >&2;}
   rm -f config.log config.cache confdefs.h conftest.out
   { { echo "$as_me:$LINENO: error: You have been warned!" >&5
echo "$as_me: error: You have been warned!" >&2;}
   { (exit 1); exit 1; }; }
fi

for i in $package; do
   if test ! -d "$path_to_src/Packages/$i"; then
      { { echo "$as_me:$LINENO: error: Package '$i' does not exist (in $path_to_src\"Packages\")!" >&5
echo "$as_me: error: Package '$i' does not exist (in $path_to_src\"Packages\")!" >&2;}
   { (exit 1); exit 1; }; }
   fi
   PACKAGE_DIRS=$PACKAGE_DIRS" Packages/$i"
done

LOAD_PACKAGE="SCIRun"
for i in $package; do
 LOAD_PACKAGE=$LOAD_PACKAGE,"$i"
done

if test "$exename" = "default"; then
  EXENAME=scirun
else
  EXENAME=$exename
fi

LARGESOS=$largesos

u=`echo $package | sed 's/.*Remote.*/Remote/'`
if test "$u" = "Remote" ; then
   pkg_Remote=yes
else
   pkg_Remote=no
fi

u=`echo $package | sed 's/.*NetSolve.*/NetSolve/'`
if test "$u" = "NetSolve" ; then
   pkg_NetSolve=yes
else
   pkg_NetSolve=no
fi

u=`echo $package | sed 's/.*Uintah.*/Uintah/'`
if test "$u" = "Uintah" ; then
   pkg_uintah=yes
else
   pkg_uintah=no
fi

u=`echo $package | sed 's/.*rtrt.*/rtrt/'`
if test "$u" = "rtrt" ; then
   pkg_rtrt="yes"
else
   pkg_rtrt="no"
fi

u=`echo $package | sed 's/.*Teem.*/Teem/'`
if test "$u" = "Teem" ; then
   pkg_teem="yes"
else
   pkg_teem="no"
fi

u=`echo $package | sed 's/.*VDT.*/VDT/'`
if test "$u" = "VDT" ; then
   pkg_vdt=yes
else
   pkg_vdt=no
fi

u=`echo $package | sed 's/.*Fusion.*/Fusion/'`
if test "$u" = "Fusion" ; then
   pkg_fusion="yes"
else
   pkg_fusion="no"
fi

u=`echo $package | sed 's/.*CollabVis.*/CollabVis/'`
if test "$u" = "CollabVis" ; then
   pkg_CollabVis="yes"
else
   pkg_CollabVis="no"
fi

u=`echo $package | sed 's/.*Insight.*/Insight/'`
if test "$u" = "Insight" ; then
   pkg_insight="yes"
else

   pkg_insight="no"pkg_insight="no"
fi

if test "$enable_sci_malloc" = "yes"; then
  DEF_MALLOC=""
else
  DEF_MALLOC="#define DISABLE_SCI_MALLOC"
fi

is_linux=`echo $host | sed 's/.*linux.*/linux/'`













#########################################################################

##  ----------------------------------------------------------------------
##  ----------------  set host specific build tools  ---------------------
##  ----------------------------------------------------------------------

##  DO NOT "hardcode" ANY libraries here.

##  Require GCC for all platforms except Irix which requires MIPSpro
##  and AIX which uses xlC

echo
{ echo "$as_me:$LINENO: checking for required build tools......" >&5
echo "$as_me: checking for required build tools......" >&6;}
echo

echo "$as_me:$LINENO: checking whether debug was enabled" >&5
echo $ECHO_N "checking whether debug was enabled... $ECHO_C" >&6
if test "$debug" = "no"; then
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
elif test "$debug" = "yes"; then
  extra_cflags="-g ${extra_cflags}"
  echo "$as_me:$LINENO: result: yes (-g) " >&5
echo "${ECHO_T}yes (-g) " >&6
else
  extra_cflags="$debug ${extra_cflags}"
  echo "$as_me:$LINENO: result: yes ($debug) " >&5
echo "${ECHO_T}yes ($debug) " >&6
fi

echo "$as_me:$LINENO: checking whether optimize was enabled" >&5
echo $ECHO_N "checking whether optimize was enabled... $ECHO_C" >&6
if test "$optimize" = "no"; then
  if test "$debug" = "no"; then
    # neither debug nor optimize specified, DEFAULT TO: optimized
    extra_cflags="-O2 ${extra_cflags}"
    echo "$as_me:$LINENO: result: no (default to -O2) " >&5
echo "${ECHO_T}no (default to -O2) " >&6
  else
    # Debug mode specified.
    extra_cflags="${no_optimize_flag} ${extra_cflags}"
    # extra_fflags WILL ONLY BE USED WITH g77
    extra_fflags="-ffortran-bounds-check"
    echo "$as_me:$LINENO: result: no (${no_optimize_flag}) " >&5
echo "${ECHO_T}no (${no_optimize_flag}) " >&6
  fi
elif test "$optimize" = "yes"; then
  extra_cflags="-O2 ${extra_cflags}"
  echo "$as_me:$LINENO: result: yes (-O2) " >&5
echo "${ECHO_T}yes (-O2) " >&6
else
  extra_cflags="$optimize ${extra_cflags}"
  echo "$as_me:$LINENO: result: yes ($optimize) " >&5
echo "${ECHO_T}yes ($optimize) " >&6
fi

if test "$enable_perfex" != "no"; then
  extra_cflags="-DUSE_PERFEX_COUNTERS ${extra_cflags}"
fi

# Most fortran compilers need an "_" for C function names.
# Some have strange underscore needs.  This flag is used in the
# Packages/Uintah/tools/fspec.pl.in file to generate the correct
# cname of the fortran function.
FORTRAN_UNDERSCORE=end

if test ! -e "`type $CC | sed 's%^.* %%'`"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Could not find the specified C compiler ($CC)" >&5
echo "$as_me: error: Could not find the specified C compiler ($CC)" >&2;}
   { (exit 1); exit 1; }; }

fi
if test ! -e "`type $CXX | sed 's%^.* %%'`"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Could not find the specified C++ compiler (CC)" >&5
echo "$as_me: error: Could not find the specified C++ compiler (CC)" >&2;}
   { (exit 1); exit 1; }; }

fi
if test ! -e "`type $F77 | sed 's%^.* %%'`"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Could not find the specified Fortran compiler ($F77)" >&5
echo "$as_me: error: Could not find the specified Fortran compiler ($F77)" >&2;}
   { (exit 1); exit 1; }; }

fi

case $host in
  *-irix*)
    { echo "$as_me:$LINENO: WARNING: Configure script only allows SGI compilers on IRIX." >&5
echo "$as_me: WARNING: Configure script only allows SGI compilers on IRIX." >&2;}
    { echo "$as_me:$LINENO: WARNING: If this is a problem email scirun-users@sci.utah.edu." >&5
echo "$as_me: WARNING: If this is a problem email scirun-users@sci.utah.edu." >&2;}

    ac_objext=o

    ##  SCI_CHECK_VERSION
    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="7.3.1.1"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for \`basename $CC\` version 7.3.1.1" >&5
echo $ECHO_N "checking for \`basename $CC\` version 7.3.1.1... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "echo configure: error: wrong $CC version.; exit"; then
      _SCI_NOTCORRECT_='echo configure: error: wrong $CC version.; exit'
    fi

    if test ""; then
      _SCI_COMP_=""
    else
      _SCI_COMP_="-gt"
    fi

    eval "$CC -version 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi


    ##  SCI_CHECK_VERSION
    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="7.3.1.1"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for \`basename $CXX\` version 7.3.1.1" >&5
echo $ECHO_N "checking for \`basename $CXX\` version 7.3.1.1... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "echo configure: error: wrong $CXX version.; exit"; then
      _SCI_NOTCORRECT_='echo configure: error: wrong $CXX version.; exit'
    fi

    if test ""; then
      _SCI_COMP_=""
    else
      _SCI_COMP_="-gt"
    fi

    eval "$CXX -version 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi


    ##  SCI_CHECK_VERSION
    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="7.3.1.1"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for \`basename $F77\` version 7.3.1.1" >&5
echo $ECHO_N "checking for \`basename $F77\` version 7.3.1.1... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "echo configure: error: wrong $CC version.; exit"; then
      _SCI_NOTCORRECT_='echo configure: error: wrong $CC version.; exit'
    fi

    if test ""; then
      _SCI_COMP_=""
    else
      _SCI_COMP_="-gt"
    fi

    eval "$F77 -version 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi

    # Extract the first word of "as", so it can be a program name with args.
set dummy as; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_path_AS+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $AS in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_AS="$AS" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $COMPILER_DIR
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_AS="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

  ;;
esac
fi
AS=$ac_cv_path_AS

if test -n "$AS"; then
  echo "$as_me:$LINENO: result: $AS" >&5
echo "${ECHO_T}$AS" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

    if test -z "$AS"; then
      { echo "$as_me:$LINENO: WARNING: Could not find the MIPSPro linker (as)" >&5
echo "$as_me: WARNING: Could not find the MIPSPro linker (as)" >&2;}
      { { echo "$as_me:$LINENO: error: Looked in $COMPILER_DIR" >&5
echo "$as_me: error: Looked in $COMPILER_DIR" >&2;}
   { (exit 1); exit 1; }; }
    fi

    ##  SCI_CHECK_VERSION
    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="7.3.1.1"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for \`basename $AS\` version 7.3.1.1" >&5
echo $ECHO_N "checking for \`basename $AS\` version 7.3.1.1... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "echo configure: error: wrong $CC version.; exit"; then
      _SCI_NOTCORRECT_='echo configure: error: wrong $CC version.; exit'
    fi

    if test ""; then
      _SCI_COMP_=""
    else
      _SCI_COMP_="-gt"
    fi

    eval "$AS -version 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi

    # Extract the first word of "ld", so it can be a program name with args.
set dummy ld; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_path_LD+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $LD in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_LD="$LD" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $COMPILER_DIR
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_LD="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

  ;;
esac
fi
LD=$ac_cv_path_LD

if test -n "$LD"; then
  echo "$as_me:$LINENO: result: $LD" >&5
echo "${ECHO_T}$LD" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

    if test -z "$LD"; then
      { echo "$as_me:$LINENO: WARNING: Could not find the MIPSPro linker (ld)" >&5
echo "$as_me: WARNING: Could not find the MIPSPro linker (ld)" >&2;}
      { { echo "$as_me:$LINENO: error: Looked in $COMPILER_DIR" >&5
echo "$as_me: error: Looked in $COMPILER_DIR" >&2;}
   { (exit 1); exit 1; }; }
    fi
    CPP="$CC"
    CXXCPP="$CXX -c"
    ##  this WOFF is required for configure
    WOFF=" -woff 3303,1047,1209,1110 -Wl,-woff,84 -woff 1342"
    CPPFLAGS=" $WOFF -LANG:std"
    if test "$enable_64bit" = "yes"; then
      BASE_LIB_DIR=lib64
      BINARYFLAGS="-64 -mips4"
    else
      BASE_LIB_DIR=lib
      BINARYFLAGS="-n32 -mips4"
    fi
    FFLAGS="$BINARYFLAGS $extra_cflags"
    CFLAGS="-fullwarn -xansi -LANG:std $BINARYFLAGS $extra_cflags"
    CXXFLAGS="$CFLAGS"
    ASFLAGS="$BINARYFLAGS"
    SOFLAGS="-shared $BINARYFLAGS -LANG:std -no_unresolved -J\$(MAKE_PARALLELISM) -update_registry \$(LIBDIR)so_locations $(TLINK) ${SOFLAGS}"
    LDFLAGS="$BINARYFLAGS -LANG:std -no_unresolved"
    echo "$as_me:$LINENO: checking if ${CC} talks too much" >&5
echo $ECHO_N "checking if ${CC} talks too much... $ECHO_C" >&6
    touch wow.c
    if ${CC} -c wow.c 2>&1 | fgrep "requires a license password" > /dev/null ; then
      echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
      { echo "$as_me:$LINENO: WARNING: Using cc and CC wrappers in scripts/cc" >&5
echo "$as_me: WARNING: Using cc and CC wrappers in scripts/cc" >&2;}

      mkdir -p scripts
      sed "s+VERBOSE_CC+${CC}+g;" < ${srcdir}/scripts/cc.in > scripts/cc
      sed "s+VERBOSE_CC+${CXX}+g;" < ${srcdir}/scripts/cc.in > scripts/CC
      chmod 755 scripts/cc scripts/CC

      scripts_path=`cd scripts;pwd`
      CC="$scripts_path/cc"
      CXX="$scripts_path/CC"
    else
      echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
    fi
    rm -f wow.c wow.o
    ;;

  *-dec*)
    ac_objext=o

    CPP="$CC"
    CXXCPP="$CXX -c"
    ##  this WOFF is required for configure
    CPPFLAGS=" -model ansi -pthread -D__USE_STD_IOSTREAM"
    FFLAGS="$extra_cflags"
    CFLAGS="-model ansi -pthread $extra_cflags -D__USE_STD_IOSTREAM"
    CXXFLAGS="$CFLAGS"
    SOFLAGS="-shared -warning_unresolved -update_registry \$(LIBDIR)so_locations"
    LDFLAGS=""
    LDRUN_PREFIX="-rpath "
    REPOSITORY_FLAGS="-ptr"
    ;;

  *-aix*)

    # Xlf does not need/want an "_" on the names of fortran
    # functions.  This var is used in fspec.pl.in in order not to
    # add the _ to the cname of the function.
    FORTRAN_UNDERSCORE=none

    # The IBM compilers don't use LDRUN_PREFIX.  By making it "-L"
    # the lib path will be repeated twice, but since the makefile
    # is set up assuming you need LDRUN_PREFIX, this is the easiest fix.
    LDRUN_PREFIX="-L"

    # xlc doesn't seem to like the <>...
    # KCC doesn't seem to like the <>...
    # g++ doesn't seem to like <> on the IBM either.
    TEMPLATE_BOX=

    case $CXX in
      *g++*)
         SOFLAGS="-shared ${SOFLAGS}"
         # bigtoc helps keep gcc from breaking...
         LDFLAGS="-Wl,-bbigtoc $LDFLAGS"
         ;;
      *)
#      for these compilers: *xlC*) or *KCC*)
         if test "$enable_64bit" = "yes"; then
            BIT64FLAG=-q64
         fi
         CFLAGS="-qrtti=all $BIT64FLAG $CFLAGS"

         # Allows for better optimization and removes INFORMATION message.
         # I think this is necessary for both KCC and xlC...
         if test "$optimize" = "yes"; then
            CFLAGS="-qMAXMEM=4096 $CFLAGS"
         fi
         ;;
    esac

    CFLAGS="$CFLAGS $extra_cflags"

    FFLAGS="$extra_cflags"
    CXXFLAGS="$CFLAGS"

    CPP="$CC -c"
    CXXCPP="$CXX -c"

    ;;
  *-darwin*)
    LDRUN_PREFIX="-L"
    CFLAGS="$CFLAGS -fno-common -dynamic -fcoalesce-templates -Wno-long-double -I/sw/include -L/sw/lib"
    SOFLAGS="-dynamiclib -init __ZNSt8ios_base4InitC4Ev \${LIBDIR}/../osx/osx_init.o  ${SOFLAGS}"
    ;;
  *)
    #
    # put '_' at end and two '_'s if there is a '_' in name.
    # This flag is used by the genfspec.pl script in Uintah (generated
    # from fspec.pl.in).
    #
    FORTRAN_UNDERSCORE=linux

    BASE_LIB_DIR=lib
    CFLAGS=" -Wall"

    ##  SCI_CHECK_VERSION
    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="2.95.3"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for \`basename $CC\` version 2.95.3" >&5
echo $ECHO_N "checking for \`basename $CC\` version 2.95.3... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "echo configure: error: wrong $CC version.; exit"; then
      _SCI_NOTCORRECT_='echo configure: error: wrong $CC version.; exit'
    fi

    if test ""; then
      _SCI_COMP_=""
    else
      _SCI_COMP_="-gt"
    fi

    eval "$CC --version 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi


    ##  SCI_CHECK_VERSION
    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="0.5.25"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for \`basename $F77\` version 0.5.25" >&5
echo $ECHO_N "checking for \`basename $F77\` version 0.5.25... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "echo configure: error: wrong $CC version.; exit"; then
      _SCI_NOTCORRECT_='echo configure: error: wrong $CC version.; exit'
    fi

    if test ""; then
      _SCI_COMP_=""
    else
      _SCI_COMP_="-gt"
    fi

    eval "$F77 --version 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi


    ##  SCI_CHECK_VERSION
    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="2.95.3"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for \`basename $CXX\` version 2.95.3" >&5
echo $ECHO_N "checking for \`basename $CXX\` version 2.95.3... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "echo configure: error: wrong $CXX version.; exit"; then
      _SCI_NOTCORRECT_='echo configure: error: wrong $CXX version.; exit'
    fi

    if test ""; then
      _SCI_COMP_=""
    else
      _SCI_COMP_="-gt"
    fi

    eval "$CXX --version 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi

    ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu
echo "$as_me:$LINENO: checking how to run the C preprocessor" >&5
echo $ECHO_N "checking how to run the C preprocessor... $ECHO_C" >&6
# On Suns, sometimes $CPP names a directory.
if test -n "$CPP" && test -d "$CPP"; then
  CPP=
fi
if test -z "$CPP"; then
  if test "${ac_cv_prog_CPP+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
      # Double quotes because CPP needs to be expanded
    for CPP in "$CC -E" "$CC -E -traditional-cpp" "/lib/cpp"
    do
      ac_preproc_ok=false
for ac_c_preproc_warn_flag in '' yes
do
  # Use a header file that comes with gcc, so configuring glibc
  # with a fresh cross-compiler works.
  # On the NeXT, cc -E runs the code through the compiler's parser,
  # not just through cpp. "Syntax error" is here to catch this case.
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <assert.h>
                     Syntax error
_ACEOF
if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
  ac_status=$?
  egrep -v '^ *\+' conftest.er1 >conftest.err
  rm -f conftest.er1
  cat conftest.err >&5
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } >/dev/null; then
  if test -s conftest.err; then
    ac_cpp_err=$ac_c_preproc_warn_flag
  else
    ac_cpp_err=
  fi
else
  ac_cpp_err=yes
fi
if test -z "$ac_cpp_err"; then
  :
else
  echo "$as_me: failed program was:" >&5
  cat conftest.$ac_ext >&5
  # Broken: fails on valid input.
continue
fi
rm -f conftest.err conftest.$ac_ext

  # OK, works on sane cases.  Now check whether non-existent headers
  # can be detected and how.
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <ac_nonexistent.h>
_ACEOF
if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
  ac_status=$?
  egrep -v '^ *\+' conftest.er1 >conftest.err
  rm -f conftest.er1
  cat conftest.err >&5
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } >/dev/null; then
  if test -s conftest.err; then
    ac_cpp_err=$ac_c_preproc_warn_flag
  else
    ac_cpp_err=
  fi
else
  ac_cpp_err=yes
fi
if test -z "$ac_cpp_err"; then
  # Broken: success on invalid input.
continue
else
  echo "$as_me: failed program was:" >&5
  cat conftest.$ac_ext >&5
  # Passes both tests.
ac_preproc_ok=:
break
fi
rm -f conftest.err conftest.$ac_ext

done
# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
rm -f conftest.err conftest.$ac_ext
if $ac_preproc_ok; then
  break
fi

    done
    ac_cv_prog_CPP=$CPP

fi
  CPP=$ac_cv_prog_CPP
else
  ac_cv_prog_CPP=$CPP
fi
echo "$as_me:$LINENO: result: $CPP" >&5
echo "${ECHO_T}$CPP" >&6
ac_preproc_ok=false
for ac_c_preproc_warn_flag in '' yes
do
  # Use a header file that comes with gcc, so configuring glibc
  # with a fresh cross-compiler works.
  # On the NeXT, cc -E runs the code through the compiler's parser,
  # not just through cpp. "Syntax error" is here to catch this case.
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <assert.h>
                     Syntax error
_ACEOF
if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
  ac_status=$?
  egrep -v '^ *\+' conftest.er1 >conftest.err
  rm -f conftest.er1
  cat conftest.err >&5
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } >/dev/null; then
  if test -s conftest.err; then
    ac_cpp_err=$ac_c_preproc_warn_flag
  else
    ac_cpp_err=
  fi
else
  ac_cpp_err=yes
fi
if test -z "$ac_cpp_err"; then
  :
else
  echo "$as_me: failed program was:" >&5
  cat conftest.$ac_ext >&5
  # Broken: fails on valid input.
continue
fi
rm -f conftest.err conftest.$ac_ext

  # OK, works on sane cases.  Now check whether non-existent headers
  # can be detected and how.
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <ac_nonexistent.h>
_ACEOF
if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
  ac_status=$?
  egrep -v '^ *\+' conftest.er1 >conftest.err
  rm -f conftest.er1
  cat conftest.err >&5
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } >/dev/null; then
  if test -s conftest.err; then
    ac_cpp_err=$ac_c_preproc_warn_flag
  else
    ac_cpp_err=
  fi
else
  ac_cpp_err=yes
fi
if test -z "$ac_cpp_err"; then
  # Broken: success on invalid input.
continue
else
  echo "$as_me: failed program was:" >&5
  cat conftest.$ac_ext >&5
  # Passes both tests.
ac_preproc_ok=:
break
fi
rm -f conftest.err conftest.$ac_ext

done
# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
rm -f conftest.err conftest.$ac_ext
if $ac_preproc_ok; then
  :
else
  { { echo "$as_me:$LINENO: error: C preprocessor \"$CPP\" fails sanity check" >&5
echo "$as_me: error: C preprocessor \"$CPP\" fails sanity check" >&2;}
   { (exit 1); exit 1; }; }
fi

ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu

    ac_ext=cc
ac_cpp='$CXXCPP $CPPFLAGS'
ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
echo "$as_me:$LINENO: checking how to run the C++ preprocessor" >&5
echo $ECHO_N "checking how to run the C++ preprocessor... $ECHO_C" >&6
if test -z "$CXXCPP"; then
  if test "${ac_cv_prog_CXXCPP+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
      # Double quotes because CXXCPP needs to be expanded
    for CXXCPP in "$CXX -E" "/lib/cpp"
    do
      ac_preproc_ok=false
for ac_cxx_preproc_warn_flag in '' yes
do
  # Use a header file that comes with gcc, so configuring glibc
  # with a fresh cross-compiler works.
  # On the NeXT, cc -E runs the code through the compiler's parser,
  # not just through cpp. "Syntax error" is here to catch this case.
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <assert.h>
                     Syntax error
_ACEOF
if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
  ac_status=$?
  egrep -v '^ *\+' conftest.er1 >conftest.err
  rm -f conftest.er1
  cat conftest.err >&5
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } >/dev/null; then
  if test -s conftest.err; then
    ac_cpp_err=$ac_cxx_preproc_warn_flag
  else
    ac_cpp_err=
  fi
else
  ac_cpp_err=yes
fi
if test -z "$ac_cpp_err"; then
  :
else
  echo "$as_me: failed program was:" >&5
  cat conftest.$ac_ext >&5
  # Broken: fails on valid input.
continue
fi
rm -f conftest.err conftest.$ac_ext

  # OK, works on sane cases.  Now check whether non-existent headers
  # can be detected and how.
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <ac_nonexistent.h>
_ACEOF
if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
  ac_status=$?
  egrep -v '^ *\+' conftest.er1 >conftest.err
  rm -f conftest.er1
  cat conftest.err >&5
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } >/dev/null; then
  if test -s conftest.err; then
    ac_cpp_err=$ac_cxx_preproc_warn_flag
  else
    ac_cpp_err=
  fi
else
  ac_cpp_err=yes
fi
if test -z "$ac_cpp_err"; then
  # Broken: success on invalid input.
continue
else
  echo "$as_me: failed program was:" >&5
  cat conftest.$ac_ext >&5
  # Passes both tests.
ac_preproc_ok=:
break
fi
rm -f conftest.err conftest.$ac_ext

done
# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
rm -f conftest.err conftest.$ac_ext
if $ac_preproc_ok; then
  break
fi

    done
    ac_cv_prog_CXXCPP=$CXXCPP

fi
  CXXCPP=$ac_cv_prog_CXXCPP
else
  ac_cv_prog_CXXCPP=$CXXCPP
fi
echo "$as_me:$LINENO: result: $CXXCPP" >&5
echo "${ECHO_T}$CXXCPP" >&6
ac_preproc_ok=false
for ac_cxx_preproc_warn_flag in '' yes
do
  # Use a header file that comes with gcc, so configuring glibc
  # with a fresh cross-compiler works.
  # On the NeXT, cc -E runs the code through the compiler's parser,
  # not just through cpp. "Syntax error" is here to catch this case.
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <assert.h>
                     Syntax error
_ACEOF
if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
  ac_status=$?
  egrep -v '^ *\+' conftest.er1 >conftest.err
  rm -f conftest.er1
  cat conftest.err >&5
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } >/dev/null; then
  if test -s conftest.err; then
    ac_cpp_err=$ac_cxx_preproc_warn_flag
  else
    ac_cpp_err=
  fi
else
  ac_cpp_err=yes
fi
if test -z "$ac_cpp_err"; then
  :
else
  echo "$as_me: failed program was:" >&5
  cat conftest.$ac_ext >&5
  # Broken: fails on valid input.
continue
fi
rm -f conftest.err conftest.$ac_ext

  # OK, works on sane cases.  Now check whether non-existent headers
  # can be detected and how.
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <ac_nonexistent.h>
_ACEOF
if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
  ac_status=$?
  egrep -v '^ *\+' conftest.er1 >conftest.err
  rm -f conftest.er1
  cat conftest.err >&5
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } >/dev/null; then
  if test -s conftest.err; then
    ac_cpp_err=$ac_cxx_preproc_warn_flag
  else
    ac_cpp_err=
  fi
else
  ac_cpp_err=yes
fi
if test -z "$ac_cpp_err"; then
  # Broken: success on invalid input.
continue
else
  echo "$as_me: failed program was:" >&5
  cat conftest.$ac_ext >&5
  # Passes both tests.
ac_preproc_ok=:
break
fi
rm -f conftest.err conftest.$ac_ext

done
# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
rm -f conftest.err conftest.$ac_ext
if $ac_preproc_ok; then
  :
else
  { { echo "$as_me:$LINENO: error: C++ preprocessor \"$CXXCPP\" fails sanity check" >&5
echo "$as_me: error: C++ preprocessor \"$CXXCPP\" fails sanity check" >&2;}
   { (exit 1); exit 1; }; }
fi

ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu

    # Extract the first word of "as", so it can be a program name with args.
set dummy as; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_AS+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$AS"; then
  ac_cv_prog_AS="$AS" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_AS="as"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
AS=$ac_cv_prog_AS
if test -n "$AS"; then
  echo "$as_me:$LINENO: result: $AS" >&5
echo "${ECHO_T}$AS" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

    # Extract the first word of "ld", so it can be a program name with args.
set dummy ld; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_LD+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$LD"; then
  ac_cv_prog_LD="$LD" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_LD="ld"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
LD=$ac_cv_prog_LD
if test -n "$LD"; then
  echo "$as_me:$LINENO: result: $LD" >&5
echo "${ECHO_T}$LD" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

    WOFF=" -w"
    CPPFLAGS="$CPPFLAGS $WOFF"
    CFLAGS="$CFLAGS $extra_cflags"

    case $F77 in
      *g77*)
         # extra_fflags has array checking if in debug mode.
         FFLAGS="$FFLAGS $extra_cflags $extra_fflags"
         ;;
      *)
         FFLAGS="$FFLAGS $extra_cflags"
         ;;
    esac

    CXXFLAGS="$CXXFLAGS $extra_cflags"
    SOFLAGS="-shared ${SOFLAGS}"
    NEED_SONAME=yes
    ;;
esac

echo "$as_me:$LINENO: checking $CC dependency regen switch" >&5
echo $ECHO_N "checking $CC dependency regen switch... $ECHO_C" >&6
rm -f configure-test.*
rm -rf configure-test-dir
mkdir configure-test-dir
echo "#include <stdio.h>" > configure-test-dir/configure-test.cc

# Try to automatically determine these three things
# One of twopass, move or normal
CC_DEPEND_MODE=unknown
# Compiler-specific flag
CC_DEPEND_REGEN=unknown
# Filename extension
CC_DEPEND_EXT=unknown

# Try -MDupdate
for flag in -MDupdate; do
  if test $CC_DEPEND_MODE = unknown; then
    rm -f configure-test.o configure-test-dir/configure-test.o
    ac_try="$CXX $CFLAGS -c $flag configure-test-dir/configure-test.d -o configure-test-dir/configure-test.o configure-test-dir/configure-test.cc >/dev/null 2>conftest.out"
    (eval $ac_try) 2>&5
    if test -f configure-test-dir/configure-test.d ; then
      CC_DEPEND_MODE=normal
      CC_DEPEND_REGEN='-MDupdate $(dir $@)depend.mk'
      CC_DEPEND_EXT=depend.mk
    fi
  fi
done

# Because xlC ignores anything after the -M (ie: -Mgarbage or -Mupdate
# is the same as -M) and creates a .u file anyway, to make the
# following test work, we need to get rid of the .u file and carry on:
rm -f configure-test-dir/configure-test.u

# Try -MD or -M
if test $CC_DEPEND_MODE = unknown; then
  for flag in -MD -M; do
    for ext in d u o.d; do
      rm -f configure-test.o configure-test-dir/configure-test.o
      ac_try="$CXX $CFLAGS -c $flag configure-test-dir/configure-test.cc -o configure-test-dir/configure-test.o >/dev/null 2>conftest.out"
      (eval $ac_try) 2>&5
      if test -f configure-test-dir/configure-test.$ext ; then
	CC_DEPEND_REGEN=$flag
	CC_DEPEND_EXT=$ext
        if grep "^configure-test-dir/configure-test.o:" configure-test-dir/configure-test.$ext > /dev/null; then
          CC_DEPEND_MODE=normal
          break 2
        elif grep "^configure-test.o:" configure-test-dir/configure-test.$ext > /dev/null; then
          CC_DEPEND_MODE=modify
          break 2
        fi
      fi
      if test -f configure-test.$ext; then
	CC_DEPEND_REGEN=$flag
	CC_DEPEND_EXT=$ext
        if grep "^configure-test-dir/configure-test.o:" configure-test.$ext > /dev/null; then
          CC_DEPEND_MODE=move
        elif grep "^configure-test.o:" configure-test-dir/configure-test.$ext > /dev/null; then
          CC_DEPEND_MODE=modify2
        fi
        break 2
      fi
    done
  done
fi

# Last resort, try one that spits out to stdout
if test $CC_DEPEND_MODE = unknown; then
  for flag in -M; do
    rm -f configure-test.o configure-test-dir/configure-test.o
    ac_try="$CXX $CFLAGS -c $flag configure-test-dir/configure-test.cc >configure-test-dir/configure-test.d 2>conftest.out"
    (eval $ac_try) 2>&5
    if test -s configure-test-dir/configure-test.d ; then
      CC_DEPEND_MODE=stdout
      CC_DEPEND_REGEN=$flag
      CC_DEPEND_EXT=d
      break
    fi
  done
fi

if test $CC_DEPEND_MODE = unknown; then
  { { echo "$as_me:$LINENO: error: Cannot determine dependency generation flag" >&5
echo "$as_me: error: Cannot determine dependency generation flag" >&2;}
   { (exit 1); exit 1; }; }
fi

echo "$as_me:$LINENO: result: $CC_DEPEND_REGEN (mode: $CC_DEPEND_MODE, ext: $CC_DEPEND_EXT)" >&5
echo "${ECHO_T}$CC_DEPEND_REGEN (mode: $CC_DEPEND_MODE, ext: $CC_DEPEND_EXT)" >&6
rm -f configure-test.*
rm -rf configure-test-dir

F77_DEPEND_REGEN=$CC_DEPEND_REGEN
F77_DEPEND_MODE=$CC_DEPEND_MODE
F77_DEPEND_EXT=$CC_DEPEND_EXT







# Other programs

# Extract the first word of "gmake", so it can be a program name with args.
set dummy gmake; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_path_GMAKE+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $GMAKE in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_GMAKE="$GMAKE" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_GMAKE="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

  test -z "$ac_cv_path_GMAKE" && ac_cv_path_GMAKE="NOT_FOUND"
  ;;
esac
fi
GMAKE=$ac_cv_path_GMAKE

if test -n "$GMAKE"; then
  echo "$as_me:$LINENO: result: $GMAKE" >&5
echo "${ECHO_T}$GMAKE" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

if test "$GMAKE" = "NOT_FOUND"; then
  # Extract the first word of "make", so it can be a program name with args.
set dummy make; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_path_MAKE+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $MAKE in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_MAKE="$MAKE" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_MAKE="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

  test -z "$ac_cv_path_MAKE" && ac_cv_path_MAKE="NOT_FOUND"
  ;;
esac
fi
MAKE=$ac_cv_path_MAKE

if test -n "$MAKE"; then
  echo "$as_me:$LINENO: result: $MAKE" >&5
echo "${ECHO_T}$MAKE" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

else
  MAKE=$GMAKE
fi
if test "$MAKE" = "NOT_FOUND"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: GNU make not found." >&5
echo "$as_me: error: GNU make not found." >&2;}
   { (exit 1); exit 1; }; }

fi

    ##  SCI_CHECK_VERSION
    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="3.78.1"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for \`basename $MAKE\` version 3.78.1" >&5
echo $ECHO_N "checking for \`basename $MAKE\` version 3.78.1... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "echo configure: error: wrong GNU make version.; exit"; then
      _SCI_NOTCORRECT_='echo configure: error: wrong GNU make version.; exit'
    fi

    if test ""; then
      _SCI_COMP_=""
    else
      _SCI_COMP_="-gt"
    fi

    eval "$MAKE --version 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi


for ac_prog in gawk mawk nawk awk
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_AWK+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$AWK"; then
  ac_cv_prog_AWK="$AWK" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_AWK="$ac_prog"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
AWK=$ac_cv_prog_AWK
if test -n "$AWK"; then
  echo "$as_me:$LINENO: result: $AWK" >&5
echo "${ECHO_T}$AWK" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

  test -n "$AWK" && break
done


## test for bison. yacc is not sufficient as it has no -o option.
# Extract the first word of "bison", so it can be a program name with args.
set dummy bison; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_YACC+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$YACC"; then
  ac_cv_prog_YACC="$YACC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH:/usr/bin
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_YACC="bison"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

  test -z "$ac_cv_prog_YACC" && ac_cv_prog_YACC="nobison"
fi
fi
YACC=$ac_cv_prog_YACC
if test -n "$YACC"; then
  echo "$as_me:$LINENO: result: $YACC" >&5
echo "${ECHO_T}$YACC" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

if test "$YACC" = "nobison"; then
  echo "configure: error: bison is required, and was not found in your PATH."
  echo "                  Please add it to your PATH, or set the environment"
  echo "                  variable YACC to the appropriate bison executable,"
  echo "                  then run configure again."
  exit
fi

##AC_PROG_YACC

for ac_prog in flex lex
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_LEX+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$LEX"; then
  ac_cv_prog_LEX="$LEX" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_LEX="$ac_prog"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
LEX=$ac_cv_prog_LEX
if test -n "$LEX"; then
  echo "$as_me:$LINENO: result: $LEX" >&5
echo "${ECHO_T}$LEX" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

  test -n "$LEX" && break
done
test -n "$LEX" || LEX=":"

if test -z "$LEXLIB"
then
  echo "$as_me:$LINENO: checking for yywrap in -lfl" >&5
echo $ECHO_N "checking for yywrap in -lfl... $ECHO_C" >&6
if test "${ac_cv_lib_fl_yywrap+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfl  $LIBS"
cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"

/* Override any gcc2 internal prototype to avoid an error.  */
#ifdef __cplusplus
extern "C"
#endif
/* We use char because int might match the return type of a gcc2
   builtin and then its argument prototype would still apply.  */
char yywrap ();
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
yywrap ();
  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext conftest$ac_exeext
if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
  (eval $ac_link) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest$ac_exeext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_cv_lib_fl_yywrap=yes
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_cv_lib_fl_yywrap=no
fi
rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
echo "$as_me:$LINENO: result: $ac_cv_lib_fl_yywrap" >&5
echo "${ECHO_T}$ac_cv_lib_fl_yywrap" >&6
if test $ac_cv_lib_fl_yywrap = yes; then
  LEXLIB="-lfl"
else
  echo "$as_me:$LINENO: checking for yywrap in -ll" >&5
echo $ECHO_N "checking for yywrap in -ll... $ECHO_C" >&6
if test "${ac_cv_lib_l_yywrap+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-ll  $LIBS"
cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"

/* Override any gcc2 internal prototype to avoid an error.  */
#ifdef __cplusplus
extern "C"
#endif
/* We use char because int might match the return type of a gcc2
   builtin and then its argument prototype would still apply.  */
char yywrap ();
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
yywrap ();
  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext conftest$ac_exeext
if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
  (eval $ac_link) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest$ac_exeext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_cv_lib_l_yywrap=yes
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_cv_lib_l_yywrap=no
fi
rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
echo "$as_me:$LINENO: result: $ac_cv_lib_l_yywrap" >&5
echo "${ECHO_T}$ac_cv_lib_l_yywrap" >&6
if test $ac_cv_lib_l_yywrap = yes; then
  LEXLIB="-ll"
fi

fi

fi

if test "x$LEX" != "x:"; then
  echo "$as_me:$LINENO: checking lex output file root" >&5
echo $ECHO_N "checking lex output file root... $ECHO_C" >&6
if test "${ac_cv_prog_lex_root+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  # The minimal lex program is just a single line: %%.  But some broken lexes
# (Solaris, I think it was) want two %% lines, so accommodate them.
cat >conftest.l <<_ACEOF
%%
%%
_ACEOF
{ (eval echo "$as_me:$LINENO: \"$LEX conftest.l\"") >&5
  (eval $LEX conftest.l) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }
if test -f lex.yy.c; then
  ac_cv_prog_lex_root=lex.yy
elif test -f lexyy.c; then
  ac_cv_prog_lex_root=lexyy
else
  { { echo "$as_me:$LINENO: error: cannot find output from $LEX; giving up" >&5
echo "$as_me: error: cannot find output from $LEX; giving up" >&2;}
   { (exit 1); exit 1; }; }
fi
fi
echo "$as_me:$LINENO: result: $ac_cv_prog_lex_root" >&5
echo "${ECHO_T}$ac_cv_prog_lex_root" >&6
rm -f conftest.l
LEX_OUTPUT_ROOT=$ac_cv_prog_lex_root

echo "$as_me:$LINENO: checking whether yytext is a pointer" >&5
echo $ECHO_N "checking whether yytext is a pointer... $ECHO_C" >&6
if test "${ac_cv_prog_lex_yytext_pointer+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  # POSIX says lex can declare yytext either as a pointer or an array; the
# default is implementation-dependent. Figure out which it is, since
# not all implementations provide the %pointer and %array declarations.
ac_cv_prog_lex_yytext_pointer=no
echo 'extern char *yytext;' >>$LEX_OUTPUT_ROOT.c
ac_save_LIBS=$LIBS
LIBS="$LIBS $LEXLIB"
cat >conftest.$ac_ext <<_ACEOF
`cat $LEX_OUTPUT_ROOT.c`
_ACEOF
rm -f conftest.$ac_objext conftest$ac_exeext
if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
  (eval $ac_link) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest$ac_exeext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_cv_prog_lex_yytext_pointer=yes
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
fi
rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_save_LIBS
rm -f "${LEX_OUTPUT_ROOT}.c"

fi
echo "$as_me:$LINENO: result: $ac_cv_prog_lex_yytext_pointer" >&5
echo "${ECHO_T}$ac_cv_prog_lex_yytext_pointer" >&6
if test $ac_cv_prog_lex_yytext_pointer = yes; then

cat >>confdefs.h <<\_ACEOF
#define YYTEXT_POINTER 1
_ACEOF

fi

fi

LEX_LIB_FLAG="$LEXLIB"


if test "$pkg_uintah" = "yes" ; then
  # Extract the first word of "perl", so it can be a program name with args.
set dummy perl; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_PERL+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$PERL"; then
  ac_cv_prog_PERL="$PERL" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_PERL="perl"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

  test -z "$ac_cv_prog_PERL" && ac_cv_prog_PERL="echo configure: error: perl was not found in your PATH.;exit"
fi
fi
PERL=$ac_cv_prog_PERL
if test -n "$PERL"; then
  echo "$as_me:$LINENO: result: $PERL" >&5
echo "${ECHO_T}$PERL" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

else
  # Extract the first word of "perl", so it can be a program name with args.
set dummy perl; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_PERL+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$PERL"; then
  ac_cv_prog_PERL="$PERL" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_PERL="perl"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
PERL=$ac_cv_prog_PERL
if test -n "$PERL"; then
  echo "$as_me:$LINENO: result: $PERL" >&5
echo "${ECHO_T}$PERL" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi

fi

if test "$PERL" = "perl"; then
  PERL=`type perl | sed 's%^.* %%'`
fi

# Extract the first word of "etags", so it can be a program name with args.
set dummy etags; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_ETAGS+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$ETAGS"; then
  ac_cv_prog_ETAGS="$ETAGS" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ETAGS="etags"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

fi
fi
ETAGS=$ac_cv_prog_ETAGS
if test -n "$ETAGS"; then
  echo "$as_me:$LINENO: result: $ETAGS" >&5
echo "${ECHO_T}$ETAGS" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi


##  Create the Packages/Uintah/tools dir for later use.
if test "$pkg_uintah" = "yes" ; then
  if test ! -d "Packages/Uintah/tools"; then
    echo "$as_me:$LINENO: result: Creating Packages/Uintah/tools directory" >&5
echo "${ECHO_T}Creating Packages/Uintah/tools directory" >&6
    mkdir -p "Packages/Uintah/tools"
  fi
  if test "$ac_cv_f77_compiler_gnu" = "yes" ; then
     G77=1
  else
     G77=0
  fi
fi























##  set the default language after the build tools are found
ac_ext=cc
ac_cpp='$CXXCPP $CPPFLAGS'
ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_cxx_compiler_gnu


##  ----------  See if this is a 64 bit machine --------------------------


echo "$as_me:$LINENO: checking for ANSI C header files" >&5
echo $ECHO_N "checking for ANSI C header files... $ECHO_C" >&6
if test "${ac_cv_header_stdc+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <float.h>

_ACEOF
if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
  ac_status=$?
  egrep -v '^ *\+' conftest.er1 >conftest.err
  rm -f conftest.er1
  cat conftest.err >&5
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } >/dev/null; then
  if test -s conftest.err; then
    ac_cpp_err=$ac_cxx_preproc_warn_flag
  else
    ac_cpp_err=
  fi
else
  ac_cpp_err=yes
fi
if test -z "$ac_cpp_err"; then
  ac_cv_header_stdc=yes
else
  echo "$as_me: failed program was:" >&5
  cat conftest.$ac_ext >&5
  ac_cv_header_stdc=no
fi
rm -f conftest.err conftest.$ac_ext

if test $ac_cv_header_stdc = yes; then
  # SunOS 4.x string.h does not declare mem*, contrary to ANSI.
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <string.h>

_ACEOF
if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
  egrep "memchr" >/dev/null 2>&1; then
  :
else
  ac_cv_header_stdc=no
fi
rm -f conftest*

fi

if test $ac_cv_header_stdc = yes; then
  # ISC 2.0.2 stdlib.h does not declare free, contrary to ANSI.
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <stdlib.h>

_ACEOF
if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
  egrep "free" >/dev/null 2>&1; then
  :
else
  ac_cv_header_stdc=no
fi
rm -f conftest*

fi

if test $ac_cv_header_stdc = yes; then
  # /bin/cc in Irix-4.0.5 gets non-ANSI ctype macros unless using -ansi.
  if test "$cross_compiling" = yes; then
  :
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <ctype.h>
#if ((' ' & 0x0FF) == 0x020)
# define ISLOWER(c) ('a' <= (c) && (c) <= 'z')
# define TOUPPER(c) (ISLOWER(c) ? 'A' + ((c) - 'a') : (c))
#else
# define ISLOWER(c) (('a' <= (c) && (c) <= 'i') \
                     || ('j' <= (c) && (c) <= 'r') \
                     || ('s' <= (c) && (c) <= 'z'))
# define TOUPPER(c) (ISLOWER(c) ? ((c) | 0x40) : (c))
#endif

#define XOR(e, f) (((e) && !(f)) || (!(e) && (f)))
int
main ()
{
  int i;
  for (i = 0; i < 256; i++)
    if (XOR (islower (i), ISLOWER (i))
        || toupper (i) != TOUPPER (i))
      exit(2);
  exit (0);
}
_ACEOF
rm -f conftest$ac_exeext
if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
  (eval $ac_link) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  :
else
  echo "$as_me: program exited with status $ac_status" >&5
echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
( exit $ac_status )
ac_cv_header_stdc=no
fi
rm -f core core.* *.core conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext
fi
fi
fi
echo "$as_me:$LINENO: result: $ac_cv_header_stdc" >&5
echo "${ECHO_T}$ac_cv_header_stdc" >&6
if test $ac_cv_header_stdc = yes; then

cat >>confdefs.h <<\_ACEOF
#define STDC_HEADERS 1
_ACEOF

fi

# On IRIX 5.3, sys/types and inttypes.h are conflicting.









for ac_header in sys/types.h sys/stat.h stdlib.h string.h memory.h strings.h \
                  inttypes.h stdint.h unistd.h
do
as_ac_Header=`echo "ac_cv_header_$ac_header" | $as_tr_sh`
echo "$as_me:$LINENO: checking for $ac_header" >&5
echo $ECHO_N "checking for $ac_header... $ECHO_C" >&6
if eval "test \"\${$as_ac_Header+set}\" = set"; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
$ac_includes_default

#include <$ac_header>
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  eval "$as_ac_Header=yes"
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
eval "$as_ac_Header=no"
fi
rm -f conftest.$ac_objext conftest.$ac_ext
fi
echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`" >&5
echo "${ECHO_T}`eval echo '${'$as_ac_Header'}'`" >&6
if test `eval echo '${'$as_ac_Header'}'` = yes; then
  cat >>confdefs.h <<_ACEOF
#define `echo "HAVE_$ac_header" | $as_tr_cpp` 1
_ACEOF

fi

done


echo "$as_me:$LINENO: checking for void*" >&5
echo $ECHO_N "checking for void*... $ECHO_C" >&6
if test "${ac_cv_type_voidp+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
$ac_includes_default
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
if ((void* *) 0)
  return 0;
if (sizeof (void*))
  return 0;
  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_cv_type_voidp=yes
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_cv_type_voidp=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext
fi
echo "$as_me:$LINENO: result: $ac_cv_type_voidp" >&5
echo "${ECHO_T}$ac_cv_type_voidp" >&6

echo "$as_me:$LINENO: checking size of void*" >&5
echo $ECHO_N "checking size of void*... $ECHO_C" >&6
if test "${ac_cv_sizeof_voidp+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test "$ac_cv_type_voidp" = yes; then
  # The cast to unsigned long works around a bug in the HP C Compiler
  # version HP92453-01 B.11.11.23709.GP, which incorrectly rejects
  # declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.
  # This bug is HP SR number 8606223364.
  if test "$cross_compiling" = yes; then
  # Depending upon the size, compute the lo and hi bounds.
cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
$ac_includes_default
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
static int test_array [1 - 2 * !(((long) (sizeof (void*))) >= 0)];
test_array [0] = 0

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_lo=0 ac_mid=0
  while :; do
    cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
$ac_includes_default
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
static int test_array [1 - 2 * !(((long) (sizeof (void*))) <= $ac_mid)];
test_array [0] = 0

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_hi=$ac_mid; break
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_lo=`expr $ac_mid + 1`
                    if test $ac_lo -le $ac_mid; then
                      ac_lo= ac_hi=
                      break
                    fi
                    ac_mid=`expr 2 '*' $ac_mid + 1`
fi
rm -f conftest.$ac_objext conftest.$ac_ext
  done
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
$ac_includes_default
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
static int test_array [1 - 2 * !(((long) (sizeof (void*))) < 0)];
test_array [0] = 0

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_hi=-1 ac_mid=-1
  while :; do
    cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
$ac_includes_default
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
static int test_array [1 - 2 * !(((long) (sizeof (void*))) >= $ac_mid)];
test_array [0] = 0

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_lo=$ac_mid; break
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_hi=`expr '(' $ac_mid ')' - 1`
                       if test $ac_mid -le $ac_hi; then
                         ac_lo= ac_hi=
                         break
                       fi
                       ac_mid=`expr 2 '*' $ac_mid`
fi
rm -f conftest.$ac_objext conftest.$ac_ext
  done
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_lo= ac_hi=
fi
rm -f conftest.$ac_objext conftest.$ac_ext
fi
rm -f conftest.$ac_objext conftest.$ac_ext
# Binary search between lo and hi bounds.
while test "x$ac_lo" != "x$ac_hi"; do
  ac_mid=`expr '(' $ac_hi - $ac_lo ')' / 2 + $ac_lo`
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
$ac_includes_default
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
static int test_array [1 - 2 * !(((long) (sizeof (void*))) <= $ac_mid)];
test_array [0] = 0

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_hi=$ac_mid
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_lo=`expr '(' $ac_mid ')' + 1`
fi
rm -f conftest.$ac_objext conftest.$ac_ext
done
case $ac_lo in
?*) ac_cv_sizeof_voidp=$ac_lo;;
'') { { echo "$as_me:$LINENO: error: cannot compute sizeof (void*), 77" >&5
echo "$as_me: error: cannot compute sizeof (void*), 77" >&2;}
   { (exit 1); exit 1; }; } ;;
esac
else
  if test "$cross_compiling" = yes; then
  { { echo "$as_me:$LINENO: error: cannot run test program while cross compiling" >&5
echo "$as_me: error: cannot run test program while cross compiling" >&2;}
   { (exit 1); exit 1; }; }
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
$ac_includes_default
long longval () { return (long) (sizeof (void*)); }
unsigned long ulongval () { return (long) (sizeof (void*)); }
#include <stdio.h>
#include <stdlib.h>
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{

  FILE *f = fopen ("conftest.val", "w");
  if (! f)
    exit (1);
  if (((long) (sizeof (void*))) < 0)
    {
      long i = longval ();
      if (i != ((long) (sizeof (void*))))
	exit (1);
      fprintf (f, "%ld\n", i);
    }
  else
    {
      unsigned long i = ulongval ();
      if (i != ((long) (sizeof (void*))))
	exit (1);
      fprintf (f, "%lu\n", i);
    }
  exit (ferror (f) || fclose (f) != 0);

  ;
  return 0;
}
_ACEOF
rm -f conftest$ac_exeext
if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
  (eval $ac_link) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_cv_sizeof_voidp=`cat conftest.val`
else
  echo "$as_me: program exited with status $ac_status" >&5
echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
( exit $ac_status )
{ { echo "$as_me:$LINENO: error: cannot compute sizeof (void*), 77" >&5
echo "$as_me: error: cannot compute sizeof (void*), 77" >&2;}
   { (exit 1); exit 1; }; }
fi
rm -f core core.* *.core conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext
fi
fi
rm -f conftest.val
else
  ac_cv_sizeof_voidp=0
fi
fi
echo "$as_me:$LINENO: result: $ac_cv_sizeof_voidp" >&5
echo "${ECHO_T}$ac_cv_sizeof_voidp" >&6
cat >>confdefs.h <<_ACEOF
#define SIZEOF_VOIDP $ac_cv_sizeof_voidp
_ACEOF


case $ac_cv_sizeof_voidp in
 8)
  NBITS=64
  ;;
 4)
  NBITS=32
  ;;
 *)
  { echo "$as_me:$LINENO: WARNING: This machine has some strange sizeof(void*): $ac_cv_sizeof_voidp." >&5
echo "$as_me: WARNING: This machine has some strange sizeof(void*): $ac_cv_sizeof_voidp." >&2;}
  { echo "$as_me:$LINENO: WARNING: Usually this means that your LD_LIBRARY_PATH is set" >&5
echo "$as_me: WARNING: Usually this means that your LD_LIBRARY_PATH is set" >&2;}
  { echo "$as_me:$LINENO: WARNING: incorrectly for the compiler you are using.  To verify" >&5
echo "$as_me: WARNING: incorrectly for the compiler you are using.  To verify" >&2;}
  { echo "$as_me:$LINENO: WARNING: that this is the problem you will need to copy the C++" >&5
echo "$as_me: WARNING: that this is the problem you will need to copy the C++" >&2;}
  { echo "$as_me:$LINENO: WARNING: program ...about 8 lines long... from the end of the" >&5
echo "$as_me: WARNING: program ...about 8 lines long... from the end of the" >&2;}
  { echo "$as_me:$LINENO: WARNING: config.log file and run the compile command which is just" >&5
echo "$as_me: WARNING: config.log file and run the compile command which is just" >&2;}
  { echo "$as_me:$LINENO: WARNING: before it in config.log.  Run the executable and see what" >&5
echo "$as_me: WARNING: before it in config.log.  Run the executable and see what" >&2;}
  { echo "$as_me:$LINENO: WARNING: error message you get." >&5
echo "$as_me: WARNING: error message you get." >&2;}
  { echo "$as_me:$LINENO: WARNING: You can also just fix your LD_LIBRARY_PATH if you know what" >&5
echo "$as_me: WARNING: You can also just fix your LD_LIBRARY_PATH if you know what" >&2;}
  { echo "$as_me:$LINENO: WARNING: is wrong with it." >&5
echo "$as_me: WARNING: is wrong with it." >&2;}

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting due to size of void* problem! Read above warnings!" >&5
echo "$as_me: error: Exiting due to size of void* problem! Read above warnings!" >&2;}
   { (exit 1); exit 1; }; }

  ;;
esac


##  --  search for Insight  ----------------------------------------------------


if test "$pkg_insight" = "yes"; then

   # Insight is a large distribution.
   # we do not want to check all of it. We thus check only if the
   # include and lib Insight dirs exist.

   echo "$as_me:$LINENO: checking for Insight." >&5
echo $ECHO_N "checking for Insight.... $ECHO_C" >&6

   if test "$with_insight"; then
      dir="$with_insight"
   else
      dir="/usr/local/lib/InsightToolkit"
   fi

   if test -a "$dir/ITKConfig.cmake"; then
	INC_INSIGHT_H="`cat $dir/ITKConfig.cmake | grep 'SET(ITK_INCLUDE_DIRS' | sed 's/SET(ITK_INCLUDE_DIRS \"/;/' | sed 's/\")//' | sed 's/;/ -I/g'`"
        INSIGHT_LIB_DIR_FLAG="`cat $dir/ITKConfig.cmake | grep 'SET(ITK_LIBRARY_DIRS' | sed 's/SET(ITK_LIBRARY_DIRS "/;/' | sed 's/")//' | sed 's/;/ -L/g'`"
	INSIGHT_LIB_FLAG="-lITKFEM -lITKIO -lITKMetaIO -lITKAlgorithms -lITKStatistics -lVXLNumerics -lITKNumerics -lITKBasicFilters -lITKCommon -litkpng -litkzlib"
#	INSIGHT_LIB_FLAG="`cat $dir/ITKConfig.cmake | grep 'SET(ITK_LIBRARIES' | sed 's/SET(ITK_LIBRARIES//' | sed 's/)//' | sed 's/ / -l/g'`"

      DEF_INSIGHT="#define HAVE_INSIGHT"
      HAVE_INSIGHT="yes"

      echo "$as_me:$LINENO: result: $dir" >&5
echo "${ECHO_T}$dir" >&6
   else
      echo "$as_me:$LINENO: result: not found." >&5
echo "${ECHO_T}not found." >&6
   fi
fi







#########################################################################
## Make sure number of bit build for Thirdparty and SCIRun compile match
##

if test "$thirdparty" && test -e $thirdparty; then
  if test "$enable_64bit" = "yes"; then
    case "$thirdparty" in
      *32bit*)
	{ { echo "$as_me:$LINENO: error: You specified 64 bit compile but have 32 bit Thirdparty?" >&5
echo "$as_me: error: You specified 64 bit compile but have 32 bit Thirdparty?" >&2;}
   { (exit 1); exit 1; }; }
      ;;
    esac
  else
    case "$thirdparty" in
      *64bit*)
	{ { echo "$as_me:$LINENO: error: You specified 32 bit compile but have 64 bit Thirdparty?" >&5
echo "$as_me: error: You specified 32 bit compile but have 64 bit Thirdparty?" >&2;}
   { (exit 1); exit 1; }; }
      ;;
    esac
  fi

  SCI_LAB_TP_DEFAULT="$thirdparty $SCI_LAB_TP_DEFAULT"
else
  if test "$thirdparty"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Specified thirdparty directory does not exists!" >&5
echo "$as_me: error: Specified thirdparty directory does not exists!" >&2;}
   { (exit 1); exit 1; }; }

  fi
fi

##  SCI_LAB_TP_DEFAULT is used to add "standard" library search paths
##  for those of us who are too lazy to type out all the --with paths

if test -z "$thirdparty"; then
  TP_VERSION=1.8
  TP_ARCH=`uname -s`
  TP_COMPILER=gcc-3.0.4
  ac_try="$CC -v > /dev/null 2> conftest.out"
  (eval $ac_try) 2>&5
  vers=`grep "gcc version" conftest.out | cut -d' ' -f 3`
  rm -f conftest.out
  if test -n "$vers"; then
    TP_COMPILER=gcc-$vers
  else
    ac_try="$CC -version > /dev/null 2> conftest.out"
    (eval $ac_try) 2>&5
    vers=`grep MIPSpro conftest.out | cut -d' ' -f 4`
    rm -f conftest.out
    if test -n "$vers"; then
      TP_COMPILER=MIPSpro-$vers
    else
      TP_COMPILER=""
    fi
  fi

  TP_BASE=/usr/sci/projects
  TP_SUBDIR=$TP_ARCH/$TP_COMPILER-${NBITS}bit
  TP_PATH=$TP_BASE/SCIRun/Thirdparty/$TP_VERSION/$TP_SUBDIR

  if test -e $TP_PATH; then
    SCI_LAB_TP_DEFAULT="$SCI_LAB_TP_DEFAULT $TP_PATH"
  else
    { echo "$as_me:$LINENO: WARNING: Default thirdparty directory $TP_PATH does not exists!" >&5
echo "$as_me: WARNING: Default thirdparty directory $TP_PATH does not exists!" >&2;}
  fi

  CCATP_VERSION=1.0.0
  CCATP_PATH=$TP_BASE/CCA/Thirdparty/$CCATP_VERSION/$TP_SUBDIR

  UINTAHTP_VERSION=1.0.0
  UINTAHTP_PATH=$TP_BASE/Uintah/Thirdparty/$UINTAHTP_VERSION/$TP_SUBDIR

  if test "$pkg_uintah" = "yes"; then
    if test -e $CCATP_PATH && test -e $UINTAHTP_PATH; then
      SCI_LAB_TP_DEFAULT="$SCI_LAB_TP_DEFAULT $CCATP_PATH $UINTAHTP_PATH"
    else
       { echo "$as_me:$LINENO: WARNING: Default Uintah thirdparty directory does not exists!" >&5
echo "$as_me: WARNING: Default Uintah thirdparty directory does not exists!" >&2;}
    fi
  fi

  RTRTTP_VERSION=1.0.0
  RTRTTP_PATH=$TP_BASE/rtrt/Thirdparty/$RTRTTP_VERSION/$TP_SUBDIR

  if test "$pkg_rtrt" = "yes"; then
    if test -e $RTRTTP_PATH; then
      SCI_LAB_TP_DEFAULT="$SCI_LAB_TP_DEFAULT $RTRTTP_PATH"
    else
      { echo "$as_me:$LINENO: WARNING: Default RTRT thirdparty directory $RTRTTP_PATH does not exists!" >&5
echo "$as_me: WARNING: Default RTRT thirdparty directory $RTRTTP_PATH does not exists!" >&2;}
    fi
  fi

  echo "$as_me:$LINENO: result: Using default thirdparty directory $SCI_LAB_TP_DEFAULT" >&5
echo "${ECHO_T}Using default thirdparty directory $SCI_LAB_TP_DEFAULT" >&6
fi

for i in $SCI_LAB_TP_DEFAULT; do
  if test ! -d "$i"; then
    continue
  fi

  #this is where the lib actually lives
  if test ! -d "$i/lib"; then
    continue
  fi

  SCI_LAB_TP_LIBS="$SCI_LAB_TP_LIBS $i/lib"
done

#########################################################################
##  Set the no_optimize_flag
##

case $host in
  *-irix*)
    no_optimize_flag=-O0
    TIME_IMPL=Time_irix.cc
    ;;
  *linux*)
    no_optimize_flag=-O0
    ;;
  *-aix*)

    { echo "$as_me:$LINENO: WARNING: AIX is not completely supported!" >&5
echo "$as_me: WARNING: AIX is not completely supported!" >&2;}

    # On AIX, don't automatically generate .so's.  Make .a's and then
    # later we will make .so's from them.
    SO_OR_ARCHIVE_EXTENSION=a
    no_optimize_flag=-O0
    case $CXX in
      *xlC*)
         # xlC does not know the -O0 flag.
         no_optimize_flag=""
	 ;;
      *KCC*)
         ;;
      *g++*)
	 ;;
      *)
         { echo "$as_me:$LINENO: WARNING: Do not know this compiler." >&5
echo "$as_me: WARNING: Do not know this compiler." >&2;}
         { echo "$as_me:$LINENO: WARNING: Defaulting to -O0 for the no optimize flag." >&5
echo "$as_me: WARNING: Defaulting to -O0 for the no optimize flag." >&2;}
         ;;
    esac
    ;;
  *)
    ;;
esac

##  ----------------------------------------------------------------------
##  ----------  search for required libraries and headers  ---------------
##  ----------------------------------------------------------------------

echo
{ echo "$as_me:$LINENO: checking for required standard components......" >&5
echo "$as_me: checking for required standard components......" >&6;}
echo

##  --  search for the math library  -------------------------------------


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   m"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for m) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for m) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes m (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo m | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libm.so and libm.a" >&5
echo $ECHO_N "checking for both libm.so and libm.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lm" >&5
echo $ECHO_N "checking for -lm... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lm" >&5
echo $ECHO_N "checking for main in -lm... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libm.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libm.a"; then
            echo "$as_me:$LINENO: result: Found libm.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libm.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libm.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libm.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lm

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libm.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libm.a" >&5
echo "${ECHO_T}Did not find libm.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libm.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libm.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libm.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libm.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lm

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libm.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lm $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libm.a" -o -f "$_CHECK_PATH_/libm.so" \
	                 -o -f "$_CHECK_PATH_/libm.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lm

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       "
       echo "   headers:     math.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="math.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for math.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for math.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files






##  --  search for X  ----------------------------------------------------

dirs="$with_X11_lib /usr/lib /usr/X11R6/lib"


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   X11"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for X11) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for X11) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes X11 (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo X11 | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libX11.so and libX11.a" >&5
echo $ECHO_N "checking for both libX11.so and libX11.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lX11" >&5
echo $ECHO_N "checking for -lX11... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lX11" >&5
echo $ECHO_N "checking for main in -lX11... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libX11.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libX11.a"; then
            echo "$as_me:$LINENO: result: Found libX11.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libX11.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libX11.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libX11.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lX11

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libX11.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libX11.a" >&5
echo "${ECHO_T}Did not find libX11.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libX11.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libX11.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libX11.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libX11.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lX11

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libX11.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lX11 $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libX11.a" -o -f "$_CHECK_PATH_/libX11.so" \
	                 -o -f "$_CHECK_PATH_/libX11.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lX11

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   Xext"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for Xext) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for Xext) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes Xext (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo Xext | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libXext.so and libXext.a" >&5
echo $ECHO_N "checking for both libXext.so and libXext.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lXext" >&5
echo $ECHO_N "checking for -lXext... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lXext" >&5
echo $ECHO_N "checking for main in -lXext... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libXext.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libXext.a"; then
            echo "$as_me:$LINENO: result: Found libXext.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXext.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libXext.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXext.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lXext

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libXext.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libXext.a" >&5
echo "${ECHO_T}Did not find libXext.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libXext.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libXext.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libXext.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXext.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lXext

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libXext.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lXext $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libXext.a" -o -f "$_CHECK_PATH_/libXext.so" \
	                 -o -f "$_CHECK_PATH_/libXext.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lXext

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   Xaw"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for Xaw) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for Xaw) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes Xaw (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo Xaw | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libXaw.so and libXaw.a" >&5
echo $ECHO_N "checking for both libXaw.so and libXaw.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lXaw" >&5
echo $ECHO_N "checking for -lXaw... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lXaw" >&5
echo $ECHO_N "checking for main in -lXaw... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libXaw.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libXaw.a"; then
            echo "$as_me:$LINENO: result: Found libXaw.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXaw.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libXaw.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXaw.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lXaw

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libXaw.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libXaw.a" >&5
echo "${ECHO_T}Did not find libXaw.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libXaw.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libXaw.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libXaw.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXaw.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lXaw

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libXaw.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lXaw $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libXaw.a" -o -f "$_CHECK_PATH_/libXaw.so" \
	                 -o -f "$_CHECK_PATH_/libXaw.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lXaw

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   Xi"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for Xi) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for Xi) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes Xi (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo Xi | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libXi.so and libXi.a" >&5
echo $ECHO_N "checking for both libXi.so and libXi.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lXi" >&5
echo $ECHO_N "checking for -lXi... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lXi" >&5
echo $ECHO_N "checking for main in -lXi... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libXi.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libXi.a"; then
            echo "$as_me:$LINENO: result: Found libXi.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXi.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libXi.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXi.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lXi

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libXi.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libXi.a" >&5
echo "${ECHO_T}Did not find libXi.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libXi.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libXi.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libXi.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXi.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lXi

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libXi.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lXi $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libXi.a" -o -f "$_CHECK_PATH_/libXi.so" \
	                 -o -f "$_CHECK_PATH_/libXi.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lXi

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   Xt"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for Xt) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for Xt) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes Xt (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo Xt | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libXt.so and libXt.a" >&5
echo $ECHO_N "checking for both libXt.so and libXt.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lXt" >&5
echo $ECHO_N "checking for -lXt... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lXt" >&5
echo $ECHO_N "checking for main in -lXt... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libXt.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libXt.a"; then
            echo "$as_me:$LINENO: result: Found libXt.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXt.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libXt.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXt.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lXt

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libXt.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libXt.a" >&5
echo "${ECHO_T}Did not find libXt.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libXt.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libXt.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libXt.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXt.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lXt

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libXt.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lXt $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libXt.a" -o -f "$_CHECK_PATH_/libXt.so" \
	                 -o -f "$_CHECK_PATH_/libXt.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lXt

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   Xmu"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for Xmu) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for Xmu) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes Xmu (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo Xmu | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libXmu.so and libXmu.a" >&5
echo $ECHO_N "checking for both libXmu.so and libXmu.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lXmu" >&5
echo $ECHO_N "checking for -lXmu... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lXmu" >&5
echo $ECHO_N "checking for main in -lXmu... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libXmu.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libXmu.a"; then
            echo "$as_me:$LINENO: result: Found libXmu.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXmu.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libXmu.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXmu.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lXmu

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libXmu.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libXmu.a" >&5
echo "${ECHO_T}Did not find libXmu.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libXmu.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libXmu.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libXmu.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libXmu.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lXmu

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libXmu.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lXmu $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libXmu.a" -o -f "$_CHECK_PATH_/libXmu.so" \
	                 -o -f "$_CHECK_PATH_/libXmu.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lXmu

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi




    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_X11/../include"
       echo "   headers:     X11/Xlib.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_X11/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="X11/Xlib.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for X11/Xlib.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for X11/Xlib.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



if test "$HAVE_X11_XLIB_H"; then
   INC_XLIB_H=$INC_X_XLIB_H
fi

X_LIB_FLAG="$XMU_LIB_DIR_FLAG $XMU_LIB_FLAG $XI_LIB_DIR_FLAG $XI_LIB_FLAG $XEXT_LIB_DIR_FLAG $XEXT_LIB_FLAG $X11_LIB_DIR_FLAG $X11_LIB_FLAG"















##  --  search for the fortran library  ----------------------------------
F_LIB_FLAG=""
case $host in
  *-irix*)

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   ftn"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for ftn) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for ftn) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes ftn (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo ftn | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libftn.so and libftn.a" >&5
echo $ECHO_N "checking for both libftn.so and libftn.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lftn" >&5
echo $ECHO_N "checking for -lftn... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lftn" >&5
echo $ECHO_N "checking for main in -lftn... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libftn.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libftn.a"; then
            echo "$as_me:$LINENO: result: Found libftn.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libftn.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libftn.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libftn.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lftn

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libftn.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libftn.a" >&5
echo "${ECHO_T}Did not find libftn.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libftn.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libftn.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libftn.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libftn.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lftn

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libftn.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lftn $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libftn.a" -o -f "$_CHECK_PATH_/libftn.so" \
	                 -o -f "$_CHECK_PATH_/libftn.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lftn

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   fortran"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for fortran) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for fortran) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes fortran (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo fortran | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libfortran.so and libfortran.a" >&5
echo $ECHO_N "checking for both libfortran.so and libfortran.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lfortran" >&5
echo $ECHO_N "checking for -lfortran... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lfortran" >&5
echo $ECHO_N "checking for main in -lfortran... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libfortran.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libfortran.a"; then
            echo "$as_me:$LINENO: result: Found libfortran.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfortran.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libfortran.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfortran.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lfortran

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libfortran.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libfortran.a" >&5
echo "${ECHO_T}Did not find libfortran.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libfortran.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libfortran.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libfortran.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfortran.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lfortran

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libfortran.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lfortran $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libfortran.a" -o -f "$_CHECK_PATH_/libfortran.so" \
	                 -o -f "$_CHECK_PATH_/libfortran.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lfortran

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


    if test "$HAVE_LIB_FTN" == "yes" && test "$HAVE_LIB_FORTRAN" == "yes"; then
       F_LIB_FLAG="$FTN_LIB_FLAG $FORTRAN_LIB_FLAG"
    fi
    ;;
  *aix*)
    # AIX Fortran Library Check

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   xlf90"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for xlf90) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for xlf90) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes xlf90 (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo xlf90 | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libxlf90.so and libxlf90.a" >&5
echo $ECHO_N "checking for both libxlf90.so and libxlf90.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lxlf90" >&5
echo $ECHO_N "checking for -lxlf90... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lxlf90" >&5
echo $ECHO_N "checking for main in -lxlf90... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libxlf90.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libxlf90.a"; then
            echo "$as_me:$LINENO: result: Found libxlf90.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libxlf90.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libxlf90.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libxlf90.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lxlf90

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libxlf90.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libxlf90.a" >&5
echo "${ECHO_T}Did not find libxlf90.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libxlf90.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libxlf90.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libxlf90.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libxlf90.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lxlf90

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libxlf90.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lxlf90 $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libxlf90.a" -o -f "$_CHECK_PATH_/libxlf90.so" \
	                 -o -f "$_CHECK_PATH_/libxlf90.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lxlf90

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


    if test "$HAVE_LIB_XLF90" = "yes"; then
      F_LIB_FLAG="$XLF90_LIB_FLAG"
    fi
    ;;
  *linux*)
    # Linux Library Check

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   g2c"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for g2c) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for g2c) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes g2c (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo g2c | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libg2c.so and libg2c.a" >&5
echo $ECHO_N "checking for both libg2c.so and libg2c.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lg2c" >&5
echo $ECHO_N "checking for -lg2c... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lg2c" >&5
echo $ECHO_N "checking for main in -lg2c... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libg2c.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libg2c.a"; then
            echo "$as_me:$LINENO: result: Found libg2c.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libg2c.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libg2c.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libg2c.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lg2c

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libg2c.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libg2c.a" >&5
echo "${ECHO_T}Did not find libg2c.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libg2c.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libg2c.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libg2c.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libg2c.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lg2c

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libg2c.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lg2c $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libg2c.a" -o -f "$_CHECK_PATH_/libg2c.so" \
	                 -o -f "$_CHECK_PATH_/libg2c.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lg2c

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


    if test "$HAVE_LIB_G2C"; then
       F_LIB_FLAG="$G2C_LIB_FLAG"
    fi
    ;;
  *dec*)

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   for"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for for) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for for) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes for (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo for | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libfor.so and libfor.a" >&5
echo $ECHO_N "checking for both libfor.so and libfor.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lfor" >&5
echo $ECHO_N "checking for -lfor... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lfor" >&5
echo $ECHO_N "checking for main in -lfor... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libfor.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libfor.a"; then
            echo "$as_me:$LINENO: result: Found libfor.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfor.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libfor.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfor.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lfor

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libfor.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libfor.a" >&5
echo "${ECHO_T}Did not find libfor.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libfor.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libfor.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libfor.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfor.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lfor

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libfor.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lfor $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libfor.a" -o -f "$_CHECK_PATH_/libfor.so" \
	                 -o -f "$_CHECK_PATH_/libfor.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lfor

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


    if test "$HAVE_LIB_FOR"; then
       F_LIB_FLAG="$FOR_LIB_FLAG"
    fi
    ;;
  *-darwin*)
    # OSX Library Check

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      /sw/lib"
       echo "   lib name:   g2c"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for g2c) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for g2c) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes g2c (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo g2c | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libg2c.so and libg2c.a" >&5
echo $ECHO_N "checking for both libg2c.so and libg2c.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lg2c" >&5
echo $ECHO_N "checking for -lg2c... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lg2c" >&5
echo $ECHO_N "checking for main in -lg2c... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="/sw/lib /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libg2c.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libg2c.a"; then
            echo "$as_me:$LINENO: result: Found libg2c.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libg2c.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libg2c.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libg2c.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lg2c

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libg2c.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libg2c.a" >&5
echo "${ECHO_T}Did not find libg2c.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libg2c.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libg2c.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libg2c.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libg2c.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lg2c

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libg2c.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="/sw/lib NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lg2c $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libg2c.a" -o -f "$_CHECK_PATH_/libg2c.so" \
	                 -o -f "$_CHECK_PATH_/libg2c.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lg2c

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


    if test "$HAVE_LIB_G2C"; then
       F_LIB_FLAG="$G2C_LIB_FLAG"
    fi
    ;;
  *)

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   F77"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for F77) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for F77) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes F77 (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo F77 | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libF77.so and libF77.a" >&5
echo $ECHO_N "checking for both libF77.so and libF77.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lF77" >&5
echo $ECHO_N "checking for -lF77... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lF77" >&5
echo $ECHO_N "checking for main in -lF77... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libF77.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libF77.a"; then
            echo "$as_me:$LINENO: result: Found libF77.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libF77.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libF77.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libF77.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lF77

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libF77.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libF77.a" >&5
echo "${ECHO_T}Did not find libF77.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libF77.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libF77.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libF77.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libF77.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lF77

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libF77.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lF77 $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libF77.a" -o -f "$_CHECK_PATH_/libF77.so" \
	                 -o -f "$_CHECK_PATH_/libF77.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lF77

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


    if test "$HAVE_LIB_F77"; then
       F_LIB_FLAG="$F77_LIB_FLAG"
    fi
    ;;
esac

if test "$F_LIB_FLAG"; then
  HAVE_LIB_F="yes"
else

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: could not find the fortran library." >&5
echo "$as_me: error: could not find the fortran library." >&2;}
   { (exit 1); exit 1; }; }

fi



##  --  check for the required thread library  ---------------------------

case $host in
  *-irix*)
    if test "$threads" = "unknown"; then
      threads=irix
    elif test "$threads" != "pthreads" -a "$threads" != "irix"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: unknown thread type for host $host: $threads. exiting." >&5
echo "$as_me: error: unknown thread type for host $host: $threads. exiting." >&2;}
   { (exit 1); exit 1; }; }

    fi
    ;;
  *)
    if test "$threads" = "unknown"; then
      threads=pthreads
    elif test "$threads" != "pthreads"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: unknown thread type for host $host: $threads. exiting." >&5
echo "$as_me: error: unknown thread type for host $host: $threads. exiting." >&2;}
   { (exit 1); exit 1; }; }

    fi
    ;;
esac

case $threads in
   irix)

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   fetchop"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for fetchop) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for fetchop) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes fetchop (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo fetchop | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libfetchop.so and libfetchop.a" >&5
echo $ECHO_N "checking for both libfetchop.so and libfetchop.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lfetchop" >&5
echo $ECHO_N "checking for -lfetchop... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lfetchop" >&5
echo $ECHO_N "checking for main in -lfetchop... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libfetchop.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libfetchop.a"; then
            echo "$as_me:$LINENO: result: Found libfetchop.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfetchop.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libfetchop.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfetchop.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lfetchop

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libfetchop.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libfetchop.a" >&5
echo "${ECHO_T}Did not find libfetchop.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libfetchop.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libfetchop.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libfetchop.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfetchop.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lfetchop

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libfetchop.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lfetchop $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libfetchop.a" -o -f "$_CHECK_PATH_/libfetchop.so" \
	                 -o -f "$_CHECK_PATH_/libfetchop.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lfetchop

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


      if test "$HAVE_LIB_FETCHOP"; then
         CFLAGS="$CFLAGS -DSTL_SGI_THREADS"
         THREAD_LIB_FLAG="$FETCHOP_LIB_FLAG"
         DEF_THREAD=
      fi
      ;;
   pthreads)

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   pthread"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for pthread) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for pthread) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes pthread (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo pthread | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpthread.so and libpthread.a" >&5
echo $ECHO_N "checking for both libpthread.so and libpthread.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpthread" >&5
echo $ECHO_N "checking for -lpthread... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpthread" >&5
echo $ECHO_N "checking for main in -lpthread... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpthread.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpthread.a"; then
            echo "$as_me:$LINENO: result: Found libpthread.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpthread.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpthread.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpthread.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpthread

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpthread.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpthread.a" >&5
echo "${ECHO_T}Did not find libpthread.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpthread.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpthread.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpthread.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpthread.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpthread

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpthread.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpthread $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpthread.a" -o -f "$_CHECK_PATH_/libpthread.so" \
	                 -o -f "$_CHECK_PATH_/libpthread.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpthread

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


      if test "$HAVE_LIB_PTHREAD"; then
        THREAD_LIB_FLAG="$PTHREAD_LIB_FLAG"
        DEF_THREAD="#define SCI_PTHREAD 1"
      fi

    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       "
       echo "   headers:     pthread.h semaphore.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="pthread.h semaphore.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for pthread.h semaphore.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for pthread.h semaphore.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files


      echo "$as_me:$LINENO: checking for semaphore library" >&5
echo $ECHO_N "checking for semaphore library... $ECHO_C" >&6
      old_LIBS=$LIBS
      SEMAPHORE_LIB_FLAG=unknown
      for i in "" "$THREAD_LIB_FLAG" -lrt; do
        LIBS="$old_LIBS $i"
        cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"

#include <semaphore.h>

#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{

    sem_t sem;
    sem_init(&sem, 0, 0);
    sem_post(&sem);

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext conftest$ac_exeext
if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
  (eval $ac_link) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest$ac_exeext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then

         SEMAPHORE_LIB_FLAG=$i
         break

else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
fi
rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext
      done
      if test "$SEMPAPHORE_LIB_FLAG" = unknown; then
        echo "$as_me:$LINENO: result: not found" >&5
echo "${ECHO_T}not found" >&6
        { { echo "$as_me:$LINENO: error: semaphore library(sem_post, sem_wait, etc) needed for pthreads" >&5
echo "$as_me: error: semaphore library(sem_post, sem_wait, etc) needed for pthreads" >&2;}
   { (exit 1); exit 1; }; }
      else
        if test -z "$SEMAPHORE_LIB_FLAG"; then
          echo "$as_me:$LINENO: result: none required" >&5
echo "${ECHO_T}none required" >&6
        elif test "$SEMAPHORE_LIB_FLAG" = "$THREAD_LIB_FLAG"; then
          echo "$as_me:$LINENO: result: already in thread library: $THREAD_LIB_FLAG" >&5
echo "${ECHO_T}already in thread library: $THREAD_LIB_FLAG" >&6
          SEMAPHORE_LIB_FLAG=""
        else
          echo "$as_me:$LINENO: result: $SEMAPHORE_LIB_FLAG" >&5
echo "${ECHO_T}$SEMAPHORE_LIB_FLAG" >&6
        fi
      fi
      ;;
   *)

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: unknown thread type for host $host: $threads. exiting." >&5
echo "$as_me: error: unknown thread type for host $host: $threads. exiting." >&2;}
   { (exit 1); exit 1; }; }

      ;;
esac

THREAD_IMPL="Thread_$threads.cc"









##  --  search for OpenGL  -----------------------------------------------

if test "$with_opengl"; then
  dirs="$with_opengl/lib /usr/X11R6/lib"
else
  dirs="/usr/X11R6/lib"
fi

if test "$is_linux" = "linux"; then
  GLU_OTHERS="$THREAD_LIB_DIR_FLAG $THREAD_LIB_FLAG"
else
  GLU_OTHERS=""
fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   GL"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for GL) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for GL) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes GL (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo GL | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libGL.so and libGL.a" >&5
echo $ECHO_N "checking for both libGL.so and libGL.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lGL" >&5
echo $ECHO_N "checking for -lGL... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lGL" >&5
echo $ECHO_N "checking for main in -lGL... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libGL.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libGL.a"; then
            echo "$as_me:$LINENO: result: Found libGL.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libGL.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libGL.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libGL.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lGL

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libGL.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libGL.a" >&5
echo "${ECHO_T}Did not find libGL.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libGL.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libGL.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libGL.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libGL.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lGL

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libGL.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lGL $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libGL.a" -o -f "$_CHECK_PATH_/libGL.so" \
	                 -o -f "$_CHECK_PATH_/libGL.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lGL

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   GLU"
       echo "   function:   main"
       echo "   other-libs: $GL_LIB_DIR_FLAG $GL_LIB_FLAG $GLU_OTHERS"
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for GLU) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for GLU) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes GLU (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo GLU | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libGLU.so and libGLU.a" >&5
echo $ECHO_N "checking for both libGLU.so and libGLU.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lGLU" >&5
echo $ECHO_N "checking for -lGLU... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lGLU" >&5
echo $ECHO_N "checking for main in -lGLU... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$GL_LIB_DIR_FLAG $GL_LIB_FLAG $GLU_OTHERS"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libGLU.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libGLU.a"; then
            echo "$as_me:$LINENO: result: Found libGLU.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libGLU.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libGLU.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libGLU.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lGLU

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libGLU.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libGLU.a" >&5
echo "${ECHO_T}Did not find libGLU.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libGLU.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libGLU.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libGLU.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libGLU.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lGLU

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libGLU.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lGLU $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libGLU.a" -o -f "$_CHECK_PATH_/libGLU.so" \
	                 -o -f "$_CHECK_PATH_/libGLU.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lGLU

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_GL/../include"
       echo "   headers:     GL/gl.h GL/glu.h GL/glx.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_GL/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="GL/gl.h GL/glu.h GL/glx.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for GL/gl.h GL/glu.h GL/glx.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for GL/gl.h GL/glu.h GL/glx.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files








INC_GL_H=$INC_GL_GL_H


##  --  search for Remote ----------------------------------------------

if test "$pkg_remote" = "yes"; then

   if test "$with_jpeg"; then
     dirs="$with_jpeg/lib $SCI_LAB_TP_LIBS"
   else
     dirs="$SCI_LAB_TP_LIBS"
   fi

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   jpeg"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for jpeg) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for jpeg) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes jpeg (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo jpeg | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libjpeg.so and libjpeg.a" >&5
echo $ECHO_N "checking for both libjpeg.so and libjpeg.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -ljpeg" >&5
echo $ECHO_N "checking for -ljpeg... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -ljpeg" >&5
echo $ECHO_N "checking for main in -ljpeg... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libjpeg.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libjpeg.a"; then
            echo "$as_me:$LINENO: result: Found libjpeg.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libjpeg.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libjpeg.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libjpeg.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ljpeg

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libjpeg.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libjpeg.a" >&5
echo "${ECHO_T}Did not find libjpeg.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libjpeg.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libjpeg.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libjpeg.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libjpeg.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ljpeg

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libjpeg.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -ljpeg $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libjpeg.a" -o -f "$_CHECK_PATH_/libjpeg.so" \
	                 -o -f "$_CHECK_PATH_/libjpeg.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-ljpeg

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



   if test "$with_tiff"; then
     dirs="$with_tiff/lib $SCI_LAB_TP_LIBS"
   else
     dirs="$SCI_LAB_TP_LIBS"
   fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   tiff"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for tiff) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for tiff) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes tiff (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo tiff | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libtiff.so and libtiff.a" >&5
echo $ECHO_N "checking for both libtiff.so and libtiff.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -ltiff" >&5
echo $ECHO_N "checking for -ltiff... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -ltiff" >&5
echo $ECHO_N "checking for main in -ltiff... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libtiff.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libtiff.a"; then
            echo "$as_me:$LINENO: result: Found libtiff.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtiff.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libtiff.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtiff.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ltiff

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libtiff.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libtiff.a" >&5
echo "${ECHO_T}Did not find libtiff.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libtiff.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libtiff.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libtiff.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtiff.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ltiff

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libtiff.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -ltiff $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libtiff.a" -o -f "$_CHECK_PATH_/libtiff.so" \
	                 -o -f "$_CHECK_PATH_/libtiff.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-ltiff

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


fi








##  --  search for netsolve ----------------------------------------------

if test "$pkg_netsolve" = "yes"; then

   if test "$with_netsolve"; then
     dirs="$with_netsolve $SCI_LAB_TP_LIBS"
   else
     dirs="$SCI_LAB_TP_LIBS"
   fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   netsolve"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for netsolve) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for netsolve) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes netsolve (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo netsolve | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libnetsolve.so and libnetsolve.a" >&5
echo $ECHO_N "checking for both libnetsolve.so and libnetsolve.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lnetsolve" >&5
echo $ECHO_N "checking for -lnetsolve... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lnetsolve" >&5
echo $ECHO_N "checking for main in -lnetsolve... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libnetsolve.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libnetsolve.a"; then
            echo "$as_me:$LINENO: result: Found libnetsolve.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libnetsolve.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libnetsolve.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libnetsolve.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lnetsolve

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libnetsolve.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libnetsolve.a" >&5
echo "${ECHO_T}Did not find libnetsolve.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libnetsolve.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libnetsolve.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libnetsolve.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libnetsolve.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lnetsolve

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libnetsolve.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lnetsolve $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libnetsolve.a" -o -f "$_CHECK_PATH_/libnetsolve.so" \
	                 -o -f "$_CHECK_PATH_/libnetsolve.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lnetsolve

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


fi





##  --  search for glut, glui and oogl -----------------------------------

if test "$pkg_rtrt" = "yes"; then

   libs="$GLU_LIB_DIR_FLAG $GLU_LIB_FLAG $GL_LIB_DIR_FLAG $GL_LIB_FLAG $X_LIB_FLAG $GLU_OTHERS"

   if test "$with_glut"; then
     dirs="$with_glut/$BASE_LIB_DIR $SCI_LAB_TP_LIBS"
   else
     dirs="$SCI_LAB_TP_LIBS"
   fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   glut"
       echo "   function:   main"
       echo "   other-libs: $libs"
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for glut) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for glut) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes glut (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo glut | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libglut.so and libglut.a" >&5
echo $ECHO_N "checking for both libglut.so and libglut.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lglut" >&5
echo $ECHO_N "checking for -lglut... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lglut" >&5
echo $ECHO_N "checking for main in -lglut... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$libs"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libglut.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libglut.a"; then
            echo "$as_me:$LINENO: result: Found libglut.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglut.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglut.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglut.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglut

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglut.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libglut.a" >&5
echo "${ECHO_T}Did not find libglut.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libglut.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libglut.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglut.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglut.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglut

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglut.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lglut $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libglut.a" -o -f "$_CHECK_PATH_/libglut.so" \
	                 -o -f "$_CHECK_PATH_/libglut.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lglut

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_GLUT/../include"
       echo "   headers:     GL/glut.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_GLUT/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="GL/glut.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for GL/glut.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for GL/glut.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



   if test "$with_glui"; then
     dirs="$with_glui/$BASE_LIB_DIR $SCI_LAB_TP_LIBS"
   else
     dirs="$SCI_LAB_TP_LIBS"
   fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   glui"
       echo "   function:   main"
       echo "   other-libs: $GLUT_LIB_DIR_FLAG $GLUT_LIB_FLAG $libs"
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for glui) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for glui) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes glui (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo glui | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libglui.so and libglui.a" >&5
echo $ECHO_N "checking for both libglui.so and libglui.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lglui" >&5
echo $ECHO_N "checking for -lglui... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lglui" >&5
echo $ECHO_N "checking for main in -lglui... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$GLUT_LIB_DIR_FLAG $GLUT_LIB_FLAG $libs"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libglui.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libglui.a"; then
            echo "$as_me:$LINENO: result: Found libglui.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglui.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglui.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglui.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglui

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglui.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libglui.a" >&5
echo "${ECHO_T}Did not find libglui.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libglui.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libglui.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglui.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglui.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglui

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglui.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lglui $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libglui.a" -o -f "$_CHECK_PATH_/libglui.so" \
	                 -o -f "$_CHECK_PATH_/libglui.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lglui

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_GLUI/../include"
       echo "   headers:     glui.h"
       echo "   other-paths: $INC_GL_GLUT_H"
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_GLUI/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="glui.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for glui.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for glui.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_GL_GLUT_H >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_GL_GLUT_H >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



  dirs=""

  # Modify dirs to have correct path information:
  for i in $SCI_LAB_TP_DEFAULT; do
    if test ! -d "$i"; then
      continue
    fi

    #this is where the lib actually lives
    if test ! -d "$i/OOGL/lib"; then
      continue
    fi

    dirs="$dirs $i/OOGL/lib"
  done

  if test "$with_oogl"; then
    dirs="$with_oogl/lib $dirs"
  fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   oogl"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for oogl) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for oogl) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes oogl (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo oogl | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both liboogl.so and liboogl.a" >&5
echo $ECHO_N "checking for both liboogl.so and liboogl.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -loogl" >&5
echo $ECHO_N "checking for -loogl... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -loogl" >&5
echo $ECHO_N "checking for main in -loogl... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for liboogl.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/liboogl.a"; then
            echo "$as_me:$LINENO: result: Found liboogl.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liboogl.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liboogl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liboogl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-loogl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liboogl.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find liboogl.a" >&5
echo "${ECHO_T}Did not find liboogl.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for liboogl.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/liboogl.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liboogl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liboogl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-loogl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liboogl.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -loogl $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/liboogl.a" -o -f "$_CHECK_PATH_/liboogl.so" \
	                 -o -f "$_CHECK_PATH_/liboogl.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-loogl

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_OOGL/../include"
       echo "   headers:     oogl/basicTexture.h oogl/shadedPrim.h"
       echo "   other-paths: $INC_GL_GLUT_H $INC_GL_GLUI_H"
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_OOGL/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="oogl/basicTexture.h oogl/shadedPrim.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for oogl/basicTexture.h oogl/shadedPrim.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for oogl/basicTexture.h oogl/shadedPrim.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_GL_GLUT_H $INC_GL_GLUI_H >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_GL_GLUT_H $INC_GL_GLUI_H >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



  if test "$HAVE_OOGL_BASICTEXTURE_H"; then
    INC_OOGL_H="$INC_OOGL_BASICTEXTURE_H"
  fi

  dirs="$with_audio"


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   audio"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for audio) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for audio) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes audio (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo audio | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libaudio.so and libaudio.a" >&5
echo $ECHO_N "checking for both libaudio.so and libaudio.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -laudio" >&5
echo $ECHO_N "checking for -laudio... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -laudio" >&5
echo $ECHO_N "checking for main in -laudio... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libaudio.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libaudio.a"; then
            echo "$as_me:$LINENO: result: Found libaudio.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libaudio.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libaudio.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libaudio.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-laudio

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libaudio.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libaudio.a" >&5
echo "${ECHO_T}Did not find libaudio.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libaudio.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libaudio.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libaudio.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libaudio.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-laudio

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libaudio.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -laudio $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libaudio.a" -o -f "$_CHECK_PATH_/libaudio.so" \
	                 -o -f "$_CHECK_PATH_/libaudio.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-laudio

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   audiofile"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for audiofile) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for audiofile) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes audiofile (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo audiofile | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libaudiofile.so and libaudiofile.a" >&5
echo $ECHO_N "checking for both libaudiofile.so and libaudiofile.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -laudiofile" >&5
echo $ECHO_N "checking for -laudiofile... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -laudiofile" >&5
echo $ECHO_N "checking for main in -laudiofile... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libaudiofile.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libaudiofile.a"; then
            echo "$as_me:$LINENO: result: Found libaudiofile.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libaudiofile.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libaudiofile.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libaudiofile.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-laudiofile

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libaudiofile.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libaudiofile.a" >&5
echo "${ECHO_T}Did not find libaudiofile.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libaudiofile.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libaudiofile.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libaudiofile.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libaudiofile.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-laudiofile

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libaudiofile.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -laudiofile $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libaudiofile.a" -o -f "$_CHECK_PATH_/libaudiofile.so" \
	                 -o -f "$_CHECK_PATH_/libaudiofile.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-laudiofile

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



  if test "$HAVE_LIB_AUDIO" && test "$HAVE_LIB_AUDIOFILE"; then
    DEF_AUDIO="#define HAVE_AUDIO 1"
    HAVE_AUDIO="yes"
  fi

  if test "$with_audio" && test ! "$DEF_AUDIO"; then
    echo
    { { echo "$as_me:$LINENO: error: One or more of the AUDIO components is missing." >&5
echo "$as_me: error: One or more of the AUDIO components is missing." >&2;}
   { (exit 1); exit 1; }; }
    echo
  fi

fi

if test "$HAVE_LIB_OOGL" && test "$HAVE_OOGL_BASICTEXTURE_H"; then
  DEF_OOGL="#define HAVE_OOGL 1"
fi























##  --  search for dlopen  -----------------------------------------------


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   c"
       echo "   function:   dlopen"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for c) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for c) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes c (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo c | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "dlopen"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libc.so and libc.a" >&5
echo $ECHO_N "checking for both libc.so and libc.a... $ECHO_C" >&6
    else
      if test "dlopen" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lc" >&5
echo $ECHO_N "checking for -lc... $ECHO_C" >&6
      else
        _SCI_DECL_="char dlopen();"
        _SCI_CALL_="dlopen();"

        echo "$as_me:$LINENO: checking for dlopen in -lc" >&5
echo $ECHO_N "checking for dlopen in -lc... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "dlopen"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libc.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libc.a"; then
            echo "$as_me:$LINENO: result: Found libc.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libc.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libc.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libc.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lc

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libc.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libc.a" >&5
echo "${ECHO_T}Did not find libc.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libc.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libc.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libc.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libc.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lc

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libc.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lc $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libc.a" -o -f "$_CHECK_PATH_/libc.so" \
	                 -o -f "$_CHECK_PATH_/libc.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lc

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "dlopen"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


if test "$HAVE_LIB_C"; then
   HAVE_LIB_DL="yes"
else

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   dl"
       echo "   function:   dlopen"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for dl) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for dl) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes dl (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo dl | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "dlopen"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libdl.so and libdl.a" >&5
echo $ECHO_N "checking for both libdl.so and libdl.a... $ECHO_C" >&6
    else
      if test "dlopen" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -ldl" >&5
echo $ECHO_N "checking for -ldl... $ECHO_C" >&6
      else
        _SCI_DECL_="char dlopen();"
        _SCI_CALL_="dlopen();"

        echo "$as_me:$LINENO: checking for dlopen in -ldl" >&5
echo $ECHO_N "checking for dlopen in -ldl... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "dlopen"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libdl.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libdl.a"; then
            echo "$as_me:$LINENO: result: Found libdl.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libdl.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libdl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libdl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ldl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libdl.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libdl.a" >&5
echo "${ECHO_T}Did not find libdl.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libdl.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libdl.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libdl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libdl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ldl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libdl.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -ldl $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libdl.a" -o -f "$_CHECK_PATH_/libdl.so" \
	                 -o -f "$_CHECK_PATH_/libdl.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-ldl

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "dlopen"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


fi


    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       "
       echo "   headers:     dlfcn.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="dlfcn.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for dlfcn.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for dlfcn.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



if test -z "$HAVE_LIB_DL" || test -z "$HAVE_DLFCN_H"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Could not find the required dynamic library components. exiting." >&5
echo "$as_me: error: Could not find the required dynamic library components. exiting." >&2;}
   { (exit 1); exit 1; }; }

fi




##  --  search for required headers  --------------------------------------

##  --  required standard headers

    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       "
       echo "   headers:     stdio.h stdlib.h stddef.h stdarg.h string.h limits.h \
   errno.h fcntl.h float.h memory.h unistd.h netdb.h \
   ctype.h signal.h locale.h dirent.h assert.h sys/select.h \
   sys/types.h sys/time.h sys/stat.h sys/socket.h sys/timeb.h \
   sys/mman.h sys/param.h sys/ioctl.h sys/resource.h sys/wait.h \
   sys/utsname.h rpc/types.h netinet/in.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="stdio.h stdlib.h stddef.h stdarg.h string.h limits.h \
   errno.h fcntl.h float.h memory.h unistd.h netdb.h \
   ctype.h signal.h locale.h dirent.h assert.h sys/select.h \
   sys/types.h sys/time.h sys/stat.h sys/socket.h sys/timeb.h \
   sys/mman.h sys/param.h sys/ioctl.h sys/resource.h sys/wait.h \
   sys/utsname.h rpc/types.h netinet/in.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for stdio.h stdlib.h stddef.h stdarg.h string.h limits.h \
   errno.h fcntl.h float.h memory.h unistd.h netdb.h \
   ctype.h signal.h locale.h dirent.h assert.h sys/select.h \
   sys/types.h sys/time.h sys/stat.h sys/socket.h sys/timeb.h \
   sys/mman.h sys/param.h sys/ioctl.h sys/resource.h sys/wait.h \
   sys/utsname.h rpc/types.h netinet/in.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for stdio.h stdlib.h stddef.h stdarg.h string.h limits.h \
   errno.h fcntl.h float.h memory.h unistd.h netdb.h \
   ctype.h signal.h locale.h dirent.h assert.h sys/select.h \
   sys/types.h sys/time.h sys/stat.h sys/socket.h sys/timeb.h \
   sys/mman.h sys/param.h sys/ioctl.h sys/resource.h sys/wait.h \
   sys/utsname.h rpc/types.h netinet/in.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



case $host in
  *-darwin*)
	;;
  *)

    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       "
       echo "   headers:     values.h malloc.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="values.h malloc.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for values.h malloc.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for values.h malloc.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files


	;;
esac


    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       "
       echo "   headers:     inttypes.h stdint.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="inttypes.h stdint.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for inttypes.h stdint.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for inttypes.h stdint.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files


##  --  required STL headers
##  --      (only look for STL after going into cplusplus mode)
##

    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       "
       echo "   headers:     algorithm vector map iostream string"
       echo "   other-paths: "
       echo "   c++ lib:     yes"
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="algorithm vector map iostream string"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_="yes"
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for algorithm vector map iostream string) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for algorithm vector map iostream string) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



echo "$as_me:$LINENO: checking for location of hash_map" >&5
echo $ECHO_N "checking for location of hash_map... $ECHO_C" >&6
DEF_HASHMAP=None
cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <hash_map>
                std::hash_map<int, int> xx;
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  DEF_HASHMAP=HAVE_STD_HASHMAP
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
fi
rm -f conftest.$ac_objext conftest.$ac_ext
if test "$DEF_HASHMAP" = "None"; then
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <ext/hash_map>
                 std::hash_map<int, int> xx;
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  DEF_HASHMAP=HAVE_EXT_HASHMAP
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
fi
rm -f conftest.$ac_objext conftest.$ac_ext
fi
if test "$DEF_HASHMAP" = "None"; then
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <ext/hash_map>
                 __gnu_cxx::hash_map<int, int> xx;
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  DEF_HASHMAP=HAVE_GNU_HASHMAP
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
fi
rm -f conftest.$ac_objext conftest.$ac_ext
fi
if test "$DEF_HASHMAP" = "None"; then
  DEF_HASHMAP=
  echo "$as_me:$LINENO: result: not found" >&5
echo "${ECHO_T}not found" >&6
  { echo "$as_me:$LINENO: WARNING: Cannot find hash_map, will use map instead" >&5
echo "$as_me: WARNING: Cannot find hash_map, will use map instead" >&2;}
else
  echo "$as_me:$LINENO: result: found: $DEF_HASHMAP" >&5
echo "${ECHO_T}found: $DEF_HASHMAP" >&6
  DEF_HASHMAP="#define $DEF_HASHMAP"
fi



for ac_header in ext/algorithm
do
as_ac_Header=`echo "ac_cv_header_$ac_header" | $as_tr_sh`
if eval "test \"\${$as_ac_Header+set}\" = set"; then
  echo "$as_me:$LINENO: checking for $ac_header" >&5
echo $ECHO_N "checking for $ac_header... $ECHO_C" >&6
if eval "test \"\${$as_ac_Header+set}\" = set"; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
fi
echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`" >&5
echo "${ECHO_T}`eval echo '${'$as_ac_Header'}'`" >&6
else
  # Is the header compilable?
echo "$as_me:$LINENO: checking $ac_header usability" >&5
echo $ECHO_N "checking $ac_header usability... $ECHO_C" >&6
cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
$ac_includes_default
#include <$ac_header>
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_header_compiler=yes
else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
ac_header_compiler=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext
echo "$as_me:$LINENO: result: $ac_header_compiler" >&5
echo "${ECHO_T}$ac_header_compiler" >&6

# Is the header present?
echo "$as_me:$LINENO: checking $ac_header presence" >&5
echo $ECHO_N "checking $ac_header presence... $ECHO_C" >&6
cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <$ac_header>
_ACEOF
if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
  ac_status=$?
  egrep -v '^ *\+' conftest.er1 >conftest.err
  rm -f conftest.er1
  cat conftest.err >&5
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } >/dev/null; then
  if test -s conftest.err; then
    ac_cpp_err=$ac_cxx_preproc_warn_flag
  else
    ac_cpp_err=
  fi
else
  ac_cpp_err=yes
fi
if test -z "$ac_cpp_err"; then
  ac_header_preproc=yes
else
  echo "$as_me: failed program was:" >&5
  cat conftest.$ac_ext >&5
  ac_header_preproc=no
fi
rm -f conftest.err conftest.$ac_ext
echo "$as_me:$LINENO: result: $ac_header_preproc" >&5
echo "${ECHO_T}$ac_header_preproc" >&6

# So?  What about this header?
case $ac_header_compiler:$ac_header_preproc in
  yes:no )
    { echo "$as_me:$LINENO: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!" >&5
echo "$as_me: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!" >&2;}
    { echo "$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result" >&5
echo "$as_me: WARNING: $ac_header: proceeding with the preprocessor's result" >&2;};;
  no:yes )
    { echo "$as_me:$LINENO: WARNING: $ac_header: present but cannot be compiled" >&5
echo "$as_me: WARNING: $ac_header: present but cannot be compiled" >&2;}
    { echo "$as_me:$LINENO: WARNING: $ac_header: check for missing prerequisite headers?" >&5
echo "$as_me: WARNING: $ac_header: check for missing prerequisite headers?" >&2;}
    { echo "$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result" >&5
echo "$as_me: WARNING: $ac_header: proceeding with the preprocessor's result" >&2;};;
esac
echo "$as_me:$LINENO: checking for $ac_header" >&5
echo $ECHO_N "checking for $ac_header... $ECHO_C" >&6
if eval "test \"\${$as_ac_Header+set}\" = set"; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  eval "$as_ac_Header=$ac_header_preproc"
fi
echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`" >&5
echo "${ECHO_T}`eval echo '${'$as_ac_Header'}'`" >&6

fi
if test `eval echo '${'$as_ac_Header'}'` = yes; then
  cat >>confdefs.h <<_ACEOF
#define `echo "HAVE_$ac_header" | $as_tr_cpp` 1
_ACEOF

fi

done


##  --  search for tcl stuff  ---------------------------------------------
echo
{ echo "$as_me:$LINENO: checking for required Tcl components......" >&5
echo "$as_me: checking for required Tcl components......" >&6;}
echo

if test -z "$with_tcl"; then
  dirs="$with_tcl/lib $SCI_LAB_TP_LIBS"
else
  dirs="$SCI_LAB_TP_LIBS"
fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   tcl"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for tcl) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for tcl) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes tcl (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo tcl | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libtcl.so and libtcl.a" >&5
echo $ECHO_N "checking for both libtcl.so and libtcl.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -ltcl" >&5
echo $ECHO_N "checking for -ltcl... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -ltcl" >&5
echo $ECHO_N "checking for main in -ltcl... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libtcl.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libtcl.a"; then
            echo "$as_me:$LINENO: result: Found libtcl.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtcl.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libtcl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtcl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ltcl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libtcl.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libtcl.a" >&5
echo "${ECHO_T}Did not find libtcl.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libtcl.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libtcl.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libtcl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtcl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ltcl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libtcl.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -ltcl $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libtcl.a" -o -f "$_CHECK_PATH_/libtcl.so" \
	                 -o -f "$_CHECK_PATH_/libtcl.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-ltcl

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


if test -f "$LIB_DIR_TCL/tclConfig.sh"; then . $LIB_DIR_TCL/tclConfig.sh; fi

    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $TCL_SRC_DIR/generic"
       echo "   headers:     tcl.h tclPort.h tclMath.h tclInt.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$TCL_SRC_DIR/generic NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="tcl.h tclPort.h tclMath.h tclInt.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for tcl.h tclPort.h tclMath.h tclInt.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for tcl.h tclPort.h tclMath.h tclInt.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files











    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   tk"
       echo "   function:   main"
       echo "   other-libs: -ltcl"
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for tk) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for tk) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes tk (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo tk | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libtk.so and libtk.a" >&5
echo $ECHO_N "checking for both libtk.so and libtk.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -ltk" >&5
echo $ECHO_N "checking for -ltk... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -ltk" >&5
echo $ECHO_N "checking for main in -ltk... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="-ltcl"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libtk.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libtk.a"; then
            echo "$as_me:$LINENO: result: Found libtk.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtk.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libtk.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtk.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ltk

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libtk.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libtk.a" >&5
echo "${ECHO_T}Did not find libtk.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libtk.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libtk.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libtk.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtk.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ltk

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libtk.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -ltk $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libtk.a" -o -f "$_CHECK_PATH_/libtk.so" \
	                 -o -f "$_CHECK_PATH_/libtk.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-ltk

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


if test -f "$LIB_DIR_TK/tkConfig.sh"; then
   . $LIB_DIR_TK/tkConfig.sh
else
   { { echo "$as_me:$LINENO: error: $LIB_DIR_TK/tkConfig.sh does not exist!" >&5
echo "$as_me: error: $LIB_DIR_TK/tkConfig.sh does not exist!" >&2;}
   { (exit 1); exit 1; }; }
fi


    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $TK_SRC_DIR/generic"
       echo "   headers:     tk.h tk3d.h tkPort.h"
       echo "   other-paths: $INC_TCL_H $INC_X11_XLIB_H"
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$TK_SRC_DIR/generic NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="tk.h tk3d.h tkPort.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for tk.h tk3d.h tkPort.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for tk.h tk3d.h tkPort.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_TCL_H $INC_X11_XLIB_H >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_TCL_H $INC_X11_XLIB_H >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files









    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   itcl"
       echo "   function:   main"
       echo "   other-libs: $TCL_LIB_DIR_FLAG -ltcl"
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for itcl) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for itcl) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes itcl (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo itcl | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libitcl.so and libitcl.a" >&5
echo $ECHO_N "checking for both libitcl.so and libitcl.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -litcl" >&5
echo $ECHO_N "checking for -litcl... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -litcl" >&5
echo $ECHO_N "checking for main in -litcl... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$TCL_LIB_DIR_FLAG -ltcl"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libitcl.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libitcl.a"; then
            echo "$as_me:$LINENO: result: Found libitcl.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libitcl.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libitcl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libitcl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-litcl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libitcl.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libitcl.a" >&5
echo "${ECHO_T}Did not find libitcl.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libitcl.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libitcl.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libitcl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libitcl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-litcl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libitcl.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -litcl $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libitcl.a" -o -f "$_CHECK_PATH_/libitcl.so" \
	                 -o -f "$_CHECK_PATH_/libitcl.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-litcl

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_ITCL/../include"
       echo "   headers:     itcl.h"
       echo "   other-paths: $INC_TCL_H"
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_ITCL/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="itcl.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for itcl.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for itcl.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_TCL_H >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_TCL_H >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files










    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   itk"
       echo "   function:   main"
       echo "   other-libs: $ITCL_LIB_DIR_FLAG -litcl $TK_LIB_DIR_FLAG -ltk $TCL_LIB_DIR_FLAG -ltcl"
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for itk) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for itk) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes itk (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo itk | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libitk.so and libitk.a" >&5
echo $ECHO_N "checking for both libitk.so and libitk.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -litk" >&5
echo $ECHO_N "checking for -litk... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -litk" >&5
echo $ECHO_N "checking for main in -litk... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$ITCL_LIB_DIR_FLAG -litcl $TK_LIB_DIR_FLAG -ltk $TCL_LIB_DIR_FLAG -ltcl"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libitk.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libitk.a"; then
            echo "$as_me:$LINENO: result: Found libitk.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libitk.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libitk.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libitk.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-litk

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libitk.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libitk.a" >&5
echo "${ECHO_T}Did not find libitk.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libitk.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libitk.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libitk.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libitk.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-litk

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libitk.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -litk $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libitk.a" -o -f "$_CHECK_PATH_/libitk.so" \
	                 -o -f "$_CHECK_PATH_/libitk.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-litk

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_ITK/../include"
       echo "   headers:     itk.h"
       echo "   other-paths: $INC_ITCL_H $INC_TK_H $INC_TCL_H $INC_X11_XLIB_H"
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_ITK/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="itk.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for itk.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for itk.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_ITCL_H $INC_TK_H $INC_TCL_H $INC_X11_XLIB_H >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_ITCL_H $INC_TK_H $INC_TCL_H $INC_X11_XLIB_H >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files









    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   BLT"
       echo "   function:   main"
       echo "   other-libs: $TK_LIB_DIR_FLAG -ltk $TCL_LIB_DIR_FLAG -ltcl"
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for BLT) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for BLT) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes BLT (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo BLT | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libBLT.so and libBLT.a" >&5
echo $ECHO_N "checking for both libBLT.so and libBLT.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lBLT" >&5
echo $ECHO_N "checking for -lBLT... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lBLT" >&5
echo $ECHO_N "checking for main in -lBLT... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$TK_LIB_DIR_FLAG -ltk $TCL_LIB_DIR_FLAG -ltcl"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libBLT.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libBLT.a"; then
            echo "$as_me:$LINENO: result: Found libBLT.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libBLT.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libBLT.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libBLT.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lBLT

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libBLT.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libBLT.a" >&5
echo "${ECHO_T}Did not find libBLT.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libBLT.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libBLT.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libBLT.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libBLT.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lBLT

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libBLT.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lBLT $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libBLT.a" -o -f "$_CHECK_PATH_/libBLT.so" \
	                 -o -f "$_CHECK_PATH_/libBLT.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lBLT

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_BLT/../include"
       echo "   headers:     blt.h"
       echo "   other-paths: $INC_TCL_H $INC_TK_H"
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_BLT/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="blt.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for blt.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for blt.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_TCL_H $INC_TK_H >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_TCL_H $INC_TK_H >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files







if test "$pkg_CollabVis" = "yes"; then
    DEF_COLLAB_VIS="#define HAVE_COLLAB_VIS 1"
    HAVE_COLLAB_VIS="yes"
fi




if test "$pkg_fusion" = "yes"; then

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   plplot"
       echo "   function:   main"
       echo "   other-libs: $TK_LIB_DIR_FLAG $TK_LIB_FLAG $TCL_LIB_DIR_FLAG $TCL_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for plplot) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for plplot) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes plplot (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo plplot | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libplplot.so and libplplot.a" >&5
echo $ECHO_N "checking for both libplplot.so and libplplot.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lplplot" >&5
echo $ECHO_N "checking for -lplplot... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lplplot" >&5
echo $ECHO_N "checking for main in -lplplot... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$TK_LIB_DIR_FLAG $TK_LIB_FLAG $TCL_LIB_DIR_FLAG $TCL_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libplplot.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libplplot.a"; then
            echo "$as_me:$LINENO: result: Found libplplot.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libplplot.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libplplot.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libplplot.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lplplot

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libplplot.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libplplot.a" >&5
echo "${ECHO_T}Did not find libplplot.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libplplot.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libplplot.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libplplot.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libplplot.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lplplot

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libplplot.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lplplot $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libplplot.a" -o -f "$_CHECK_PATH_/libplplot.so" \
	                 -o -f "$_CHECK_PATH_/libplplot.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lplplot

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


  if test "$HAVE_LIB_PLPLOT"; then
    echo "Have optimized version"
  else

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   plplotd"
       echo "   function:   main"
       echo "   other-libs: $TK_LIB_DIR_FLAG $TK_LIB_FLAG $TCL_LIB_DIR_FLAG $TCL_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for plplotd) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for plplotd) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes plplotd (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo plplotd | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libplplotd.so and libplplotd.a" >&5
echo $ECHO_N "checking for both libplplotd.so and libplplotd.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lplplotd" >&5
echo $ECHO_N "checking for -lplplotd... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lplplotd" >&5
echo $ECHO_N "checking for main in -lplplotd... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$TK_LIB_DIR_FLAG $TK_LIB_FLAG $TCL_LIB_DIR_FLAG $TCL_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libplplotd.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libplplotd.a"; then
            echo "$as_me:$LINENO: result: Found libplplotd.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libplplotd.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libplplotd.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libplplotd.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lplplotd

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libplplotd.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libplplotd.a" >&5
echo "${ECHO_T}Did not find libplplotd.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libplplotd.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libplplotd.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libplplotd.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libplplotd.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lplplotd

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libplplotd.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lplplotd $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libplplotd.a" -o -f "$_CHECK_PATH_/libplplotd.so" \
	                 -o -f "$_CHECK_PATH_/libplplotd.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lplplotd

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


# Slight name change for convience
    if test "$HAVE_LIB_PLPLOTD"; then
      echo "Have debug version"
      HAVE_LIB_PLPLOT="$HAVE_LIB_PLPLOTD"
      LIBPLPLOT="$LIB_DIR_PLPLOTD"
      PLPLOT_LIB_FLAG="$PLPLOTD_LIB_FLAG"
      PLPLOT_LIB_DIR_FLAG="$PLPLOTD_LIB_DIR_FLAG"
    fi
  fi


    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_PLPLOT/../include"
       echo "   headers:     plplot/plplot.h"
       echo "   other-paths: $INC_TCL_H $INC_TK_H"
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_PLPLOT/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="plplot/plplot.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for plplot/plplot.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for plplot/plplot.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_TCL_H $INC_TK_H >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_TCL_H $INC_TK_H >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



  if test "$HAVE_LIB_PLPLOT" && test "$HAVE_PLPLOT_PLPLOT_H"; then
    DEF_PLPLOT="#define HAVE_PLPLOT 1"
    INC_PLPLOT_H="$INC_PLPLOT_PLPLOT_H"
  else
    DEF_PLPLOT=""
    PLPLOT_LIB_FLAG=""
    PLPLOT_LIB_DIR_FLAG=""
    INC_PLPLOT_H=""
  fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   tclmatrix"
       echo "   function:   main"
       echo "   other-libs: $TK_LIB_DIR_FLAG $TK_LIB_FLAG $TCL_LIB_DIR_FLAG $TCL_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for tclmatrix) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for tclmatrix) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes tclmatrix (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo tclmatrix | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libtclmatrix.so and libtclmatrix.a" >&5
echo $ECHO_N "checking for both libtclmatrix.so and libtclmatrix.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -ltclmatrix" >&5
echo $ECHO_N "checking for -ltclmatrix... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -ltclmatrix" >&5
echo $ECHO_N "checking for main in -ltclmatrix... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$TK_LIB_DIR_FLAG $TK_LIB_FLAG $TCL_LIB_DIR_FLAG $TCL_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libtclmatrix.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libtclmatrix.a"; then
            echo "$as_me:$LINENO: result: Found libtclmatrix.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtclmatrix.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libtclmatrix.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtclmatrix.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ltclmatrix

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libtclmatrix.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libtclmatrix.a" >&5
echo "${ECHO_T}Did not find libtclmatrix.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libtclmatrix.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libtclmatrix.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libtclmatrix.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtclmatrix.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ltclmatrix

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libtclmatrix.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -ltclmatrix $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libtclmatrix.a" -o -f "$_CHECK_PATH_/libtclmatrix.so" \
	                 -o -f "$_CHECK_PATH_/libtclmatrix.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-ltclmatrix

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


  if test "$HAVE_LIB_TCLMATRIX"; then
    echo "Have optimized version"
  else

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   tclmatrixd"
       echo "   function:   main"
       echo "   other-libs: $TK_LIB_DIR_FLAG $TK_LIB_FLAG $TCL_LIB_DIR_FLAG $TCL_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for tclmatrixd) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for tclmatrixd) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes tclmatrixd (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo tclmatrixd | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libtclmatrixd.so and libtclmatrixd.a" >&5
echo $ECHO_N "checking for both libtclmatrixd.so and libtclmatrixd.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -ltclmatrixd" >&5
echo $ECHO_N "checking for -ltclmatrixd... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -ltclmatrixd" >&5
echo $ECHO_N "checking for main in -ltclmatrixd... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$TK_LIB_DIR_FLAG $TK_LIB_FLAG $TCL_LIB_DIR_FLAG $TCL_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libtclmatrixd.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libtclmatrixd.a"; then
            echo "$as_me:$LINENO: result: Found libtclmatrixd.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtclmatrixd.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libtclmatrixd.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtclmatrixd.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ltclmatrixd

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libtclmatrixd.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libtclmatrixd.a" >&5
echo "${ECHO_T}Did not find libtclmatrixd.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libtclmatrixd.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libtclmatrixd.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libtclmatrixd.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libtclmatrixd.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-ltclmatrixd

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libtclmatrixd.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -ltclmatrixd $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libtclmatrixd.a" -o -f "$_CHECK_PATH_/libtclmatrixd.so" \
	                 -o -f "$_CHECK_PATH_/libtclmatrixd.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-ltclmatrixd

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


# Slight name change for convience
    if test "$HAVE_LIB_TCLMATRIXD"; then
      echo "Have debug version"
      HAVE_LIB_TCLMATRIX="$HAVE_LIB_TCLMATRIXD"
      LIBTCLMATRIX="$LIB_DIR_TCLMATRIXD"
      TCLMATRIX_LIB_FLAG="$TCLMATRIXD_LIB_FLAG"
      TCLMATRIX_LIB_DIR_FLAG="$TCLMATRIXD_LIB_DIR_FLAG"
    fi
  fi


    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_TCLMATRIX/../include"
       echo "   headers:     plplot/tclMatrix.h"
       echo "   other-paths: $INC_TCL_H $INC_TK_H"
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_TCLMATRIX/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="plplot/tclMatrix.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for plplot/tclMatrix.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for plplot/tclMatrix.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_TCL_H $INC_TK_H >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_TCL_H $INC_TK_H >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



  if test "$HAVE_LIB_TCLMATRIX" && test "$HAVE_PLPLOT_TCLMATRIX_H"; then
    DEF_TCLMATRIX="#define HAVE_TCLMATRIX 1"
    INC_TCLMATRIX_H="$INC_TCLMATRIX_TCLMATRIX_H"
  else
    DEF_TCLMATRIX=""
    TCLMATRIX_LIB_FLAG=""
    TCLMATRIX_LIB_DIR_FLAG=""
    INC_TCLMATRIX_H=""
  fi
fi












CORRECT_TCL_VERSION=no
CORRECT_TK_VERSION=no
CORRECT_ITCL_VERSION=no


    ##  SCI_CHECK_VAR_VERSION
    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="8.3.2"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for Tcl version 8.3.2" >&5
echo $ECHO_N "checking for Tcl version 8.3.2... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "continue"; then
      _SCI_NOTCORRECT_='continue'
    fi

    if test ""; then
      _SCI_COMP_=""
    else
      _SCI_COMP_="-gt"
    fi

    eval "echo $TCL_VERSION$TCL_PATCH_LEVEL 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi


    ##  SCI_CHECK_VAR_VERSION
    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="8.3.2"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for Tk version 8.3.2" >&5
echo $ECHO_N "checking for Tk version 8.3.2... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "continue"; then
      _SCI_NOTCORRECT_='continue'
    fi

    if test ""; then
      _SCI_COMP_=""
    else
      _SCI_COMP_="-gt"
    fi

    eval "echo $TK_VERSION$TK_PATCH_LEVEL 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi


    ##  SCI_CHECK_VAR_VERSION
    _SCI_CORRECT_='echo $echo_n "$echo_c"'
    _SCI_NOTCORRECT_='echo $echo_n "$echo_c"'
    _SCI_VER_1_="0"
    _SCI_VER_2_="$TK_VERSION$TK_PATCH_LEVEL"
    _CUR_1_=""
    _CUR_2_=""

    echo "$as_me:$LINENO: checking for equal Tcl and Tk version $TK_VERSION$TK_PATCH_LEVEL" >&5
echo $ECHO_N "checking for equal Tcl and Tk version $TK_VERSION$TK_PATCH_LEVEL... $ECHO_C" >&6

    if test ""; then
      _SCI_CORRECT_=''
    fi

    if test "continue"; then
      _SCI_NOTCORRECT_='continue'
    fi

    if test "-ne"; then
      _SCI_COMP_="-ne"
    else
      _SCI_COMP_="-gt"
    fi

    eval "echo $TCL_VERSION$TCL_PATCH_LEVEL 2> conftest.out >> conftest.out"
    _SCI_REPORT_="`cat conftest.out | head -n 1 | sed 's%[^0-9\.]*%%g'`"
    _SCI_VER_1_=$_SCI_REPORT_

    _SCI_BIGGER_=yes
    _SCI_LAST_=""
    while test "$_SCI_VER_2_"; do
      if test "$_SCI_LAST_" = "$_SCI_VER_2_"; then
        break
      fi
      _SCI_LAST_=$_SCI_VER_2_
      _CUR_1_=`echo $_SCI_VER_1_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_1_=`echo $_SCI_VER_1_ | sed 's%[0-9]*[a-z]*\.%%'`
      _CUR_2_=`echo $_SCI_VER_2_ | sed 's%\.[0-9]*[a-z]*%%g'`
      _SCI_VER_2_=`echo $_SCI_VER_2_ | sed 's%[0-9]*[a-z]*\.%%'`
      if test $_CUR_2_ $_SCI_COMP_ $_CUR_1_; then
        _SCI_BIGGER_=no
        break
      elif test $_CUR_1_ -gt $_CUR_2_; then
        break
      fi
    done

    if test "$_SCI_BIGGER_" = "yes"; then
      echo "$as_me:$LINENO: result: yes ($_SCI_REPORT_)" >&5
echo "${ECHO_T}yes ($_SCI_REPORT_)" >&6
      eval $_SCI_CORRECT_
    else
      echo "$as_me:$LINENO: result: no ($_SCI_REPORT_)" >&5
echo "${ECHO_T}no ($_SCI_REPORT_)" >&6
      eval $_SCI_NOTCORRECT_
    fi








##  --  search for xerces-c++ stuff  --------------------------------------
echo
{ echo "$as_me:$LINENO: checking for required Xerces-C++ components......" >&5
echo "$as_me: checking for required Xerces-C++ components......" >&6;}
echo

if test "$with_xercesc"; then
  dirs="$with_xercesc/lib $SCI_LAB_TP_LIBS"
else
  dirs="$SCI_LAB_TP_LIBS"
fi

case $host in
  *aix*)
      # Needed on blue pacific for stricmp

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   cfgdce"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    yes"
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_="yes"
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for cfgdce) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for cfgdce) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes cfgdce (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo cfgdce | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libcfgdce.so and libcfgdce.a" >&5
echo $ECHO_N "checking for both libcfgdce.so and libcfgdce.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lcfgdce" >&5
echo $ECHO_N "checking for -lcfgdce... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lcfgdce" >&5
echo $ECHO_N "checking for main in -lcfgdce... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libcfgdce.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libcfgdce.a"; then
            echo "$as_me:$LINENO: result: Found libcfgdce.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libcfgdce.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libcfgdce.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libcfgdce.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lcfgdce

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libcfgdce.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libcfgdce.a" >&5
echo "${ECHO_T}Did not find libcfgdce.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libcfgdce.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libcfgdce.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libcfgdce.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libcfgdce.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lcfgdce

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libcfgdce.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lcfgdce $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libcfgdce.a" -o -f "$_CHECK_PATH_/libcfgdce.so" \
	                 -o -f "$_CHECK_PATH_/libcfgdce.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lcfgdce

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


      ;;
esac


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   xerces-c"
       echo "   function:   main"
       echo "   other-libs: $CFGDCE_LIB_FLAG"
       echo "   c++ lib:    yes"
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_="yes"
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for xerces-c) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for xerces-c) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes xerces-c (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo xerces-c | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libxerces-c.so and libxerces-c.a" >&5
echo $ECHO_N "checking for both libxerces-c.so and libxerces-c.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lxerces-c" >&5
echo $ECHO_N "checking for -lxerces-c... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lxerces-c" >&5
echo $ECHO_N "checking for main in -lxerces-c... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$CFGDCE_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libxerces-c.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libxerces-c.a"; then
            echo "$as_me:$LINENO: result: Found libxerces-c.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libxerces-c.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libxerces-c.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libxerces-c.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lxerces-c

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libxerces-c.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libxerces-c.a" >&5
echo "${ECHO_T}Did not find libxerces-c.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libxerces-c.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libxerces-c.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libxerces-c.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libxerces-c.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lxerces-c

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libxerces-c.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lxerces-c $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libxerces-c.a" -o -f "$_CHECK_PATH_/libxerces-c.so" \
	                 -o -f "$_CHECK_PATH_/libxerces-c.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lxerces-c

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_XERCES_C/../include"
       echo "   headers:     \
    xercesc/dom/DOMNamedNodeMap.hpp xercesc/util/PlatformUtils.hpp \
    xercesc/parsers/XercesDOMParser.hpp xercesc/dom/DOMNode.hpp \
    xercesc/util/XMLUni.hpp xercesc/sax/SAXException.hpp \
    xercesc/sax/SAXParseException.hpp \
    xercesc/sax/ErrorHandler.hpp"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_XERCES_C/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="\
    xercesc/dom/DOMNamedNodeMap.hpp xercesc/util/PlatformUtils.hpp \
    xercesc/parsers/XercesDOMParser.hpp xercesc/dom/DOMNode.hpp \
    xercesc/util/XMLUni.hpp xercesc/sax/SAXException.hpp \
    xercesc/sax/SAXParseException.hpp \
    xercesc/sax/ErrorHandler.hpp"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for \
    xercesc/dom/DOMNamedNodeMap.hpp xercesc/util/PlatformUtils.hpp \
    xercesc/parsers/XercesDOMParser.hpp xercesc/dom/DOMNode.hpp \
    xercesc/util/XMLUni.hpp xercesc/sax/SAXException.hpp \
    xercesc/sax/SAXParseException.hpp \
    xercesc/sax/ErrorHandler.hpp) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for \
    xercesc/dom/DOMNamedNodeMap.hpp xercesc/util/PlatformUtils.hpp \
    xercesc/parsers/XercesDOMParser.hpp xercesc/dom/DOMNode.hpp \
    xercesc/util/XMLUni.hpp xercesc/sax/SAXException.hpp \
    xercesc/sax/SAXParseException.hpp \
    xercesc/sax/ErrorHandler.hpp) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



# All xerces includes based on the first include file
INC_XERCESC_H=$INC_XERCESC_DOM_DOMNAMEDNODEMAP_HPP





##  --  search for mpi  --------------------------------------------------

if test "$pkg_uintah" = "yes"; then
  echo
  { echo "$as_me:$LINENO: checking for required MPI components......" >&5
echo "$as_me: checking for required MPI components......" >&6;}
  echo
else
  echo
  { echo "$as_me:$LINENO: checking for optional components......" >&5
echo "$as_me: checking for optional components......" >&6;}
  echo
fi

case $host in
#  *aix*)
      # On LLNL blue pacific, the "mp" compilers (scripts) automagically
      # include the paths to mpi stuff...  However, if you don't want
      # them to automatically force you to run in poe (batch) mode, you
      # can comment this out and link in MPI directly yourself.
      # The resulting executable works in non-mpi mode which can be easier
      # to debug (and to get to run as you don't go through the poe system.)
      # It is possible that the executable will not work in MPI mode.
      #
      # AC_MSG_WARN(On blue pacific the mp compilers automatically specify mpi.  No check made.)
      #
      # The reason you have to specify xlC/KCC above, and change it to
      # mpxlC/mpKCC here is that configure uses the compiler to create test
      # programs to figure things out about the system.  If you use
      # the mpCC compiler, then the test programs will not run (as they
      # try to run in POE mode.)
      #
      # CC="mp$CC"
      # CXX="mp$CXX"
      # ;;
   *)
      if test "$with_mpi"; then
         dirs="$with_mpi/lib $SCI_LAB_TP_LIBS"
      else
         dirs="$SCI_LAB_TP_LIBS"
      fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      """
       echo "   lib name:   util"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for util) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for util) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes util (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo util | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libutil.so and libutil.a" >&5
echo $ECHO_N "checking for both libutil.so and libutil.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lutil" >&5
echo $ECHO_N "checking for -lutil... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lutil" >&5
echo $ECHO_N "checking for main in -lutil... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=""" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libutil.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libutil.a"; then
            echo "$as_me:$LINENO: result: Found libutil.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libutil.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libutil.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libutil.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lutil

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libutil.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libutil.a" >&5
echo "${ECHO_T}Did not find libutil.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libutil.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libutil.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libutil.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libutil.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lutil

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libutil.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=""" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lutil $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libutil.a" -o -f "$_CHECK_PATH_/libutil.so" \
	                 -o -f "$_CHECK_PATH_/libutil.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lutil

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


      if test -n "$HAVE_LIB_UTIL"; then

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   lam"
       echo "   function:   main"
       echo "   other-libs: -lutil"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for lam) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for lam) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes lam (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo lam | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both liblam.so and liblam.a" >&5
echo $ECHO_N "checking for both liblam.so and liblam.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -llam" >&5
echo $ECHO_N "checking for -llam... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -llam" >&5
echo $ECHO_N "checking for main in -llam... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="-lutil"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for liblam.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/liblam.a"; then
            echo "$as_me:$LINENO: result: Found liblam.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblam.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liblam.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblam.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-llam

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liblam.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find liblam.a" >&5
echo "${ECHO_T}Did not find liblam.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for liblam.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/liblam.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liblam.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblam.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-llam

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liblam.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -llam $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/liblam.a" -o -f "$_CHECK_PATH_/liblam.so" \
	                 -o -f "$_CHECK_PATH_/liblam.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-llam

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


         if test -n "$HAVE_LIB_LAM"; then

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   mpi"
       echo "   function:   main"
       echo "   other-libs: -llam -lutil"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for mpi) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for mpi) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes mpi (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo mpi | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libmpi.so and libmpi.a" >&5
echo $ECHO_N "checking for both libmpi.so and libmpi.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lmpi" >&5
echo $ECHO_N "checking for -lmpi... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lmpi" >&5
echo $ECHO_N "checking for main in -lmpi... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="-llam -lutil"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libmpi.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libmpi.a"; then
            echo "$as_me:$LINENO: result: Found libmpi.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpi.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmpi.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpi.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmpi

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmpi.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libmpi.a" >&5
echo "${ECHO_T}Did not find libmpi.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libmpi.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libmpi.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmpi.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpi.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmpi

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmpi.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lmpi $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libmpi.a" -o -f "$_CHECK_PATH_/libmpi.so" \
	                 -o -f "$_CHECK_PATH_/libmpi.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lmpi

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


	    if test -n "$HAVE_LIB_MPI"; then

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   pmpi"
       echo "   function:   main"
       echo "   other-libs: -llam -lutil $MPI_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for pmpi) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for pmpi) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes pmpi (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo pmpi | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpmpi.so and libpmpi.a" >&5
echo $ECHO_N "checking for both libpmpi.so and libpmpi.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpmpi" >&5
echo $ECHO_N "checking for -lpmpi... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpmpi" >&5
echo $ECHO_N "checking for main in -lpmpi... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="-llam -lutil $MPI_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpmpi.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpmpi.a"; then
            echo "$as_me:$LINENO: result: Found libpmpi.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpmpi.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpmpi.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpmpi.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpmpi

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpmpi.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpmpi.a" >&5
echo "${ECHO_T}Did not find libpmpi.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpmpi.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpmpi.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpmpi.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpmpi.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpmpi

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpmpi.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpmpi $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpmpi.a" -o -f "$_CHECK_PATH_/libpmpi.so" \
	                 -o -f "$_CHECK_PATH_/libpmpi.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpmpi

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


	       MPI_LIB_FLAG="$PMPI_LIB_FLAG $MPI_LIB_FLAG $LAM_LIB_FLAG $UTIL_LIB_FLAG"
               echo "MPI_LIB_FLAG is $MPI_LIB_FLAG"
               echo "MPI_LIB_DIR_FLAG is $MPI_LIB_DIR_FLAG"
            fi
         fi
      fi

      if test -z "$HAVE_LIB_MPI"; then

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   mpi"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for mpi) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for mpi) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes mpi (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo mpi | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libmpi.so and libmpi.a" >&5
echo $ECHO_N "checking for both libmpi.so and libmpi.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lmpi" >&5
echo $ECHO_N "checking for -lmpi... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lmpi" >&5
echo $ECHO_N "checking for main in -lmpi... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libmpi.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libmpi.a"; then
            echo "$as_me:$LINENO: result: Found libmpi.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpi.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmpi.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpi.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmpi

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmpi.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libmpi.a" >&5
echo "${ECHO_T}Did not find libmpi.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libmpi.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libmpi.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmpi.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpi.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmpi

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmpi.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lmpi $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libmpi.a" -o -f "$_CHECK_PATH_/libmpi.so" \
	                 -o -f "$_CHECK_PATH_/libmpi.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lmpi

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



         if test -z "$HAVE_LIB_MPI"; then

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   mpich"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for mpich) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for mpich) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes mpich (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo mpich | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libmpich.so and libmpich.a" >&5
echo $ECHO_N "checking for both libmpich.so and libmpich.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lmpich" >&5
echo $ECHO_N "checking for -lmpich... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lmpich" >&5
echo $ECHO_N "checking for main in -lmpich... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libmpich.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libmpich.a"; then
            echo "$as_me:$LINENO: result: Found libmpich.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpich.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmpich.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpich.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmpich

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmpich.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libmpich.a" >&5
echo "${ECHO_T}Did not find libmpich.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libmpich.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libmpich.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmpich.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpich.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmpich

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmpich.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lmpich $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libmpich.a" -o -f "$_CHECK_PATH_/libmpich.so" \
	                 -o -f "$_CHECK_PATH_/libmpich.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lmpich

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_MPICH"
       echo "   lib name:   pmpich"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for pmpich) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for pmpich) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes pmpich (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo pmpich | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpmpich.so and libpmpich.a" >&5
echo $ECHO_N "checking for both libpmpich.so and libpmpich.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpmpich" >&5
echo $ECHO_N "checking for -lpmpich... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpmpich" >&5
echo $ECHO_N "checking for main in -lpmpich... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_MPICH /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpmpich.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpmpich.a"; then
            echo "$as_me:$LINENO: result: Found libpmpich.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpmpich.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpmpich.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpmpich.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpmpich

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpmpich.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpmpich.a" >&5
echo "${ECHO_T}Did not find libpmpich.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpmpich.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpmpich.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpmpich.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpmpich.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpmpich

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpmpich.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_MPICH NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpmpich $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpmpich.a" -o -f "$_CHECK_PATH_/libpmpich.so" \
	                 -o -f "$_CHECK_PATH_/libpmpich.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpmpich

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



            if test "$HAVE_LIB_MPICH" && test "$HAVE_LIB_PMPICH"; then
	       HAVE_LIB_MPI="$HAVE_LIB_MPICH"
	       LIB_DIR_MPI="$LIB_DIR_MPICH"
               MPI_LIB_FLAG="$MPICH_LIB_FLAG $PMPICH_LIB_FLAG"
               MPI_LIB_DIR_FLAG="$MPICH_LIB_DIR_FLAG"
            fi
         fi
      fi

      # /usr/include/mpi is the standard location of mpi on some linux dists.

    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       "$LIB_DIR_MPI"/../include /usr/include/mpi"
       echo "   headers:     mpi.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_=""$LIB_DIR_MPI"/../include /usr/include/mpi NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="mpi.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for mpi.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for mpi.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



      if test "$HAVE_LIB_MPI" && test "$HAVE_MPI_H"; then
         if test "$HAVE_LIB_MPICH"; then
           DEF_MPI="#define HAVE_MPICH 1"
         else
           DEF_MPI="#define HAVE_MPI 1"
         fi
      fi
esac

if (test "$with_mpi" || test "$pkg_uintah" = "yes") && test ! "$DEF_MPI"; then
   echo

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: one or more of the MPI components is missing." >&5
echo "$as_me: error: one or more of the MPI components is missing." >&2;}
   { (exit 1); exit 1; }; }

fi







##  --  setup petsc variables before searching for MPI-uni   ------------------------------
if test "$with_unipetsc" && test "$with_petsc"; then
   { { echo "$as_me:$LINENO: error: Cannot configure with both --with-petsc and --with-unipetsc." >&5
echo "$as_me: error: Cannot configure with both --with-petsc and --with-unipetsc." >&2;}
   { (exit 1); exit 1; }; }
fi

# We only use the optimized petsc lib even if we are building a debug SCIRun
#if test "$debug" = "yes"; then
#  PETSC_SUB=libg
#else
  PETSC_SUB=libO
#fi
case $host in
  *-irix*)
    if test "$enable_64bit" = "yes"; then
      PETSC_ARCH=IRIX64
    else
      PETSC_ARCH=IRIX32
    fi
    ;;
  *linux*)
    PETSC_ARCH=linux
    ;;
  *-dec*)
    if test "$petsc"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: PETSC ARCH not set for Tru64.  Need to fix this." >&5
echo "$as_me: error: PETSC ARCH not set for Tru64.  Need to fix this." >&2;}
   { (exit 1); exit 1; }; }

    else
      PETSC_ARCH=dec
    fi
    ;;
  *-aix*)
    PETSC_ARCH=rs6000_sp
    ;;
  *-darwin*)
    PETSC_ARCH=ppc
    ;;
  *)
    PETSC_ARCH=""
    ;;
esac

if test -z "$PETSC_ARCH"; then
   { { echo "$as_me:$LINENO: error: PETSC_ARCH environment var is not set.  Please set." >&5
echo "$as_me: error: PETSC_ARCH environment var is not set.  Please set." >&2;}
   { (exit 1); exit 1; }; }
fi

PETSC_VERSION_DIR=petsc-2.1.1




##  --  search for mpi-uni  --------------------------------------------

dirs="$SCI_LAB_TP_LIBS"

if test "$with_mpiuni"; then
  dirs="$with_mpiuni/lib $dirs"
fi

if test "$with_unipetsc"; then
  dirs="$with_unipetsc/lib/$PETSC_SUB/$PETSC_ARCH $dirs"
fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   mpiuni"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for mpiuni) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for mpiuni) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes mpiuni (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo mpiuni | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libmpiuni.so and libmpiuni.a" >&5
echo $ECHO_N "checking for both libmpiuni.so and libmpiuni.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lmpiuni" >&5
echo $ECHO_N "checking for -lmpiuni... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lmpiuni" >&5
echo $ECHO_N "checking for main in -lmpiuni... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libmpiuni.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libmpiuni.a"; then
            echo "$as_me:$LINENO: result: Found libmpiuni.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpiuni.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmpiuni.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpiuni.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmpiuni

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmpiuni.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libmpiuni.a" >&5
echo "${ECHO_T}Did not find libmpiuni.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libmpiuni.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libmpiuni.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmpiuni.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpiuni.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmpiuni

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmpiuni.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lmpiuni $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libmpiuni.a" -o -f "$_CHECK_PATH_/libmpiuni.so" \
	                 -o -f "$_CHECK_PATH_/libmpiuni.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lmpiuni

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



if test "$HAVE_LIB_MPIUNI"; then

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   mpiunich"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for mpiunich) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for mpiunich) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes mpiunich (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo mpiunich | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libmpiunich.so and libmpiunich.a" >&5
echo $ECHO_N "checking for both libmpiunich.so and libmpiunich.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lmpiunich" >&5
echo $ECHO_N "checking for -lmpiunich... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lmpiunich" >&5
echo $ECHO_N "checking for main in -lmpiunich... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libmpiunich.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libmpiunich.a"; then
            echo "$as_me:$LINENO: result: Found libmpiunich.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpiunich.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmpiunich.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpiunich.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmpiunich

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmpiunich.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libmpiunich.a" >&5
echo "${ECHO_T}Did not find libmpiunich.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libmpiunich.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libmpiunich.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmpiunich.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpiunich.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmpiunich

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmpiunich.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lmpiunich $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libmpiunich.a" -o -f "$_CHECK_PATH_/libmpiunich.so" \
	                 -o -f "$_CHECK_PATH_/libmpiunich.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lmpiunich

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_MPIUNICH"
       echo "   lib name:   pmpiunich"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for pmpiunich) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for pmpiunich) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes pmpiunich (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo pmpiunich | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpmpiunich.so and libpmpiunich.a" >&5
echo $ECHO_N "checking for both libpmpiunich.so and libpmpiunich.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpmpiunich" >&5
echo $ECHO_N "checking for -lpmpiunich... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpmpiunich" >&5
echo $ECHO_N "checking for main in -lpmpiunich... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_MPIUNICH /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpmpiunich.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpmpiunich.a"; then
            echo "$as_me:$LINENO: result: Found libpmpiunich.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpmpiunich.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpmpiunich.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpmpiunich.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpmpiunich

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpmpiunich.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpmpiunich.a" >&5
echo "${ECHO_T}Did not find libpmpiunich.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpmpiunich.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpmpiunich.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpmpiunich.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpmpiunich.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpmpiunich

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpmpiunich.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_MPIUNICH NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpmpiunich $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpmpiunich.a" -o -f "$_CHECK_PATH_/libpmpiunich.so" \
	                 -o -f "$_CHECK_PATH_/libpmpiunich.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpmpiunich

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



   if test "$HAVE_LIB_MPIUNICH" && test "$HAVE_LIB_PMPIUNICH"; then
     HAVE_LIB_MPIUNI="$HAVE_LIB_MPIUNICH"
     LIB_DIR_MPIUNI="$LIB_DIR_MPIUNICH"
     MPIUNI_LIB_FLAG="$MPIUNICH_LIB_FLAG $PMPIUNICH_LIB_FLAG"
     MPIUNI_LIB_DIR_FLAG="$MPIUNICH_LIB_DIR_FLAG"
     HAVE_MPIUNI="$HAVE_MPIUNICH"
   fi
fi

dirs=""
if test "$with_unipetsc"; then
  dirs=
fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $with_unipetsc/src/sys/src/mpiuni $LIB_DIR_MPIUNI/../include"
       echo "   headers:     mpi.h"
       echo "   other-paths: "-I$with_unipetsc/bmake/$PETSC_ARCH""
       echo "   c++ lib:     no"
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$with_unipetsc/src/sys/src/mpiuni $LIB_DIR_MPIUNI/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="mpi.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_="no"
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for mpi.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for mpi.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS "-I$with_unipetsc/bmake/$PETSC_ARCH" >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS "-I$with_unipetsc/bmake/$PETSC_ARCH" >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



if test "$HAVE_LIB_MPIUNI" && test "$HAVE_MPIUNI_H"; then
   if test "$HAVE_LIB_MPIUNICH"; then
     DEF_MPIUNI="#define HAVE_MPIUNICH 1"
   else
     DEF_MPIUNI="#define HAVE_MPIUNI 1"
   fi
fi

if test "$with_mpiuni" && test ! "$DEF_MPIUNI"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the MPIUNI components is missing." >&5
echo "$as_me: error: One or more of the MPIUNI components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi






##  --  if building uintah, search for TAU makefile  ---------------------

if test "$pkg_uintah" = "yes" && test "$with_tau"; then
  if test ! -f "$with_tau" ; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: $with_tau does not exist.  Bye!" >&5
echo "$as_me: error: $with_tau does not exist.  Bye!" >&2;}
   { (exit 1); exit 1; }; }

  fi

  echo "$as_me:$LINENO: result: Using TAU makefile: $with_tau" >&5
echo "${ECHO_T}Using TAU makefile: $with_tau" >&6

  cat > conftest-tau.cc <<EOF

  #include <Profile/Profiler.h>

  int main(int argc, char **argv)
  {
    TAU_PROFILE("main", "int (int, char **)", TAU_DEFAULT);
    TAU_PROFILE_INIT(argc, argv);
    return 0;
  }
EOF

  cat > conftest-tau-makefile <<EOF
include $with_tau
all:
  \$(TAU_CXX) -o conftest-tau-a.out \$(TAU_DEFS) \$(TAU_INCLUDE) conftest-tau.cc \$(TAU_SHLIBS) \$(TAU_MPI_LIBS)
EOF

  ac_try="make TAU_MAKEFILE=$with_tau -f conftest-tau-makefile > conftestout1 2> conftesterr1"
  (eval $ac_try) 2>&5
  ac_status=$?
  if test "$ac_status" = "1"; then
    rm -f conftest-tau.cc conftest-tau-makefile conftest-tau-a.out conftestout1 conftesterr1

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: TAU libraries not working. Bye!" >&5
echo "$as_me: error: TAU libraries not working. Bye!" >&2;}
   { (exit 1); exit 1; }; }

  fi
  rm -f conftest-tau.cc conftest-tau-makefile conftest-tau-a.out conftestout1 conftesterr1

  TAU_MAKEFILE="$with_tau"
fi



##  ----------------------------------------------------------------------
##  ----------  search for optional libraries and headers  ---------------
##  ----------------------------------------------------------------------

echo
{ echo "$as_me:$LINENO: checking for optional components......" >&5
echo "$as_me: checking for optional components......" >&6;}
echo


    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       "
       echo "   headers:     ieeefp.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="ieeefp.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for ieeefp.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for ieeefp.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files




    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   fl"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for fl) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for fl) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes fl (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo fl | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libfl.so and libfl.a" >&5
echo $ECHO_N "checking for both libfl.so and libfl.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lfl" >&5
echo $ECHO_N "checking for -lfl... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lfl" >&5
echo $ECHO_N "checking for main in -lfl... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libfl.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libfl.a"; then
            echo "$as_me:$LINENO: result: Found libfl.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfl.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libfl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lfl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libfl.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libfl.a" >&5
echo "${ECHO_T}Did not find libfl.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libfl.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libfl.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libfl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lfl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libfl.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lfl $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libfl.a" -o -f "$_CHECK_PATH_/libfl.so" \
	                 -o -f "$_CHECK_PATH_/libfl.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lfl

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      "
       echo "   lib name:   ld"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for ld) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for ld) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes ld (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo ld | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libld.so and libld.a" >&5
echo $ECHO_N "checking for both libld.so and libld.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lld" >&5
echo $ECHO_N "checking for -lld... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lld" >&5
echo $ECHO_N "checking for main in -lld... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_=" /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libld.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libld.a"; then
            echo "$as_me:$LINENO: result: Found libld.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libld.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libld.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libld.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lld

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libld.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libld.a" >&5
echo "${ECHO_T}Did not find libld.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libld.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libld.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libld.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libld.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lld

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libld.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lld $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libld.a" -o -f "$_CHECK_PATH_/libld.so" \
	                 -o -f "$_CHECK_PATH_/libld.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lld

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



##  --  search for teem  -------------------------------------------------

if test "$with_teem"; then
  dirs="$with_teem/lib $SCI_LAB_TP_LIBS"
else
  dirs="$SCI_LAB_TP_LIBS"
fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   air"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for air) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for air) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes air (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo air | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libair.so and libair.a" >&5
echo $ECHO_N "checking for both libair.so and libair.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lair" >&5
echo $ECHO_N "checking for -lair... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lair" >&5
echo $ECHO_N "checking for main in -lair... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libair.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libair.a"; then
            echo "$as_me:$LINENO: result: Found libair.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libair.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libair.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libair.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lair

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libair.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libair.a" >&5
echo "${ECHO_T}Did not find libair.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libair.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libair.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libair.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libair.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lair

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libair.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lair $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libair.a" -o -f "$_CHECK_PATH_/libair.so" \
	                 -o -f "$_CHECK_PATH_/libair.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lair

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_AIR"
       echo "   lib name:   biff"
       echo "   function:   main"
       echo "   other-libs: $AIR_LIB_DIR_FLAG $AIR_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for biff) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for biff) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes biff (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo biff | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libbiff.so and libbiff.a" >&5
echo $ECHO_N "checking for both libbiff.so and libbiff.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lbiff" >&5
echo $ECHO_N "checking for -lbiff... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lbiff" >&5
echo $ECHO_N "checking for main in -lbiff... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$AIR_LIB_DIR_FLAG $AIR_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_AIR /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libbiff.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libbiff.a"; then
            echo "$as_me:$LINENO: result: Found libbiff.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libbiff.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libbiff.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libbiff.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lbiff

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libbiff.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libbiff.a" >&5
echo "${ECHO_T}Did not find libbiff.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libbiff.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libbiff.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libbiff.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libbiff.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lbiff

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libbiff.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_AIR NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lbiff $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libbiff.a" -o -f "$_CHECK_PATH_/libbiff.so" \
	                 -o -f "$_CHECK_PATH_/libbiff.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lbiff

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_AIR"
       echo "   lib name:   ell"
       echo "   function:   main"
       echo "   other-libs: $AIR_LIB_DIR_FLAG $AIR_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for ell) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for ell) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes ell (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo ell | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libell.so and libell.a" >&5
echo $ECHO_N "checking for both libell.so and libell.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lell" >&5
echo $ECHO_N "checking for -lell... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lell" >&5
echo $ECHO_N "checking for main in -lell... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$AIR_LIB_DIR_FLAG $AIR_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_AIR /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libell.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libell.a"; then
            echo "$as_me:$LINENO: result: Found libell.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libell.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libell.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libell.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lell

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libell.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libell.a" >&5
echo "${ECHO_T}Did not find libell.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libell.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libell.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libell.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libell.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lell

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libell.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_AIR NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lell $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libell.a" -o -f "$_CHECK_PATH_/libell.so" \
	                 -o -f "$_CHECK_PATH_/libell.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lell

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_AIR"
       echo "   lib name:   nrrd"
       echo "   function:   main"
       echo "   other-libs: $BIFF_LIB_DIR_FLAG $BIFF_LIB_FLAG $AIR_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for nrrd) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for nrrd) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes nrrd (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo nrrd | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libnrrd.so and libnrrd.a" >&5
echo $ECHO_N "checking for both libnrrd.so and libnrrd.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lnrrd" >&5
echo $ECHO_N "checking for -lnrrd... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lnrrd" >&5
echo $ECHO_N "checking for main in -lnrrd... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$BIFF_LIB_DIR_FLAG $BIFF_LIB_FLAG $AIR_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_AIR /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libnrrd.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libnrrd.a"; then
            echo "$as_me:$LINENO: result: Found libnrrd.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libnrrd.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libnrrd.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libnrrd.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lnrrd

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libnrrd.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libnrrd.a" >&5
echo "${ECHO_T}Did not find libnrrd.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libnrrd.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libnrrd.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libnrrd.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libnrrd.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lnrrd

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libnrrd.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_AIR NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lnrrd $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libnrrd.a" -o -f "$_CHECK_PATH_/libnrrd.so" \
	                 -o -f "$_CHECK_PATH_/libnrrd.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lnrrd

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_NRRD/../include"
       echo "   headers:     nrrd.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_NRRD/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="nrrd.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for nrrd.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for nrrd.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



TEEM_LIB_FLAG="$NRRD_LIB_FLAG $ELL_LIB_FLAG $BIFF_LIB_FLAG $AIR_LIB_FLAG"
TEEM_LIB_DIR_FLAG="$NRRD_LIB_DIR_FLAG"

if test "$HAVE_LIB_NRRD" && test "$HAVE_LIB_AIR" && test "$HAVE_LIB_BIFF" &&
   test "$HAVE_LIB_ELL" && test "$HAVE_NRRD_H"; then
   INC_TEEM_H="$INC_NRRD_H"
   DEF_TEEM="#define HAVE_TEEM 1"
fi

if (test "$with_teem" || test "$pkg_teem" = "yes") && test ! "$DEF_TEEM"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the TEEM components is missing." >&5
echo "$as_me: error: One or more of the TEEM components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi







##  --  search for mpeg  -------------------------------------------------

if test "$with_mpeg"; then
  dirs="$with_mpeg/lib $SCI_LAB_TP_LIBS"
else
  dirs="$SCI_LAB_TP_LIBS"
fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   mpege"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for mpege) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for mpege) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes mpege (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo mpege | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libmpege.so and libmpege.a" >&5
echo $ECHO_N "checking for both libmpege.so and libmpege.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lmpege" >&5
echo $ECHO_N "checking for -lmpege... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lmpege" >&5
echo $ECHO_N "checking for main in -lmpege... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libmpege.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libmpege.a"; then
            echo "$as_me:$LINENO: result: Found libmpege.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpege.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmpege.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpege.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmpege

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmpege.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libmpege.a" >&5
echo "${ECHO_T}Did not find libmpege.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libmpege.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libmpege.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmpege.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmpege.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmpege

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmpege.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lmpege $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libmpege.a" -o -f "$_CHECK_PATH_/libmpege.so" \
	                 -o -f "$_CHECK_PATH_/libmpege.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lmpege

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



if test "$HAVE_LIB_MPEGE"; then
  DEF_MPEG="#define HAVE_MPEG 1"
fi

if test "$with_mpeg" && test ! "$DEF_MPEG"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the MPEG components is missing." >&5
echo "$as_me: error: One or more of the MPEG components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi





##  --  search for mdsplus  -------------------------------------------------

if test "$pkg_fusion" = "yes"; then

  if test "$with_mdsplus"; then
    dirs="$with_mdsplus/lib $SCI_LAB_TP_LIBS"
  else
    dirs="/usr/local/mdsplus/lib $SCI_LAB_TP_LIBS"
  fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   MdsLib_client"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    no"
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_="no"
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for MdsLib_client) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for MdsLib_client) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes MdsLib_client (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo MdsLib_client | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libMdsLib_client.so and libMdsLib_client.a" >&5
echo $ECHO_N "checking for both libMdsLib_client.so and libMdsLib_client.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lMdsLib_client" >&5
echo $ECHO_N "checking for -lMdsLib_client... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lMdsLib_client" >&5
echo $ECHO_N "checking for main in -lMdsLib_client... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libMdsLib_client.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libMdsLib_client.a"; then
            echo "$as_me:$LINENO: result: Found libMdsLib_client.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libMdsLib_client.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libMdsLib_client.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libMdsLib_client.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lMdsLib_client

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libMdsLib_client.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libMdsLib_client.a" >&5
echo "${ECHO_T}Did not find libMdsLib_client.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libMdsLib_client.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libMdsLib_client.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libMdsLib_client.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libMdsLib_client.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lMdsLib_client

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libMdsLib_client.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lMdsLib_client $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libMdsLib_client.a" -o -f "$_CHECK_PATH_/libMdsLib_client.so" \
	                 -o -f "$_CHECK_PATH_/libMdsLib_client.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lMdsLib_client

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_MDSLIB_CLIENT/../include"
       echo "   headers:     mdslib.h"
       echo "   other-paths: "
       echo "   c++ lib:     no"
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_MDSLIB_CLIENT/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="mdslib.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_="no"
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for mdslib.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for mdslib.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



  if test "$HAVE_LIB_MDSLIB_CLIENT" && test "$HAVE_MDSLIB_H"; then
    MDSPLUS_LIB_FLAG="$MDSLIB_CLIENT_LIB_FLAG"
    MDSPLUS_LIB_DIR_FLAG="$MDSLIB_CLIENT_LIB_DIR_FLAG"
    INC_MDSPLUS_H=$INC_MDSLIB_H
    DEF_MDSPLUS="#define HAVE_MDSPLUS 1"
  fi

  if test "$with_mdsplus" && test ! "$DEF_MDSPLUS"; then
    echo
    { { echo "$as_me:$LINENO: error: One or more of the MDS PLUS components is missing." >&5
echo "$as_me: error: One or more of the MDS PLUS components is missing." >&2;}
   { (exit 1); exit 1; }; }
    echo
  fi
fi






##  --  search for perfex  -----------------------------------------------

dirs="$with_perfex $SCI_LAB_TP_LIBS"


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   perfex"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for perfex) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for perfex) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes perfex (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo perfex | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libperfex.so and libperfex.a" >&5
echo $ECHO_N "checking for both libperfex.so and libperfex.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lperfex" >&5
echo $ECHO_N "checking for -lperfex... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lperfex" >&5
echo $ECHO_N "checking for main in -lperfex... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libperfex.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libperfex.a"; then
            echo "$as_me:$LINENO: result: Found libperfex.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libperfex.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libperfex.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libperfex.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lperfex

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libperfex.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libperfex.a" >&5
echo "${ECHO_T}Did not find libperfex.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libperfex.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libperfex.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libperfex.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libperfex.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lperfex

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libperfex.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lperfex $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libperfex.a" -o -f "$_CHECK_PATH_/libperfex.so" \
	                 -o -f "$_CHECK_PATH_/libperfex.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lperfex

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



if test "$HAVE_LIB_PERFEX"; then
  DEF_PERFEX="#define HAVE_PERFEX 1"
fi

if test "$with_perfex" && test ! "$DEF_PERFEX"; then
  { { echo "$as_me:$LINENO: error: One or more of the PERFEX components is missing." >&5
echo "$as_me: error: One or more of the PERFEX components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi





##  --  search for fastm  --------------------------------------------------

dirs="$with_fastm $SCI_LAB_TP_LIBS"


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   fastm"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for fastm) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for fastm) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes fastm (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo fastm | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libfastm.so and libfastm.a" >&5
echo $ECHO_N "checking for both libfastm.so and libfastm.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lfastm" >&5
echo $ECHO_N "checking for -lfastm... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lfastm" >&5
echo $ECHO_N "checking for main in -lfastm... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libfastm.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libfastm.a"; then
            echo "$as_me:$LINENO: result: Found libfastm.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfastm.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libfastm.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfastm.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lfastm

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libfastm.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libfastm.a" >&5
echo "${ECHO_T}Did not find libfastm.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libfastm.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libfastm.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libfastm.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfastm.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lfastm

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libfastm.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lfastm $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libfastm.a" -o -f "$_CHECK_PATH_/libfastm.so" \
	                 -o -f "$_CHECK_PATH_/libfastm.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lfastm

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



if test "$HAVE_LIB_FASTM"; then
  DEF_FASTM="#define HAVE_FASTM 1"
fi

if test "$with_fastm" && test ! "$DEF_FASTM"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the FASTM components is missing." >&5
echo "$as_me: error: One or more of the FASTM components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi





##  --  search for ssl  --------------------------------------------------

dirs="$with_ssl $SCI_LAB_TP_LIBS"


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   ssl"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for ssl) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for ssl) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes ssl (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo ssl | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libssl.so and libssl.a" >&5
echo $ECHO_N "checking for both libssl.so and libssl.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lssl" >&5
echo $ECHO_N "checking for -lssl... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lssl" >&5
echo $ECHO_N "checking for main in -lssl... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libssl.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libssl.a"; then
            echo "$as_me:$LINENO: result: Found libssl.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libssl.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libssl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libssl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lssl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libssl.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libssl.a" >&5
echo "${ECHO_T}Did not find libssl.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libssl.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libssl.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libssl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libssl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lssl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libssl.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lssl $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libssl.a" -o -f "$_CHECK_PATH_/libssl.so" \
	                 -o -f "$_CHECK_PATH_/libssl.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lssl

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



if test "$HAVE_LIB_SSL"; then
  DEF_SSL="#define HAVE_SSL 1"
fi

if test "$with_ssl" && test ! "$DEF_SSL"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the SSL components is missing." >&5
echo "$as_me: error: One or more of the SSL components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi





##  --  search for crypto  -----------------------------------------------

dirs="$with_crypto $SCI_LAB_TP_LIBS"


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   crypto"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for crypto) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for crypto) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes crypto (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo crypto | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libcrypto.so and libcrypto.a" >&5
echo $ECHO_N "checking for both libcrypto.so and libcrypto.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lcrypto" >&5
echo $ECHO_N "checking for -lcrypto... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lcrypto" >&5
echo $ECHO_N "checking for main in -lcrypto... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libcrypto.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libcrypto.a"; then
            echo "$as_me:$LINENO: result: Found libcrypto.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libcrypto.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libcrypto.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libcrypto.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lcrypto

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libcrypto.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libcrypto.a" >&5
echo "${ECHO_T}Did not find libcrypto.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libcrypto.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libcrypto.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libcrypto.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libcrypto.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lcrypto

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libcrypto.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lcrypto $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libcrypto.a" -o -f "$_CHECK_PATH_/libcrypto.so" \
	                 -o -f "$_CHECK_PATH_/libcrypto.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lcrypto

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



if test "$HAVE_LIB_CRYPTO"; then
  DEF_CRYPTO="#define HAVE_CRYPTO 1"
fi

if test "$with_crypto" && test ! "$DEF_CRYPTO"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the CRYPTO components is missing." >&5
echo "$as_me: error: One or more of the CRYPTO components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi





##  --  search for SGI'S traceback library  ------------------------------

dirs="$with_exc $SCI_LAB_TP_LIBS"


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   exc"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for exc) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for exc) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes exc (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo exc | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libexc.so and libexc.a" >&5
echo $ECHO_N "checking for both libexc.so and libexc.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lexc" >&5
echo $ECHO_N "checking for -lexc... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lexc" >&5
echo $ECHO_N "checking for main in -lexc... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libexc.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libexc.a"; then
            echo "$as_me:$LINENO: result: Found libexc.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libexc.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libexc.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libexc.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lexc

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libexc.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libexc.a" >&5
echo "${ECHO_T}Did not find libexc.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libexc.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libexc.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libexc.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libexc.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lexc

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libexc.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lexc $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libexc.a" -o -f "$_CHECK_PATH_/libexc.so" \
	                 -o -f "$_CHECK_PATH_/libexc.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lexc

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_EXC/../include"
       echo "   headers:     libexc.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_EXC/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="libexc.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for libexc.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for libexc.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



if test "$HAVE_LIB_EXC" && test "$HAVE_LIBEXC_H"; then
  TRACEBACK_LIB=-lexc
  DEF_EXC="#define HAVE_EXC 1"
fi

if test "$with_exc" && test ! "$DEF_EXC"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the EXC components is missing." >&5
echo "$as_me: error: One or more of the EXC components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi





##  --  globus nexus  ----------------------------------------------------

if test "$with_globus"; then
  dirs="$with_globus/lib $SCI_LAB_TP_LIBS"
else
  dirs="$SCI_LAB_TP_LIBS"
fi

MISC_LIB_FLAG="$SSL_LIB_DIR_FLAG $SSL_LIB_FLAG $CRYPTO_LIB_DIR_FLAG $CRYPTO_LIB_FLAG"


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   globus_dc"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for globus_dc) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for globus_dc) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes globus_dc (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo globus_dc | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libglobus_dc.so and libglobus_dc.a" >&5
echo $ECHO_N "checking for both libglobus_dc.so and libglobus_dc.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lglobus_dc" >&5
echo $ECHO_N "checking for -lglobus_dc... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lglobus_dc" >&5
echo $ECHO_N "checking for main in -lglobus_dc... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libglobus_dc.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libglobus_dc.a"; then
            echo "$as_me:$LINENO: result: Found libglobus_dc.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_dc.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_dc.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_dc.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_dc

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_dc.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libglobus_dc.a" >&5
echo "${ECHO_T}Did not find libglobus_dc.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libglobus_dc.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libglobus_dc.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_dc.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_dc.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_dc

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_dc.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lglobus_dc $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libglobus_dc.a" -o -f "$_CHECK_PATH_/libglobus_dc.so" \
	                 -o -f "$_CHECK_PATH_/libglobus_dc.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_dc

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_GLOBUS_DC"
       echo "   lib name:   globus_common"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for globus_common) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for globus_common) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes globus_common (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo globus_common | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libglobus_common.so and libglobus_common.a" >&5
echo $ECHO_N "checking for both libglobus_common.so and libglobus_common.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lglobus_common" >&5
echo $ECHO_N "checking for -lglobus_common... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lglobus_common" >&5
echo $ECHO_N "checking for  in -lglobus_common... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libglobus_common.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libglobus_common.a"; then
            echo "$as_me:$LINENO: result: Found libglobus_common.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_common.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_common.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_common.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_common

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_common.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libglobus_common.a" >&5
echo "${ECHO_T}Did not find libglobus_common.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libglobus_common.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libglobus_common.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_common.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_common.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_common

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_common.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lglobus_common $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libglobus_common.a" -o -f "$_CHECK_PATH_/libglobus_common.so" \
	                 -o -f "$_CHECK_PATH_/libglobus_common.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_common

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_GLOBUS_DC"
       echo "   lib name:   globus_nexus"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for globus_nexus) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for globus_nexus) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes globus_nexus (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo globus_nexus | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libglobus_nexus.so and libglobus_nexus.a" >&5
echo $ECHO_N "checking for both libglobus_nexus.so and libglobus_nexus.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lglobus_nexus" >&5
echo $ECHO_N "checking for -lglobus_nexus... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lglobus_nexus" >&5
echo $ECHO_N "checking for  in -lglobus_nexus... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libglobus_nexus.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libglobus_nexus.a"; then
            echo "$as_me:$LINENO: result: Found libglobus_nexus.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_nexus.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_nexus.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_nexus.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_nexus

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_nexus.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libglobus_nexus.a" >&5
echo "${ECHO_T}Did not find libglobus_nexus.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libglobus_nexus.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libglobus_nexus.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_nexus.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_nexus.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_nexus

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_nexus.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lglobus_nexus $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libglobus_nexus.a" -o -f "$_CHECK_PATH_/libglobus_nexus.so" \
	                 -o -f "$_CHECK_PATH_/libglobus_nexus.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_nexus

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi




    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_GLOBUS_DC/../include"
       echo "   headers:     globus_nexus.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="globus_nexus.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for globus_nexus.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for globus_nexus.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



if test "$HAVE_LIB_GLOBUS_DC" &&
   test "$HAVE_LIB_GLOBUS_COMMON" &&
   test "$HAVE_LIB_GLOBUS_NEXUS" &&
   test "$INC_GLOBUS_NEXUS_H"; then
  DEF_GLOBUS="#define HAVE_GLOBUS 1"
  HAVE_GLOBUS="$HAVE_LIB_GLOBUS_DC"
  GLOBUS_LIB_FLAG="$GLOBUS_NEXUS_LIB_FLAG $GLOBUS_DC_LIB_FLAG $GLOBUS_COMMON_LIB_FLAG"
  GLOBUS_LIB_DIR_FLAG="$GLOBUS_DC_LIB_DIR_FLAG"

  INC_GLOBUS_H="$INC_GLOBUS_NEXUS_H"
fi

if test "$with_globus" && test ! "$DEF_GLOBUS"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the GLOBUS components is missing." >&5
echo "$as_me: error: One or more of the GLOBUS components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_GLOBUS_DC"
       echo "   lib name:   globus_io"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for globus_io) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for globus_io) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes globus_io (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo globus_io | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libglobus_io.so and libglobus_io.a" >&5
echo $ECHO_N "checking for both libglobus_io.so and libglobus_io.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lglobus_io" >&5
echo $ECHO_N "checking for -lglobus_io... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lglobus_io" >&5
echo $ECHO_N "checking for  in -lglobus_io... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libglobus_io.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libglobus_io.a"; then
            echo "$as_me:$LINENO: result: Found libglobus_io.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_io.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_io.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_io.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_io

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_io.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libglobus_io.a" >&5
echo "${ECHO_T}Did not find libglobus_io.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libglobus_io.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libglobus_io.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_io.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_io.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_io

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_io.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lglobus_io $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libglobus_io.a" -o -f "$_CHECK_PATH_/libglobus_io.so" \
	                 -o -f "$_CHECK_PATH_/libglobus_io.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_io

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



if test "$is_linux" = "linux"; then

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_GLOBUS_DC"
       echo "   lib name:   globus_utp"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for globus_utp) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for globus_utp) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes globus_utp (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo globus_utp | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libglobus_utp.so and libglobus_utp.a" >&5
echo $ECHO_N "checking for both libglobus_utp.so and libglobus_utp.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lglobus_utp" >&5
echo $ECHO_N "checking for -lglobus_utp... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lglobus_utp" >&5
echo $ECHO_N "checking for  in -lglobus_utp... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libglobus_utp.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libglobus_utp.a"; then
            echo "$as_me:$LINENO: result: Found libglobus_utp.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_utp.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_utp.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_utp.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_utp

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_utp.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libglobus_utp.a" >&5
echo "${ECHO_T}Did not find libglobus_utp.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libglobus_utp.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libglobus_utp.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_utp.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_utp.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_utp

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_utp.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lglobus_utp $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libglobus_utp.a" -o -f "$_CHECK_PATH_/libglobus_utp.so" \
	                 -o -f "$_CHECK_PATH_/libglobus_utp.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_utp

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_GLOBUS_DC"
       echo "   lib name:   globus_mp"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for globus_mp) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for globus_mp) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes globus_mp (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo globus_mp | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libglobus_mp.so and libglobus_mp.a" >&5
echo $ECHO_N "checking for both libglobus_mp.so and libglobus_mp.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lglobus_mp" >&5
echo $ECHO_N "checking for -lglobus_mp... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lglobus_mp" >&5
echo $ECHO_N "checking for  in -lglobus_mp... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libglobus_mp.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libglobus_mp.a"; then
            echo "$as_me:$LINENO: result: Found libglobus_mp.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_mp.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_mp.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_mp.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_mp

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_mp.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libglobus_mp.a" >&5
echo "${ECHO_T}Did not find libglobus_mp.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libglobus_mp.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libglobus_mp.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_mp.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_mp.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_mp

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_mp.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lglobus_mp $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libglobus_mp.a" -o -f "$_CHECK_PATH_/libglobus_mp.so" \
	                 -o -f "$_CHECK_PATH_/libglobus_mp.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_mp

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_GLOBUS_DC"
       echo "   lib name:   globus_gss_assist"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for globus_gss_assist) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for globus_gss_assist) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes globus_gss_assist (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo globus_gss_assist | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libglobus_gss_assist.so and libglobus_gss_assist.a" >&5
echo $ECHO_N "checking for both libglobus_gss_assist.so and libglobus_gss_assist.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lglobus_gss_assist" >&5
echo $ECHO_N "checking for -lglobus_gss_assist... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lglobus_gss_assist" >&5
echo $ECHO_N "checking for  in -lglobus_gss_assist... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libglobus_gss_assist.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libglobus_gss_assist.a"; then
            echo "$as_me:$LINENO: result: Found libglobus_gss_assist.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_gss_assist.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_gss_assist.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_gss_assist.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_gss_assist

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_gss_assist.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libglobus_gss_assist.a" >&5
echo "${ECHO_T}Did not find libglobus_gss_assist.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libglobus_gss_assist.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libglobus_gss_assist.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_gss_assist.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_gss_assist.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_gss_assist

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_gss_assist.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lglobus_gss_assist $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libglobus_gss_assist.a" -o -f "$_CHECK_PATH_/libglobus_gss_assist.so" \
	                 -o -f "$_CHECK_PATH_/libglobus_gss_assist.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_gss_assist

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_GLOBUS_DC"
       echo "   lib name:   globus_gss"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for globus_gss) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for globus_gss) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes globus_gss (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo globus_gss | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libglobus_gss.so and libglobus_gss.a" >&5
echo $ECHO_N "checking for both libglobus_gss.so and libglobus_gss.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lglobus_gss" >&5
echo $ECHO_N "checking for -lglobus_gss... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lglobus_gss" >&5
echo $ECHO_N "checking for  in -lglobus_gss... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libglobus_gss.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libglobus_gss.a"; then
            echo "$as_me:$LINENO: result: Found libglobus_gss.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_gss.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_gss.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_gss.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_gss

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_gss.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libglobus_gss.a" >&5
echo "${ECHO_T}Did not find libglobus_gss.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libglobus_gss.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libglobus_gss.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_gss.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_gss.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_gss

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_gss.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lglobus_gss $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libglobus_gss.a" -o -f "$_CHECK_PATH_/libglobus_gss.so" \
	                 -o -f "$_CHECK_PATH_/libglobus_gss.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_gss

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_GLOBUS_DC"
       echo "   lib name:   globus_gaa"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for globus_gaa) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for globus_gaa) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes globus_gaa (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo globus_gaa | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libglobus_gaa.so and libglobus_gaa.a" >&5
echo $ECHO_N "checking for both libglobus_gaa.so and libglobus_gaa.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lglobus_gaa" >&5
echo $ECHO_N "checking for -lglobus_gaa... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lglobus_gaa" >&5
echo $ECHO_N "checking for  in -lglobus_gaa... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libglobus_gaa.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libglobus_gaa.a"; then
            echo "$as_me:$LINENO: result: Found libglobus_gaa.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_gaa.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_gaa.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_gaa.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_gaa

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_gaa.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libglobus_gaa.a" >&5
echo "${ECHO_T}Did not find libglobus_gaa.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libglobus_gaa.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libglobus_gaa.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libglobus_gaa.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libglobus_gaa.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_gaa

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libglobus_gaa.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_GLOBUS_DC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lglobus_gaa $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libglobus_gaa.a" -o -f "$_CHECK_PATH_/libglobus_gaa.so" \
	                 -o -f "$_CHECK_PATH_/libglobus_gaa.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lglobus_gaa

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



  GLOBUS_EXTRA_LIB_FLAG="$GLOBUS_GAA_LIB_FLAG $GLOBUS_GSS_LIB_FLAG $GLOBUS_GSS_ASSIST_LIB_FLAG $GLOBUS_MP_LIB_FLAG $GLOBUS_UTP_LIB_FLAG $MISC_LIB_FLAG"
fi












##  --  search for Qt  ----------------------------------------------------

if test "$with_qt"; then
  dirs="$with_qt/lib $SCI_LAB_TP_LIBS"
else
  dirs="$SCI_LAB_TP_LIBS"
fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   qt-mt"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for qt-mt) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for qt-mt) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes qt-mt (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo qt-mt | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libqt-mt.so and libqt-mt.a" >&5
echo $ECHO_N "checking for both libqt-mt.so and libqt-mt.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lqt-mt" >&5
echo $ECHO_N "checking for -lqt-mt... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lqt-mt" >&5
echo $ECHO_N "checking for main in -lqt-mt... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libqt-mt.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libqt-mt.a"; then
            echo "$as_me:$LINENO: result: Found libqt-mt.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libqt-mt.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libqt-mt.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libqt-mt.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lqt-mt

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libqt-mt.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libqt-mt.a" >&5
echo "${ECHO_T}Did not find libqt-mt.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libqt-mt.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libqt-mt.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libqt-mt.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libqt-mt.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lqt-mt

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libqt-mt.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lqt-mt $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libqt-mt.a" -o -f "$_CHECK_PATH_/libqt-mt.so" \
	                 -o -f "$_CHECK_PATH_/libqt-mt.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lqt-mt

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



QT_MOC_BIN=""
{ echo "$as_me:$LINENO: checking for moc in $LIB_DIR_QT_MT/../bin..." >&5
echo "$as_me: checking for moc in $LIB_DIR_QT_MT/../bin..." >&6;}
# Extract the first word of "moc", so it can be a program name with args.
set dummy moc; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_QT_MOC_BIN+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$QT_MOC_BIN"; then
  ac_cv_prog_QT_MOC_BIN="$QT_MOC_BIN" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $LIB_DIR_QT_MT/../bin
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_QT_MOC_BIN="$ac_dir/moc"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

  test -z "$ac_cv_prog_QT_MOC_BIN" && ac_cv_prog_QT_MOC_BIN="NOMOC"
fi
fi
QT_MOC_BIN=$ac_cv_prog_QT_MOC_BIN
if test -n "$QT_MOC_BIN"; then
  echo "$as_me:$LINENO: result: $QT_MOC_BIN" >&5
echo "${ECHO_T}$QT_MOC_BIN" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi


if test "$HAVE_LIB_QT_MT" && test $QT_MOC_BIN != "NOMOC"; then
   DEF_QT="#define HAVE_QT 1"
   HAVE_QT="yes"
fi

if test "$with_qt" && test ! "$DEF_QT"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the QT components is missing." >&5
echo "$as_me: error: One or more of the QT components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi







##  --  search for Babel  ----------------------------------------------------

if test "$with_babel"; then
  dirs="$with_babel/lib $SCI_LAB_TP_LIBS"
else
  dirs="$SCI_LAB_TP_LIBS"
fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   sidl"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for sidl) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for sidl) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes sidl (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo sidl | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libsidl.so and libsidl.a" >&5
echo $ECHO_N "checking for both libsidl.so and libsidl.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lsidl" >&5
echo $ECHO_N "checking for -lsidl... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lsidl" >&5
echo $ECHO_N "checking for main in -lsidl... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libsidl.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libsidl.a"; then
            echo "$as_me:$LINENO: result: Found libsidl.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libsidl.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libsidl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libsidl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lsidl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libsidl.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libsidl.a" >&5
echo "${ECHO_T}Did not find libsidl.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libsidl.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libsidl.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libsidl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libsidl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lsidl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libsidl.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lsidl $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libsidl.a" -o -f "$_CHECK_PATH_/libsidl.so" \
	                 -o -f "$_CHECK_PATH_/libsidl.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lsidl

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



BABEL_BIN=""
{ echo "$as_me:$LINENO: checking for babel in $LIB_DIR_SIDL/../bin..." >&5
echo "$as_me: checking for babel in $LIB_DIR_SIDL/../bin..." >&6;}
# Extract the first word of "babel", so it can be a program name with args.
set dummy babel; ac_word=$2
echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
if test "${ac_cv_prog_BABEL_BIN+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$BABEL_BIN"; then
  ac_cv_prog_BABEL_BIN="$BABEL_BIN" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $LIB_DIR_SIDL/../bin
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_BABEL_BIN="$ac_dir/babel"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done

  test -z "$ac_cv_prog_BABEL_BIN" && ac_cv_prog_BABEL_BIN="NONE"
fi
fi
BABEL_BIN=$ac_cv_prog_BABEL_BIN
if test -n "$BABEL_BIN"; then
  echo "$as_me:$LINENO: result: $BABEL_BIN" >&5
echo "${ECHO_T}$BABEL_BIN" >&6
else
  echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
fi


if test "$HAVE_LIB_SIDL" && test $BABEL_BIN != "NONE"; then
   DEF_BABEL="#define HAVE_BABEL 1"
   HAVE_BABEL="yes"
fi


    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_SIDL/../include"
       echo "   headers:     SIDL.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_SIDL/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="SIDL.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for SIDL.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for SIDL.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



if test "$with_babel" && test ! "$DEF_BABEL"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the Babel components is missing." >&5
echo "$as_me: error: One or more of the Babel components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi








##  --  search for VDT  ----------------------------------------------------

if test "$pkg_vdt" = "yes"; then
  for i in $with_vdt $SCI_LAB_TP_DEFAULT; do
    if test ! -d "$i"; then
      continue
    fi

    #from here we should find src/vdt/bin
    if test ! -d "$i/src/vdt/bin"; then
      continue
    fi

    guess=`sh $i/src/vdt/bin/config.guess`
    ad=`sh $i/src/vdt/bin/config.sub $guess`

    #this is where the lib actually lives
    if test ! -d "$i/src/vdt/VDT/lib/$ad"; then
      continue
    fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $i/src/vdt/Elixir/lib/$ad"
       echo "   lib name:   esi"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for esi) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for esi) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes esi (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo esi | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libesi.so and libesi.a" >&5
echo $ECHO_N "checking for both libesi.so and libesi.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lesi" >&5
echo $ECHO_N "checking for -lesi... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lesi" >&5
echo $ECHO_N "checking for  in -lesi... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$i/src/vdt/Elixir/lib/$ad /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libesi.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libesi.a"; then
            echo "$as_me:$LINENO: result: Found libesi.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libesi.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libesi.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libesi.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lesi

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libesi.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libesi.a" >&5
echo "${ECHO_T}Did not find libesi.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libesi.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libesi.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libesi.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libesi.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lesi

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libesi.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$i/src/vdt/Elixir/lib/$ad NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lesi $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libesi.a" -o -f "$_CHECK_PATH_/libesi.so" \
	                 -o -f "$_CHECK_PATH_/libesi.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lesi

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $i/src/vdt/Elixir/lib/$ad"
       echo "   lib name:   elixir"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for elixir) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for elixir) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes elixir (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo elixir | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libelixir.so and libelixir.a" >&5
echo $ECHO_N "checking for both libelixir.so and libelixir.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lelixir" >&5
echo $ECHO_N "checking for -lelixir... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lelixir" >&5
echo $ECHO_N "checking for  in -lelixir... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$i/src/vdt/Elixir/lib/$ad /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libelixir.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libelixir.a"; then
            echo "$as_me:$LINENO: result: Found libelixir.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libelixir.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libelixir.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libelixir.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lelixir

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libelixir.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libelixir.a" >&5
echo "${ECHO_T}Did not find libelixir.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libelixir.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libelixir.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libelixir.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libelixir.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lelixir

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libelixir.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$i/src/vdt/Elixir/lib/$ad NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lelixir $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libelixir.a" -o -f "$_CHECK_PATH_/libelixir.so" \
	                 -o -f "$_CHECK_PATH_/libelixir.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lelixir

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $i/src/vdt/lp_solve_2.2/$ad"
       echo "   lib name:   lpk"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for lpk) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for lpk) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes lpk (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo lpk | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both liblpk.so and liblpk.a" >&5
echo $ECHO_N "checking for both liblpk.so and liblpk.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -llpk" >&5
echo $ECHO_N "checking for -llpk... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -llpk" >&5
echo $ECHO_N "checking for  in -llpk... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$i/src/vdt/lp_solve_2.2/$ad /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for liblpk.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/liblpk.a"; then
            echo "$as_me:$LINENO: result: Found liblpk.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblpk.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liblpk.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblpk.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-llpk

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liblpk.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find liblpk.a" >&5
echo "${ECHO_T}Did not find liblpk.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for liblpk.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/liblpk.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liblpk.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblpk.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-llpk

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liblpk.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$i/src/vdt/lp_solve_2.2/$ad NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -llpk $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/liblpk.a" -o -f "$_CHECK_PATH_/liblpk.so" \
	                 -o -f "$_CHECK_PATH_/liblpk.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-llpk

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $i/src/vdt/PiRaT/lib/$ad"
       echo "   lib name:   pirat"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for pirat) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for pirat) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes pirat (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo pirat | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpirat.so and libpirat.a" >&5
echo $ECHO_N "checking for both libpirat.so and libpirat.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpirat" >&5
echo $ECHO_N "checking for -lpirat... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lpirat" >&5
echo $ECHO_N "checking for  in -lpirat... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$i/src/vdt/PiRaT/lib/$ad /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpirat.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpirat.a"; then
            echo "$as_me:$LINENO: result: Found libpirat.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpirat.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpirat.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpirat.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpirat

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpirat.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpirat.a" >&5
echo "${ECHO_T}Did not find libpirat.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpirat.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpirat.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpirat.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpirat.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpirat

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpirat.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$i/src/vdt/PiRaT/lib/$ad NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpirat $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpirat.a" -o -f "$_CHECK_PATH_/libpirat.so" \
	                 -o -f "$_CHECK_PATH_/libpirat.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpirat

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $i/src/vdt/LOBS/lib/$ad"
       echo "   lib name:   lobs3d"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for lobs3d) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for lobs3d) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes lobs3d (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo lobs3d | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both liblobs3d.so and liblobs3d.a" >&5
echo $ECHO_N "checking for both liblobs3d.so and liblobs3d.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -llobs3d" >&5
echo $ECHO_N "checking for -llobs3d... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -llobs3d" >&5
echo $ECHO_N "checking for  in -llobs3d... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$i/src/vdt/LOBS/lib/$ad /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for liblobs3d.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/liblobs3d.a"; then
            echo "$as_me:$LINENO: result: Found liblobs3d.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblobs3d.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liblobs3d.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblobs3d.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-llobs3d

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liblobs3d.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find liblobs3d.a" >&5
echo "${ECHO_T}Did not find liblobs3d.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for liblobs3d.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/liblobs3d.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liblobs3d.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblobs3d.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-llobs3d

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liblobs3d.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$i/src/vdt/LOBS/lib/$ad NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -llobs3d $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/liblobs3d.a" -o -f "$_CHECK_PATH_/liblobs3d.so" \
	                 -o -f "$_CHECK_PATH_/liblobs3d.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-llobs3d

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $i/src/vdt/LOBS/lib/$ad"
       echo "   lib name:   lobs2d"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for lobs2d) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for lobs2d) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes lobs2d (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo lobs2d | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both liblobs2d.so and liblobs2d.a" >&5
echo $ECHO_N "checking for both liblobs2d.so and liblobs2d.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -llobs2d" >&5
echo $ECHO_N "checking for -llobs2d... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -llobs2d" >&5
echo $ECHO_N "checking for  in -llobs2d... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$i/src/vdt/LOBS/lib/$ad /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for liblobs2d.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/liblobs2d.a"; then
            echo "$as_me:$LINENO: result: Found liblobs2d.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblobs2d.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liblobs2d.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblobs2d.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-llobs2d

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liblobs2d.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find liblobs2d.a" >&5
echo "${ECHO_T}Did not find liblobs2d.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for liblobs2d.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/liblobs2d.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liblobs2d.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblobs2d.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-llobs2d

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liblobs2d.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$i/src/vdt/LOBS/lib/$ad NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -llobs2d $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/liblobs2d.a" -o -f "$_CHECK_PATH_/liblobs2d.so" \
	                 -o -f "$_CHECK_PATH_/liblobs2d.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-llobs2d

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $i/src/vdt/LOBS/lib/$ad"
       echo "   lib name:   lobs1d"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for lobs1d) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for lobs1d) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes lobs1d (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo lobs1d | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both liblobs1d.so and liblobs1d.a" >&5
echo $ECHO_N "checking for both liblobs1d.so and liblobs1d.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -llobs1d" >&5
echo $ECHO_N "checking for -llobs1d... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -llobs1d" >&5
echo $ECHO_N "checking for  in -llobs1d... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$i/src/vdt/LOBS/lib/$ad /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for liblobs1d.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/liblobs1d.a"; then
            echo "$as_me:$LINENO: result: Found liblobs1d.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblobs1d.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liblobs1d.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblobs1d.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-llobs1d

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liblobs1d.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find liblobs1d.a" >&5
echo "${ECHO_T}Did not find liblobs1d.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for liblobs1d.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/liblobs1d.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liblobs1d.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblobs1d.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-llobs1d

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liblobs1d.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$i/src/vdt/LOBS/lib/$ad NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -llobs1d $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/liblobs1d.a" -o -f "$_CHECK_PATH_/liblobs1d.so" \
	                 -o -f "$_CHECK_PATH_/liblobs1d.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-llobs1d

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $i/src/vdt/G3D/lib/$ad"
       echo "   lib name:   g3d"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for g3d) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for g3d) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes g3d (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo g3d | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libg3d.so and libg3d.a" >&5
echo $ECHO_N "checking for both libg3d.so and libg3d.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lg3d" >&5
echo $ECHO_N "checking for -lg3d... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lg3d" >&5
echo $ECHO_N "checking for  in -lg3d... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$i/src/vdt/G3D/lib/$ad /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libg3d.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libg3d.a"; then
            echo "$as_me:$LINENO: result: Found libg3d.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libg3d.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libg3d.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libg3d.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lg3d

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libg3d.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libg3d.a" >&5
echo "${ECHO_T}Did not find libg3d.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libg3d.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libg3d.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libg3d.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libg3d.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lg3d

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libg3d.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$i/src/vdt/G3D/lib/$ad NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lg3d $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libg3d.a" -o -f "$_CHECK_PATH_/libg3d.so" \
	                 -o -f "$_CHECK_PATH_/libg3d.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lg3d

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $i/src/vdt/Ckit/lib/$ad"
       echo "   lib name:   ckit"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for ckit) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for ckit) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes ckit (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo ckit | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libckit.so and libckit.a" >&5
echo $ECHO_N "checking for both libckit.so and libckit.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lckit" >&5
echo $ECHO_N "checking for -lckit... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lckit" >&5
echo $ECHO_N "checking for  in -lckit... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$i/src/vdt/Ckit/lib/$ad /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libckit.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libckit.a"; then
            echo "$as_me:$LINENO: result: Found libckit.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libckit.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libckit.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libckit.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lckit

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libckit.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libckit.a" >&5
echo "${ECHO_T}Did not find libckit.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libckit.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libckit.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libckit.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libckit.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lckit

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libckit.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$i/src/vdt/Ckit/lib/$ad NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lckit $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libckit.a" -o -f "$_CHECK_PATH_/libckit.so" \
	                 -o -f "$_CHECK_PATH_/libckit.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lckit

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $i/src/vdt/Meschach/$ad"
       echo "   lib name:   meschach"
       echo "   function:   "
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for meschach) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for meschach) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes meschach (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo meschach | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z ""; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libmeschach.so and libmeschach.a" >&5
echo $ECHO_N "checking for both libmeschach.so and libmeschach.a... $ECHO_C" >&6
    else
      if test "" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lmeschach" >&5
echo $ECHO_N "checking for -lmeschach... $ECHO_C" >&6
      else
        _SCI_DECL_="char ();"
        _SCI_CALL_="();"

        echo "$as_me:$LINENO: checking for  in -lmeschach" >&5
echo $ECHO_N "checking for  in -lmeschach... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z ""; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$i/src/vdt/Meschach/$ad /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libmeschach.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libmeschach.a"; then
            echo "$as_me:$LINENO: result: Found libmeschach.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmeschach.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmeschach.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmeschach.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmeschach

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmeschach.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libmeschach.a" >&5
echo "${ECHO_T}Did not find libmeschach.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libmeschach.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libmeschach.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libmeschach.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libmeschach.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lmeschach

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libmeschach.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$i/src/vdt/Meschach/$ad NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lmeschach $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libmeschach.a" -o -f "$_CHECK_PATH_/libmeschach.so" \
	                 -o -f "$_CHECK_PATH_/libmeschach.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lmeschach

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test ""; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi




    MISC_LIB_FLAG="$ESI_LIB_FLAG $ELIXIR_LIB_FLAG $LPK_LIB_FLAG $PIRAT_LIB_FLAG $LOBS3D_LIB_FLAG $LOBS2D_LIB_FLAG $LOBS1D_LIB_FLAG $G3D_LIB_FLAG $CKIT_LIB_FLAG $MESCHACH_LIB_FLAG $X11_LIB_FLAG $XEXT_LIB_FLAG $XAW_LIB_FLAG $XT_LIB_FLAG $XMU_LIB_FLAG $M_LIB_FLAG $LEX_LIB_FLAG"

    MISC_LIB_DIR_FLAG="$ESI_LIB_DIR_FLAG $ELIXIR_LIB_DIR_FLAG $LPK_LIB_DIR_FLAG $PIRAT_LIB_DIR_FLAG $LOBS3D_LIB_DIR_FLAG $LOBS2D_LIB_DIR_FLAG $LOBS1D_LIB_DIR_FLAG $G3D_LIB_DIR_FLAG $CKIT_LIB_DIR_FLAG $MESCHACH_LIB_DIR_FLAG $X11_LIB_DIR_FLAG"


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $i/src/vdt/VDT/lib/$ad"
       echo "   lib name:   vdt"
       echo "   function:   VDT_triangulate"
       echo "   other-libs: $MISC_LIB_DIR_FLAG $MISC_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for vdt) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for vdt) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes vdt (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo vdt | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "VDT_triangulate"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libvdt.so and libvdt.a" >&5
echo $ECHO_N "checking for both libvdt.so and libvdt.a... $ECHO_C" >&6
    else
      if test "VDT_triangulate" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lvdt" >&5
echo $ECHO_N "checking for -lvdt... $ECHO_C" >&6
      else
        _SCI_DECL_="char VDT_triangulate();"
        _SCI_CALL_="VDT_triangulate();"

        echo "$as_me:$LINENO: checking for VDT_triangulate in -lvdt" >&5
echo $ECHO_N "checking for VDT_triangulate in -lvdt... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$MISC_LIB_DIR_FLAG $MISC_LIB_FLAG"

    if test -z "VDT_triangulate"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$i/src/vdt/VDT/lib/$ad /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libvdt.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libvdt.a"; then
            echo "$as_me:$LINENO: result: Found libvdt.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libvdt.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libvdt.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libvdt.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lvdt

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libvdt.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libvdt.a" >&5
echo "${ECHO_T}Did not find libvdt.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libvdt.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libvdt.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libvdt.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libvdt.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lvdt

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libvdt.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$i/src/vdt/VDT/lib/$ad NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lvdt $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libvdt.a" -o -f "$_CHECK_PATH_/libvdt.so" \
	                 -o -f "$_CHECK_PATH_/libvdt.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lvdt

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "VDT_triangulate"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


    if test -e "$LIB_DIR_VDT/../../src/vdt.h"; then
      HAVE_VDT_H="yes"
      INC_VDT_H="-I$LIB_DIR_VDT/../../src"
      echo "checking for vdt.h... $LIB_DIR_VDT/../../src"
    else
      echo "checking for vdt.h... no"
    fi

    if test "$HAVE_LIB_VDT" && test "$HAVE_VDT_H"; then
      DEF_VDT="#define HAVE_VDT 1"
      VDT_EXTRA_LIB_FLAG="$MISC_LIB_FLAG"
      VDT_EXTRA_LIB_DIR_FLAG="$MISC_LIB_DIR_FLAG"
      break
    fi
  done

  if test "$with_vdt" && test ! "$DEF_VDT"; then
    echo
    { { echo "$as_me:$LINENO: error: One or more of the VDT components is missing." >&5
echo "$as_me: error: One or more of the VDT components is missing." >&2;}
   { (exit 1); exit 1; }; }
    echo
  fi
fi









##  --  search for ImageMagick --------------------------------------

for i in $with_imagemagick $SCI_LAB_TP_DEFAULT; do
  if test ! -d "$i"; then
    continue
  fi

  #this is where the lib actually lives
  if test ! -d "$i/lib"; then
    continue
  fi

  #this is where the scripts for configuration live
  if test ! -d "$i/bin"; then
    continue
  fi

  # capture in the libs to link
  if test -e $i/bin/Magick-config; then
    IM_LDFLAGS=`$i/bin/Magick-config --ldflags`
    IM_LIBS=`$i/bin/Magick-config --libs`
  else
    continue
  fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $i/lib"
       echo "   lib name:   Magick"
       echo "   function:   WriteImage"
       echo "   other-libs: $IM_LDFLAGS $IM_LIBS"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for Magick) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for Magick) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes Magick (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo Magick | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "WriteImage"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libMagick.so and libMagick.a" >&5
echo $ECHO_N "checking for both libMagick.so and libMagick.a... $ECHO_C" >&6
    else
      if test "WriteImage" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lMagick" >&5
echo $ECHO_N "checking for -lMagick... $ECHO_C" >&6
      else
        _SCI_DECL_="char WriteImage();"
        _SCI_CALL_="WriteImage();"

        echo "$as_me:$LINENO: checking for WriteImage in -lMagick" >&5
echo $ECHO_N "checking for WriteImage in -lMagick... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$IM_LDFLAGS $IM_LIBS"

    if test -z "WriteImage"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$i/lib /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libMagick.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libMagick.a"; then
            echo "$as_me:$LINENO: result: Found libMagick.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libMagick.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libMagick.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libMagick.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lMagick

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libMagick.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libMagick.a" >&5
echo "${ECHO_T}Did not find libMagick.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libMagick.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libMagick.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libMagick.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libMagick.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lMagick

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libMagick.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$i/lib NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lMagick $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libMagick.a" -o -f "$_CHECK_PATH_/libMagick.so" \
	                 -o -f "$_CHECK_PATH_/libMagick.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lMagick

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "WriteImage"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_MAGICK/../include"
       echo "   headers:     magick/magick.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_MAGICK/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="magick/magick.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for magick/magick.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for magick/magick.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



  if test "$HAVE_LIB_MAGICK" && test HAVE_MAGICK_MAGICK_H; then
    DEF_MAGICK="#define HAVE_MAGICK 1"
    INC_MAGICK_H="$INC_MAGICK_MAGICK_H"
    MAGICK_EXTRA_LIB_FLAG="$IM_LDFLAGS"
    MAGICK_EXTRA_LIB_DIR_FLAG="$IM_LIBS"
    break
  fi
done

if test "$with_imagemagick" && test ! "$DEF_MAGICK"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the VDT components is missing." >&5
echo "$as_me: error: One or more of the VDT components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi








##  --  search for gzopen (and related)  ----------------------------------

if test "$with_zlib"; then
  dirs="$with_zlib/lib $SCI_LAB_TP_LIBS"
else
  dirs="$SCI_LAB_TP_LIBS"
fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   z"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   not-optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="not-optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for z) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for z) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes z (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo z | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libz.so and libz.a" >&5
echo $ECHO_N "checking for both libz.so and libz.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lz" >&5
echo $ECHO_N "checking for -lz... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lz" >&5
echo $ECHO_N "checking for main in -lz... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libz.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libz.a"; then
            echo "$as_me:$LINENO: result: Found libz.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libz.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libz.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libz.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lz

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libz.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libz.a" >&5
echo "${ECHO_T}Did not find libz.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libz.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libz.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libz.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libz.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lz

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libz.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lz $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libz.a" -o -f "$_CHECK_PATH_/libz.so" \
	                 -o -f "$_CHECK_PATH_/libz.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lz

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_Z/../include"
       echo "   headers:     zlib.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_Z/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="zlib.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for zlib.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for zlib.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



if test "$HAVE_LIB_Z" && test "$HAVE_ZLIB_H"; then
   DEF_Z="#define HAVE_ZLIB 1"
fi

if test "$with_zlib" && test ! "$DEF_Z"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the GZOPEN components is missing." >&5
echo "$as_me: error: One or more of the GZOPEN components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi






##  --  search for blas stuff  -------------------------------------------

if test "$with_blas"; then
  dirs="$with_blas/lib $with_blas $SCI_LAB_TP_LIBS"
else
  dirs="$SCI_LAB_TP_LIBS"
fi

case $host in
  *aix*)

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   essl"
       echo "   function:   main"
       echo "   other-libs: $F_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for essl) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for essl) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes essl (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo essl | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libessl.so and libessl.a" >&5
echo $ECHO_N "checking for both libessl.so and libessl.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lessl" >&5
echo $ECHO_N "checking for -lessl... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lessl" >&5
echo $ECHO_N "checking for main in -lessl... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$F_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libessl.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libessl.a"; then
            echo "$as_me:$LINENO: result: Found libessl.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libessl.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libessl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libessl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lessl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libessl.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libessl.a" >&5
echo "${ECHO_T}Did not find libessl.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libessl.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libessl.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libessl.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libessl.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lessl

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libessl.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lessl $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libessl.a" -o -f "$_CHECK_PATH_/libessl.so" \
	                 -o -f "$_CHECK_PATH_/libessl.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lessl

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


     if test "$HAVE_LIB_ESSL"; then
        LIB_DIR_BLAS=$LIB_DIR_ESSL
	HAVE_LIB_BLAS=$HAVE_LIB_ESSL
        BLAS_LIB_FLAG=$ESSL_LIB_FLAG
        BLAS_LIB_DIR_FLAG=$ESSL_LIB_DIR_FLAG
        DEF_BLAS="#define HAVE_BLAS 1"
     fi
     ;;
  *dec*)

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   cxml"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for cxml) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for cxml) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes cxml (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo cxml | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libcxml.so and libcxml.a" >&5
echo $ECHO_N "checking for both libcxml.so and libcxml.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lcxml" >&5
echo $ECHO_N "checking for -lcxml... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lcxml" >&5
echo $ECHO_N "checking for main in -lcxml... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libcxml.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libcxml.a"; then
            echo "$as_me:$LINENO: result: Found libcxml.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libcxml.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libcxml.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libcxml.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lcxml

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libcxml.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libcxml.a" >&5
echo "${ECHO_T}Did not find libcxml.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libcxml.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libcxml.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libcxml.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libcxml.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lcxml

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libcxml.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lcxml $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libcxml.a" -o -f "$_CHECK_PATH_/libcxml.so" \
	                 -o -f "$_CHECK_PATH_/libcxml.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lcxml

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


    if test "$HAVE_LIB_CXML"; then
      { echo "$as_me:$LINENO: WARNING: Using cxml for blas" >&5
echo "$as_me: WARNING: Using cxml for blas" >&2;}
      LIB_DIR_BLAS="$LIB_DIR_CXML"
      HAVE_LIB_BLAS="yes"
      BLAS_LIB_FLAG="$CXML_LIB_FLAG"
      BLAS_LIB_DIR_FLAG="$CXML_LIB_DIR_FLAG"
      DEF_BLAS="#define HAVE_BLAS 1"
    fi
    ;;

  *)

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   blas"
       echo "   function:   main"
       echo "   other-libs: $F_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for blas) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for blas) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes blas (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo blas | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libblas.so and libblas.a" >&5
echo $ECHO_N "checking for both libblas.so and libblas.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lblas" >&5
echo $ECHO_N "checking for -lblas... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lblas" >&5
echo $ECHO_N "checking for main in -lblas... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$F_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libblas.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libblas.a"; then
            echo "$as_me:$LINENO: result: Found libblas.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libblas.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libblas.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libblas.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lblas

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libblas.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libblas.a" >&5
echo "${ECHO_T}Did not find libblas.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libblas.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libblas.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libblas.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libblas.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lblas

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libblas.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lblas $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libblas.a" -o -f "$_CHECK_PATH_/libblas.so" \
	                 -o -f "$_CHECK_PATH_/libblas.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lblas

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


     if test "$HAVE_LIB_BLAS"; then
       DEF_BLAS="#define HAVE_BLAS 1"
     fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   fblas"
       echo "   function:   main"
       echo "   other-libs: $F_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for fblas) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for fblas) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes fblas (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo fblas | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libfblas.so and libfblas.a" >&5
echo $ECHO_N "checking for both libfblas.so and libfblas.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lfblas" >&5
echo $ECHO_N "checking for -lfblas... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lfblas" >&5
echo $ECHO_N "checking for main in -lfblas... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$F_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libfblas.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libfblas.a"; then
            echo "$as_me:$LINENO: result: Found libfblas.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfblas.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libfblas.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfblas.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lfblas

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libfblas.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libfblas.a" >&5
echo "${ECHO_T}Did not find libfblas.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libfblas.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libfblas.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libfblas.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libfblas.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lfblas

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libfblas.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lfblas $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libfblas.a" -o -f "$_CHECK_PATH_/libfblas.so" \
	                 -o -f "$_CHECK_PATH_/libfblas.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lfblas

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


     if test "$HAVE_LIB_FBLAS"; then
	LIB_DIR_BLAS=$LIB_DIR_FBLAS
	HAVE_LIB_BLAS=$HAVE_LIB_FBLAS
	BLAS_LIB_FLAG=$FBLAS_LIB_FLAG
	BLAS_LIB_DIR_FLAG=$FBLAS_LIB_DIR_FLAG
        DEF_BLAS="#define HAVE_BLAS 1"
     fi

     ;;
esac

if test "$with_blas" && test ! "$DEF_BLAS"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the BLAS components is missing." >&5
echo "$as_me: error: One or more of the BLAS components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi





##  --  search for lapack stuff  -----------------------------------------

if test "$HAVE_LIB_F" && test "$HAVE_LIB_BLAS"; then
  if test "$with_lapack"; then
    dirs="$with_lapack/lib $with_lapack $LIB_DIR_BLAS $SCI_LAB_TP_LIBS"
  else
    dirs="$LIB_DIR_BLAS $SCI_LAB_TP_LIBS"
  fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   lapack"
       echo "   function:   main"
       echo "   other-libs: $BLAS_LIB_DIR_FLAG $BLAS_LIB_FLAG $F_LIB_DIR_FLAG $F_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for lapack) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for lapack) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes lapack (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo lapack | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both liblapack.so and liblapack.a" >&5
echo $ECHO_N "checking for both liblapack.so and liblapack.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -llapack" >&5
echo $ECHO_N "checking for -llapack... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -llapack" >&5
echo $ECHO_N "checking for main in -llapack... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$BLAS_LIB_DIR_FLAG $BLAS_LIB_FLAG $F_LIB_DIR_FLAG $F_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for liblapack.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/liblapack.a"; then
            echo "$as_me:$LINENO: result: Found liblapack.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblapack.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liblapack.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblapack.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-llapack

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liblapack.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find liblapack.a" >&5
echo "${ECHO_T}Did not find liblapack.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for liblapack.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/liblapack.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found liblapack.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found liblapack.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-llapack

          if test "$debugging" = "yes"; then
            echo "FOUND IT (liblapack.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -llapack $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/liblapack.a" -o -f "$_CHECK_PATH_/liblapack.so" \
	                 -o -f "$_CHECK_PATH_/liblapack.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-llapack

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


  if test ! "$HAVE_LIB_LAPACK"; then

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   complib.sgimath"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for complib.sgimath) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for complib.sgimath) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes complib.sgimath (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo complib.sgimath | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libcomplib.sgimath.so and libcomplib.sgimath.a" >&5
echo $ECHO_N "checking for both libcomplib.sgimath.so and libcomplib.sgimath.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lcomplib.sgimath" >&5
echo $ECHO_N "checking for -lcomplib.sgimath... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lcomplib.sgimath" >&5
echo $ECHO_N "checking for main in -lcomplib.sgimath... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libcomplib.sgimath.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libcomplib.sgimath.a"; then
            echo "$as_me:$LINENO: result: Found libcomplib.sgimath.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libcomplib.sgimath.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libcomplib.sgimath.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libcomplib.sgimath.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lcomplib.sgimath

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libcomplib.sgimath.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libcomplib.sgimath.a" >&5
echo "${ECHO_T}Did not find libcomplib.sgimath.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libcomplib.sgimath.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libcomplib.sgimath.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libcomplib.sgimath.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libcomplib.sgimath.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lcomplib.sgimath

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libcomplib.sgimath.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lcomplib.sgimath $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libcomplib.sgimath.a" -o -f "$_CHECK_PATH_/libcomplib.sgimath.so" \
	                 -o -f "$_CHECK_PATH_/libcomplib.sgimath.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lcomplib.sgimath

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


#    SCI_CHECK_LIB($dirs,complib.sgimath_mp,main,,,optional)
#    if test "$HAVE_LIB_COMPLIB_SGIMATH_MP"; then
    if test "$HAVE_LIB_COMPLIB_SGIMATH"; then
       { echo "$as_me:$LINENO: WARNING: Using complib for lapack" >&5
echo "$as_me: WARNING: Using complib for lapack" >&2;}
       HAVE_LIB_LAPACK="yes"
#      LAPACK_LIB_FLAG="$COMPLIB_SGIMATH_LIB_FLAG $COMPLIB_SGIMATH_MP_LIB_FLAG"
       LAPACK_LIB_FLAG="$COMPLIB_SGIMATH_LIB_FLAG"
       LAPACK_LIB_DIR_FLAG="$COMPLIB_SGIMATH_LIB_DIR_FLAG"
    fi
  fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   flapack"
       echo "   function:   main"
       echo "   other-libs: $F_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for flapack) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for flapack) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes flapack (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo flapack | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libflapack.so and libflapack.a" >&5
echo $ECHO_N "checking for both libflapack.so and libflapack.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lflapack" >&5
echo $ECHO_N "checking for -lflapack... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lflapack" >&5
echo $ECHO_N "checking for main in -lflapack... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$F_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libflapack.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libflapack.a"; then
            echo "$as_me:$LINENO: result: Found libflapack.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libflapack.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libflapack.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libflapack.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lflapack

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libflapack.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libflapack.a" >&5
echo "${ECHO_T}Did not find libflapack.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libflapack.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libflapack.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libflapack.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libflapack.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lflapack

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libflapack.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lflapack $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libflapack.a" -o -f "$_CHECK_PATH_/libflapack.so" \
	                 -o -f "$_CHECK_PATH_/libflapack.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lflapack

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi


  if test "$HAVE_LIB_FLAPACK"; then
    LIB_DIR_LAPACK=$LIB_DIR_FLAPACK
    HAVE_LIB_LAPACK=$HAVE_LIB_FLAPACK
    LAPACK_LIB_FLAG=$FLAPACK_LIB_FLAG
    LAPACK_LIB_DIR_FLAG=$FLAPACK_LIB_DIR_FLAG
  fi

  if test "$HAVE_LIB_LAPACK"; then
    DEF_LAPACK="#define HAVE_LAPACK 1"
  fi
fi

if test "$with_lapack" && test ! "$DEF_LAPACK"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the LAPACK components is missing." >&5
echo "$as_me: error: One or more of the LAPACK components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi




##  --  search for hypre stuff  ------------------------------------------

if test "$pkg_uintah" = "yes"; then

  if test "$with_hypre"; then
    dirs="$with_hypre/lib $with_hypre/src/hypre/lib $SCI_LAB_TP_LIBS"
  else
    dirs="$SCI_LAB_TP_LIBS"
  fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   HYPRE_struct_mv"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for HYPRE_struct_mv) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for HYPRE_struct_mv) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes HYPRE_struct_mv (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo HYPRE_struct_mv | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libHYPRE_struct_mv.so and libHYPRE_struct_mv.a" >&5
echo $ECHO_N "checking for both libHYPRE_struct_mv.so and libHYPRE_struct_mv.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lHYPRE_struct_mv" >&5
echo $ECHO_N "checking for -lHYPRE_struct_mv... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lHYPRE_struct_mv" >&5
echo $ECHO_N "checking for main in -lHYPRE_struct_mv... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libHYPRE_struct_mv.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libHYPRE_struct_mv.a"; then
            echo "$as_me:$LINENO: result: Found libHYPRE_struct_mv.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libHYPRE_struct_mv.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libHYPRE_struct_mv.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libHYPRE_struct_mv.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lHYPRE_struct_mv

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libHYPRE_struct_mv.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libHYPRE_struct_mv.a" >&5
echo "${ECHO_T}Did not find libHYPRE_struct_mv.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libHYPRE_struct_mv.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libHYPRE_struct_mv.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libHYPRE_struct_mv.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libHYPRE_struct_mv.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lHYPRE_struct_mv

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libHYPRE_struct_mv.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lHYPRE_struct_mv $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libHYPRE_struct_mv.a" -o -f "$_CHECK_PATH_/libHYPRE_struct_mv.so" \
	                 -o -f "$_CHECK_PATH_/libHYPRE_struct_mv.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lHYPRE_struct_mv

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_HYPRE_STRUCT_MV"
       echo "   lib name:   HYPRE_struct_ls"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for HYPRE_struct_ls) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for HYPRE_struct_ls) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes HYPRE_struct_ls (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo HYPRE_struct_ls | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libHYPRE_struct_ls.so and libHYPRE_struct_ls.a" >&5
echo $ECHO_N "checking for both libHYPRE_struct_ls.so and libHYPRE_struct_ls.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lHYPRE_struct_ls" >&5
echo $ECHO_N "checking for -lHYPRE_struct_ls... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lHYPRE_struct_ls" >&5
echo $ECHO_N "checking for main in -lHYPRE_struct_ls... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_HYPRE_STRUCT_MV /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libHYPRE_struct_ls.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libHYPRE_struct_ls.a"; then
            echo "$as_me:$LINENO: result: Found libHYPRE_struct_ls.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libHYPRE_struct_ls.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libHYPRE_struct_ls.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libHYPRE_struct_ls.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lHYPRE_struct_ls

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libHYPRE_struct_ls.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libHYPRE_struct_ls.a" >&5
echo "${ECHO_T}Did not find libHYPRE_struct_ls.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libHYPRE_struct_ls.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libHYPRE_struct_ls.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libHYPRE_struct_ls.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libHYPRE_struct_ls.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lHYPRE_struct_ls

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libHYPRE_struct_ls.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_HYPRE_STRUCT_MV NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lHYPRE_struct_ls $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libHYPRE_struct_ls.a" -o -f "$_CHECK_PATH_/libHYPRE_struct_ls.so" \
	                 -o -f "$_CHECK_PATH_/libHYPRE_struct_ls.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lHYPRE_struct_ls

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_HYPRE_STRUCT_MV"
       echo "   lib name:   HYPRE_blas"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for HYPRE_blas) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for HYPRE_blas) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes HYPRE_blas (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo HYPRE_blas | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libHYPRE_blas.so and libHYPRE_blas.a" >&5
echo $ECHO_N "checking for both libHYPRE_blas.so and libHYPRE_blas.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lHYPRE_blas" >&5
echo $ECHO_N "checking for -lHYPRE_blas... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lHYPRE_blas" >&5
echo $ECHO_N "checking for main in -lHYPRE_blas... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_HYPRE_STRUCT_MV /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libHYPRE_blas.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libHYPRE_blas.a"; then
            echo "$as_me:$LINENO: result: Found libHYPRE_blas.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libHYPRE_blas.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libHYPRE_blas.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libHYPRE_blas.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lHYPRE_blas

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libHYPRE_blas.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libHYPRE_blas.a" >&5
echo "${ECHO_T}Did not find libHYPRE_blas.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libHYPRE_blas.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libHYPRE_blas.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libHYPRE_blas.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libHYPRE_blas.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lHYPRE_blas

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libHYPRE_blas.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_HYPRE_STRUCT_MV NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lHYPRE_blas $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libHYPRE_blas.a" -o -f "$_CHECK_PATH_/libHYPRE_blas.so" \
	                 -o -f "$_CHECK_PATH_/libHYPRE_blas.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lHYPRE_blas

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_HYPRE_STRUCT_MV"
       echo "   lib name:   HYPRE_LSI"
       echo "   function:   main"
       echo "   other-libs: $HYPRE_STRUCT_MV_LIB_DIR_FLAG $HYPRE_BLAS_LIB_FLAG $HYPRE_STRUCT_LS_LIB_FLAG $HYPRE_STRUCT_MV_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for HYPRE_LSI) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for HYPRE_LSI) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes HYPRE_LSI (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo HYPRE_LSI | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libHYPRE_LSI.so and libHYPRE_LSI.a" >&5
echo $ECHO_N "checking for both libHYPRE_LSI.so and libHYPRE_LSI.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lHYPRE_LSI" >&5
echo $ECHO_N "checking for -lHYPRE_LSI... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lHYPRE_LSI" >&5
echo $ECHO_N "checking for main in -lHYPRE_LSI... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$HYPRE_STRUCT_MV_LIB_DIR_FLAG $HYPRE_BLAS_LIB_FLAG $HYPRE_STRUCT_LS_LIB_FLAG $HYPRE_STRUCT_MV_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_HYPRE_STRUCT_MV /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libHYPRE_LSI.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libHYPRE_LSI.a"; then
            echo "$as_me:$LINENO: result: Found libHYPRE_LSI.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libHYPRE_LSI.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libHYPRE_LSI.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libHYPRE_LSI.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lHYPRE_LSI

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libHYPRE_LSI.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libHYPRE_LSI.a" >&5
echo "${ECHO_T}Did not find libHYPRE_LSI.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libHYPRE_LSI.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libHYPRE_LSI.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libHYPRE_LSI.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libHYPRE_LSI.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lHYPRE_LSI

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libHYPRE_LSI.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_HYPRE_STRUCT_MV NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lHYPRE_LSI $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libHYPRE_LSI.a" -o -f "$_CHECK_PATH_/libHYPRE_LSI.so" \
	                 -o -f "$_CHECK_PATH_/libHYPRE_LSI.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lHYPRE_LSI

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_HYPRE_STRUCT_MV/../include"
       echo "   headers:     HYPRE.h"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_HYPRE_STRUCT_MV/../include NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="HYPRE.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for HYPRE.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for HYPRE.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files



  if test "$HAVE_LIB_HYPRE_LSI" && test "$HAVE_HYPRE_H"; then
    HAVE_HYPRE="yes"
    DEF_HYPRE="#define HAVE_HYPRE 1"
    HYPRE_LIB_FLAG="$HYPRE_STRUCT_MV_LIB_DIR_FLAG $HYPRE_BLAS_LIB_FLAG \
                    $HYPRE_STRUCT_LS_LIB_FLAG $HYPRE_STRUCT_MV_LIB_FLAG $HYPRE_LSI_LIB_FLAG"
    HYPRE_LIB_DIR_FLAG="$HYPRE_LSI_LIB_DIR_FLAG"
  fi
fi

if test "$with_hypre" && test ! "$DEF_HYPRE"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the HYPRE components is missing." >&5
echo "$as_me: error: One or more of the HYPRE components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi









## -- stuff for Multiprocessor PETSc --------------------------------------


# It seems that under AIX or OSF you don't need lapack for petsc...
if test "$HAVE_LIB_MPI" && test "$HAVE_LIB_BLAS" &&
   (test "$PETSC_ARCH" = "rs6000_sp" || test "$PETSC_ARCH" = "dec" ||
    test "$HAVE_LIB_LAPACK"); then

  dirs=""

  # Modify dirs to have correct path information:
  for i in $SCI_LAB_TP_DEFAULT; do
    if test ! -d "$i"; then
      continue
    fi

    #this is where the lib actually lives
    if test ! -d "$i/$PETSC_VERSION_DIR/lib/$PETSC_SUB/$PETSC_ARCH"; then
      continue
    fi

    dirs="$dirs $i/$PETSC_VERSION_DIR/lib/$PETSC_SUB/$PETSC_ARCH"
  done

  if test "$with_petsc"; then
    dirs="$with_petsc/lib/$PETSC_SUB/$PETSC_ARCH $dirs"
  fi


    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   petsc"
       echo "   function:   main"
       echo "   other-libs: $LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_DIR_FLAG $BLAS_LIB_FLAG $F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petsc) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petsc) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petsc (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petsc | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetsc.so and libpetsc.a" >&5
echo $ECHO_N "checking for both libpetsc.so and libpetsc.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetsc" >&5
echo $ECHO_N "checking for -lpetsc... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetsc" >&5
echo $ECHO_N "checking for main in -lpetsc... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_DIR_FLAG $BLAS_LIB_FLAG $F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetsc.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetsc.a"; then
            echo "$as_me:$LINENO: result: Found libpetsc.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetsc.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetsc.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetsc.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetsc

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetsc.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetsc.a" >&5
echo "${ECHO_T}Did not find libpetsc.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetsc.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetsc.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetsc.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetsc.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetsc

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetsc.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetsc $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetsc.a" -o -f "$_CHECK_PATH_/libpetsc.so" \
	                 -o -f "$_CHECK_PATH_/libpetsc.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetsc

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi




    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_PETSC/../../../include /usr/include/petsc"
       echo "   headers:     \
    petsc.h"
       echo "   other-paths: $INC_MPI_H -I$LIB_DIR_PETSC/../../../bmake/$PETSC_ARCH"
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_PETSC/../../../include /usr/include/petsc NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="\
    petsc.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for \
    petsc.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for \
    petsc.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_MPI_H -I$LIB_DIR_PETSC/../../../bmake/$PETSC_ARCH >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_MPI_H -I$LIB_DIR_PETSC/../../../bmake/$PETSC_ARCH >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files




    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_PETSC"
       echo "   lib name:   petscvec"
       echo "   function:   main"
       echo "   other-libs: $PETSC_LIB_FLAG \
		$LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_FLAG \
		$F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petscvec) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petscvec) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petscvec (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petscvec | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetscvec.so and libpetscvec.a" >&5
echo $ECHO_N "checking for both libpetscvec.so and libpetscvec.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetscvec" >&5
echo $ECHO_N "checking for -lpetscvec... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetscvec" >&5
echo $ECHO_N "checking for main in -lpetscvec... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$PETSC_LIB_FLAG \
		$LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_FLAG \
		$F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_PETSC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetscvec.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetscvec.a"; then
            echo "$as_me:$LINENO: result: Found libpetscvec.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscvec.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscvec.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscvec.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscvec

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscvec.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetscvec.a" >&5
echo "${ECHO_T}Did not find libpetscvec.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetscvec.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetscvec.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscvec.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscvec.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscvec

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscvec.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_PETSC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetscvec $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetscvec.a" -o -f "$_CHECK_PATH_/libpetscvec.so" \
	                 -o -f "$_CHECK_PATH_/libpetscvec.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetscvec

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_PETSC"
       echo "   lib name:   petscmat"
       echo "   function:   main"
       echo "   other-libs: $PETSCVEC_LIB_FLAG $PETSC_LIB_FLAG \
		$LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_FLAG \
		$F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petscmat) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petscmat) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petscmat (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petscmat | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetscmat.so and libpetscmat.a" >&5
echo $ECHO_N "checking for both libpetscmat.so and libpetscmat.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetscmat" >&5
echo $ECHO_N "checking for -lpetscmat... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetscmat" >&5
echo $ECHO_N "checking for main in -lpetscmat... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$PETSCVEC_LIB_FLAG $PETSC_LIB_FLAG \
		$LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_FLAG \
		$F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_PETSC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetscmat.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetscmat.a"; then
            echo "$as_me:$LINENO: result: Found libpetscmat.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscmat.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscmat.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscmat.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscmat

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscmat.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetscmat.a" >&5
echo "${ECHO_T}Did not find libpetscmat.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetscmat.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetscmat.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscmat.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscmat.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscmat

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscmat.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_PETSC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetscmat $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetscmat.a" -o -f "$_CHECK_PATH_/libpetscmat.so" \
	                 -o -f "$_CHECK_PATH_/libpetscmat.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetscmat

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_PETSC"
       echo "   lib name:   petscdm"
       echo "   function:   main"
       echo "   other-libs: $PETSCMAT_LIB_FLAG $PETSCVEC_LIB_FLAG $PETSC_LIB_FLAG \
		$LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_FLAG \
		$F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petscdm) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petscdm) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petscdm (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petscdm | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetscdm.so and libpetscdm.a" >&5
echo $ECHO_N "checking for both libpetscdm.so and libpetscdm.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetscdm" >&5
echo $ECHO_N "checking for -lpetscdm... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetscdm" >&5
echo $ECHO_N "checking for main in -lpetscdm... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$PETSCMAT_LIB_FLAG $PETSCVEC_LIB_FLAG $PETSC_LIB_FLAG \
		$LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_FLAG \
		$F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_PETSC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetscdm.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetscdm.a"; then
            echo "$as_me:$LINENO: result: Found libpetscdm.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscdm.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscdm.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscdm.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscdm

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscdm.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetscdm.a" >&5
echo "${ECHO_T}Did not find libpetscdm.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetscdm.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetscdm.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscdm.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscdm.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscdm

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscdm.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_PETSC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetscdm $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetscdm.a" -o -f "$_CHECK_PATH_/libpetscdm.so" \
	                 -o -f "$_CHECK_PATH_/libpetscdm.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetscdm

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_PETSC"
       echo "   lib name:   petsccontrib"
       echo "   function:   main"
       echo "   other-libs: $PETSCDM_LIB_FLAG $PETSCMAT_LIB_FLAG $PETSCVEC_LIB_FLAG \
		$PETSC_LIB_FLAG $LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG \
		$BLAS_LIB_FLAG $F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petsccontrib) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petsccontrib) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petsccontrib (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petsccontrib | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetsccontrib.so and libpetsccontrib.a" >&5
echo $ECHO_N "checking for both libpetsccontrib.so and libpetsccontrib.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetsccontrib" >&5
echo $ECHO_N "checking for -lpetsccontrib... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetsccontrib" >&5
echo $ECHO_N "checking for main in -lpetsccontrib... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$PETSCDM_LIB_FLAG $PETSCMAT_LIB_FLAG $PETSCVEC_LIB_FLAG \
		$PETSC_LIB_FLAG $LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG \
		$BLAS_LIB_FLAG $F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_PETSC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetsccontrib.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetsccontrib.a"; then
            echo "$as_me:$LINENO: result: Found libpetsccontrib.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetsccontrib.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetsccontrib.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetsccontrib.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetsccontrib

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetsccontrib.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetsccontrib.a" >&5
echo "${ECHO_T}Did not find libpetsccontrib.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetsccontrib.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetsccontrib.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetsccontrib.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetsccontrib.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetsccontrib

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetsccontrib.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_PETSC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetsccontrib $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetsccontrib.a" -o -f "$_CHECK_PATH_/libpetsccontrib.so" \
	                 -o -f "$_CHECK_PATH_/libpetsccontrib.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetsccontrib

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_PETSC"
       echo "   lib name:   petscsles"
       echo "   function:   main"
       echo "   other-libs: $PETSCDM_LIB_FLAG $PETSCMAT_LIB_FLAG $PETSCVEC_LIB_FLAG \
		$PETSC_LIB_FLAG $LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG \
		$BLAS_LIB_FLAG $F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petscsles) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petscsles) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petscsles (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petscsles | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetscsles.so and libpetscsles.a" >&5
echo $ECHO_N "checking for both libpetscsles.so and libpetscsles.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetscsles" >&5
echo $ECHO_N "checking for -lpetscsles... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetscsles" >&5
echo $ECHO_N "checking for main in -lpetscsles... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$PETSCDM_LIB_FLAG $PETSCMAT_LIB_FLAG $PETSCVEC_LIB_FLAG \
		$PETSC_LIB_FLAG $LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG \
		$BLAS_LIB_FLAG $F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_PETSC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetscsles.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetscsles.a"; then
            echo "$as_me:$LINENO: result: Found libpetscsles.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscsles.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscsles.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscsles.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscsles

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscsles.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetscsles.a" >&5
echo "${ECHO_T}Did not find libpetscsles.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetscsles.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetscsles.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscsles.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscsles.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscsles

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscsles.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_PETSC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetscsles $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetscsles.a" -o -f "$_CHECK_PATH_/libpetscsles.so" \
	                 -o -f "$_CHECK_PATH_/libpetscsles.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetscsles

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_PETSC"
       echo "   lib name:   petscsnes"
       echo "   function:   main"
       echo "   other-libs: $PETSCSLES_LIB_FLAG $PETSCDM_LIB_FLAG $PETSCMAT_LIB_FLAG \
		$PETSCVEC_LIB_FLAG $PETSC_LIB_FLAG \
		$LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_FLAG \
		$F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petscsnes) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petscsnes) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petscsnes (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petscsnes | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetscsnes.so and libpetscsnes.a" >&5
echo $ECHO_N "checking for both libpetscsnes.so and libpetscsnes.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetscsnes" >&5
echo $ECHO_N "checking for -lpetscsnes... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetscsnes" >&5
echo $ECHO_N "checking for main in -lpetscsnes... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$PETSCSLES_LIB_FLAG $PETSCDM_LIB_FLAG $PETSCMAT_LIB_FLAG \
		$PETSCVEC_LIB_FLAG $PETSC_LIB_FLAG \
		$LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_FLAG \
		$F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_PETSC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetscsnes.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetscsnes.a"; then
            echo "$as_me:$LINENO: result: Found libpetscsnes.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscsnes.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscsnes.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscsnes.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscsnes

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscsnes.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetscsnes.a" >&5
echo "${ECHO_T}Did not find libpetscsnes.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetscsnes.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetscsnes.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscsnes.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscsnes.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscsnes

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscsnes.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_PETSC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetscsnes $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetscsnes.a" -o -f "$_CHECK_PATH_/libpetscsnes.so" \
	                 -o -f "$_CHECK_PATH_/libpetscsnes.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetscsnes

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $LIB_DIR_PETSC"
       echo "   lib name:   petscts"
       echo "   function:   main"
       echo "   other-libs: \
		$PETSCSNES_LIB_FLAG $PETSCSLES_LIB_FLAG $PETSCDM_LIB_FLAG \
		$PETSCMAT_LIB_FLAG $PETSCVEC_LIB_FLAG $PETSC_LIB_FLAG \
		$LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_FLAG \
		$F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"
       echo "   c++ lib:    "
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_=""
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petscts) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petscts) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petscts (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petscts | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetscts.so and libpetscts.a" >&5
echo $ECHO_N "checking for both libpetscts.so and libpetscts.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetscts" >&5
echo $ECHO_N "checking for -lpetscts... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetscts" >&5
echo $ECHO_N "checking for main in -lpetscts... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="\
		$PETSCSNES_LIB_FLAG $PETSCSLES_LIB_FLAG $PETSCDM_LIB_FLAG \
		$PETSCMAT_LIB_FLAG $PETSCVEC_LIB_FLAG $PETSC_LIB_FLAG \
		$LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_FLAG \
		$F_LIB_FLAG $MPI_LIB_DIR_FLAG $MPI_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$LIB_DIR_PETSC /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetscts.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetscts.a"; then
            echo "$as_me:$LINENO: result: Found libpetscts.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscts.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscts.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscts.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscts

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscts.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetscts.a" >&5
echo "${ECHO_T}Did not find libpetscts.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetscts.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetscts.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscts.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscts.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscts

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscts.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$LIB_DIR_PETSC NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetscts $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetscts.a" -o -f "$_CHECK_PATH_/libpetscts.so" \
	                 -o -f "$_CHECK_PATH_/libpetscts.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetscts

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



  if test "$HAVE_LIB_PETSC"        && test "$HAVE_PETSC_H" &&
     test "$HAVE_LIB_PETSCCONTRIB" && test "$HAVE_LIB_PETSCDM" &&
     test "$HAVE_LIB_PETSCMAT"     && test "$HAVE_LIB_PETSCSLES" &&
     test "$HAVE_LIB_PETSCSNES"    && test "$HAVE_LIB_PETSCTS" &&
     test "$HAVE_LIB_PETSCVEC"; then
     HAVE_PETSC="yes"
     DEF_PETSC="#define HAVE_PETSC 1"
     INC_PETSC_H="$INC_PETSC_H -I$LIB_DIR_PETSC/../../../bmake/$PETSC_ARCH"
     PETSC_EXTRA_LIB_FLAG="$PETSCCONTRIB_LIB_FLAG \
       $PETSCDM_LIB_FLAG $PETSCMAT_LIB_FLAG $PETSCSLES_LIB_FLAG \
       $PETSCSNES_LIB_FLAG $PETSCTS_LIB_FLAG $PETSCVEC_LIB_FLAG \
       $LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG $BLAS_LIB_FLAG $F_LIB_FLAG"
  fi
else
  { echo "$as_me:$LINENO: WARNING: One or more of MPI or BLAS or LAPACK is missing." >&5
echo "$as_me: WARNING: One or more of MPI or BLAS or LAPACK is missing." >&2;}
  { echo "$as_me:$LINENO: WARNING: HAVE_LIB_MPI: $HAVE_LIB_MPI" >&5
echo "$as_me: WARNING: HAVE_LIB_MPI: $HAVE_LIB_MPI" >&2;}
  { echo "$as_me:$LINENO: WARNING: HAVE_LIB_BLAS: $HAVE_LIB_BLAS" >&5
echo "$as_me: WARNING: HAVE_LIB_BLAS: $HAVE_LIB_BLAS" >&2;}
  { echo "$as_me:$LINENO: WARNING: Not configuring PETSc." >&5
echo "$as_me: WARNING: Not configuring PETSc." >&2;}
fi

if test "$with_petsc" && test ! "$DEF_PETSC"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the PETSC components is missing." >&5
echo "$as_me: error: One or more of the PETSC components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi








##  --  search for uni-petsc stuff  -------------------------------------------
if test ! "$DEF_PETSC" &&
   test "$HAVE_LIB_BLAS" &&
   test "$HAVE_LIB_LAPACK" &&
   test "$HAVE_LIB_MPIUNI" &&
   test "$HAVE_MPI_H"; then
  { echo "$as_me:$LINENO: checking for Uni-Processor PETSc......" >&5
echo "$as_me: checking for Uni-Processor PETSc......" >&6;}
  dirs=""
  # Modify dirs to have correct path information:
  for i in $SCI_LAB_TP_DEFAULT; do
    if test ! -d "$i"; then
      continue
    fi
    #this is where the lib actually lives
    if test ! -d "$i/$PETSC_VERSION_DIR/lib/$PETSC_SUB/$PETSC_ARCH"; then
      continue
    fi
    dirs="$dirs $i/$PETSC_VERSION_DIR/lib/$PETSC_SUB/$PETSC_ARCH"
  done

  if test "$with_unipetsc"; then
    dirs="$with_unipetsc/lib/$PETSC_SUB/$PETSC_ARCH $dirs"
  fi

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   petsc"
       echo "   function:   main"
       echo "   other-libs: "
       echo "   c++ lib:    no"
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_="no"
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petsc) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petsc) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petsc (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petsc | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetsc.so and libpetsc.a" >&5
echo $ECHO_N "checking for both libpetsc.so and libpetsc.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetsc" >&5
echo $ECHO_N "checking for -lpetsc... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetsc" >&5
echo $ECHO_N "checking for main in -lpetsc... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_=""

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetsc.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetsc.a"; then
            echo "$as_me:$LINENO: result: Found libpetsc.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetsc.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetsc.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetsc.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetsc

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetsc.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetsc.a" >&5
echo "${ECHO_T}Did not find libpetsc.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetsc.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetsc.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetsc.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetsc.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetsc

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetsc.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetsc $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetsc.a" -o -f "$_CHECK_PATH_/libpetsc.so" \
	                 -o -f "$_CHECK_PATH_/libpetsc.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetsc

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



  if test "$HAVE_LIB_PETSC"; then

    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   petscvec"
       echo "   function:   main"
       echo "   other-libs: $PETSC_LIB_FLAG"
       echo "   c++ lib:    no"
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_="no"
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petscvec) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petscvec) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petscvec (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petscvec | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetscvec.so and libpetscvec.a" >&5
echo $ECHO_N "checking for both libpetscvec.so and libpetscvec.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetscvec" >&5
echo $ECHO_N "checking for -lpetscvec... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetscvec" >&5
echo $ECHO_N "checking for main in -lpetscvec... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$PETSC_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetscvec.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetscvec.a"; then
            echo "$as_me:$LINENO: result: Found libpetscvec.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscvec.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscvec.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscvec.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscvec

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscvec.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetscvec.a" >&5
echo "${ECHO_T}Did not find libpetscvec.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetscvec.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetscvec.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscvec.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscvec.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscvec

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscvec.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetscvec $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetscvec.a" -o -f "$_CHECK_PATH_/libpetscvec.so" \
	                 -o -f "$_CHECK_PATH_/libpetscvec.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetscvec

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   petscmat"
       echo "   function:   main"
       echo "   other-libs: $PETSC_LIB_FLAG $PETSCVEC_LIB_FLAG"
       echo "   c++ lib:    no"
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_="no"
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petscmat) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petscmat) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petscmat (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petscmat | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetscmat.so and libpetscmat.a" >&5
echo $ECHO_N "checking for both libpetscmat.so and libpetscmat.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetscmat" >&5
echo $ECHO_N "checking for -lpetscmat... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetscmat" >&5
echo $ECHO_N "checking for main in -lpetscmat... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$PETSC_LIB_FLAG $PETSCVEC_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetscmat.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetscmat.a"; then
            echo "$as_me:$LINENO: result: Found libpetscmat.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscmat.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscmat.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscmat.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscmat

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscmat.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetscmat.a" >&5
echo "${ECHO_T}Did not find libpetscmat.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetscmat.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetscmat.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscmat.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscmat.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscmat

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscmat.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetscmat $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetscmat.a" -o -f "$_CHECK_PATH_/libpetscmat.so" \
	                 -o -f "$_CHECK_PATH_/libpetscmat.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetscmat

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   petscdm"
       echo "   function:   main"
       echo "   other-libs: $PETSC_LIB_FLAG $PETSCVEC_LIB_FLAG $PETSCMAT_LIB_FLAG"
       echo "   c++ lib:    no"
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_="no"
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petscdm) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petscdm) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petscdm (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petscdm | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetscdm.so and libpetscdm.a" >&5
echo $ECHO_N "checking for both libpetscdm.so and libpetscdm.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetscdm" >&5
echo $ECHO_N "checking for -lpetscdm... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetscdm" >&5
echo $ECHO_N "checking for main in -lpetscdm... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$PETSC_LIB_FLAG $PETSCVEC_LIB_FLAG $PETSCMAT_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetscdm.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetscdm.a"; then
            echo "$as_me:$LINENO: result: Found libpetscdm.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscdm.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscdm.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscdm.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscdm

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscdm.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetscdm.a" >&5
echo "${ECHO_T}Did not find libpetscdm.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetscdm.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetscdm.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscdm.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscdm.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscdm

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscdm.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetscdm $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetscdm.a" -o -f "$_CHECK_PATH_/libpetscdm.so" \
	                 -o -f "$_CHECK_PATH_/libpetscdm.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetscdm

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_LIB macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK LIB:"
       echo "   paths:      $dirs"
       echo "   lib name:   petscsles"
       echo "   function:   main"
       echo "   other-libs: $PETSC_LIB_FLAG $PETSCVEC_LIB_FLAG $PETSCMAT_LIB_FLAG $PETSCDM_LIB_FLAG"
       echo "   c++ lib:    no"
       echo "   optional:   optional"
    fi

    ##########################
    ## CXX and OPTIONAL parameters

    _SCI_USING_CXX_="no"
    _SCI_LIB_OPTIONAL_="optional"

    if test "$_SCI_LIB_OPTIONAL_" != "not-optional" -a \
       "$_SCI_LIB_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK LIB macro (for petscsles) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK LIB macro (for petscsles) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ##########################
    ## LIB parameter: The following 'sed' capitalizes petscsles (the library name.)
    ##
    ## EXAMPLE: if lib name is 'pthread'
    ##     Temp Var Name           Real Var Name         Value
    ##     -------------           -------------         -----
    ##   _SCI_VAR_LIBNAME_      => PTHREAD               (none)
    ##   _SCI_VAR_DIR_          => LIB_DIR_PTHREAD       /usr/lib   || ''
    ##   _SCI_VAR_HAVE_         => HAVE_LIB_PTHREAD      yes        || ''
    ##   _SCI_VAR_LIB_DIR_FLAG_ => PTHREAD_LIB_DIR_FLAG  -L/usr/lib || ''
    ##   _SCI_VAR_LIB_FLAG_     => PTHREAD_LIB_FLAG      -lpthread  || ''

    _SCI_VAR_LIBNAME_=`echo petscsles | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
    _SCI_VAR_DIR_=LIB_DIR_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_HAVE_=HAVE_LIB_"$_SCI_VAR_LIBNAME_"
    _SCI_VAR_LIB_DIR_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_DIR_FLAG
    _SCI_VAR_LIB_FLAG_="$_SCI_VAR_LIBNAME_"_LIB_FLAG

    if test "$debugging" = "yes"; then
       echo "_SCI_VAR_DIR_ is $_SCI_VAR_DIR_"
       echo "_SCI_VAR_HAVE_ is $_SCI_VAR_HAVE_"
       echo "_SCI_VAR_LIB_DIR_FLAG_ is $_SCI_VAR_LIB_DIR_FLAG_"
       echo "_SCI_VAR_LIB_FLAG_ is $_SCI_VAR_LIB_FLAG_"
    fi


    ##########################
    ## FUNCTION parameter
    if test -z "main"; then
       _SCI_DECL_=""
       _SCI_CALL_=""
       EXTERN_BEGIN=""
       EXTERN_END=""
       echo "$as_me:$LINENO: checking for both libpetscsles.so and libpetscsles.a" >&5
echo $ECHO_N "checking for both libpetscsles.so and libpetscsles.a... $ECHO_C" >&6
    else
      if test "main" = "main"; then
         _SCI_DECL_=""
         _SCI_CALL_=""
         EXTERN_BEGIN=""
         EXTERN_END=""
         echo "$as_me:$LINENO: checking for -lpetscsles" >&5
echo $ECHO_N "checking for -lpetscsles... $ECHO_C" >&6
      else
        _SCI_DECL_="char main();"
        _SCI_CALL_="main();"

        echo "$as_me:$LINENO: checking for main in -lpetscsles" >&5
echo $ECHO_N "checking for main in -lpetscsles... $ECHO_C" >&6
        if test "$_SCI_USING_CXX_" != "yes"; then
          EXTERN_BEGIN="extern \"C\" {"
          EXTERN_END="}"
        fi
      fi
    fi

    ##########################
    ## OTHER-LIBRARIES parameter

    _SCI_OTHER_LIBS_="$PETSC_LIB_FLAG $PETSCVEC_LIB_FLAG $PETSCMAT_LIB_FLAG $PETSCDM_LIB_FLAG"

    if test -z "main"; then

    # Add inthe standard PATH to search as well.
    # In other words, to see if the compiler would find it by itself...
    # THIS DOES NOT WORK FULLY AS THERE SHOULD BE MORE PATHS - ARS
      _SCI_CHECK_PATHS_="$dirs /usr/lib /lib"

    # Test for just the existance of the library in the paths.

      echo ""
      ## Look for the lib.a file:
      _FOUND_LIB_A_FILE_="false"
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do
        if test "$debugging" = "yes"; then
          echo "Checking for libpetscsles.a in path: $_CHECK_PATH_"
        fi

        if test -e "$_CHECK_PATH_/libpetscsles.a"; then
            echo "$as_me:$LINENO: result: Found libpetscsles.a in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscsles.a in $_CHECK_PATH_" >&6
            _FOUND_LIB_A_FILE_="true"
          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscsles.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscsles.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscsles

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscsles.a)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
	fi
      done
      if test "$_FOUND_LIB_A_FILE_" = "false"; then
         echo "$as_me:$LINENO: result: Did not find libpetscsles.a" >&5
echo "${ECHO_T}Did not find libpetscsles.a" >&6
      fi

      ## Now look for the the lib.so file.
      ## If lib.so is found, the location of the lib.a file will be
      ## overwritten... ie: THE .SO FILE TAKES PRECEDENCE!
      for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

        if test "$debugging" = "yes"; then
            echo "Checking for libpetscsles.so in $_CHECK_PATH_!"
        fi

        if test ! -d "$_CHECK_PATH_"; then
          if test "$debugging" = "yes"; then
            echo "$_CHECK_PATH_: No such path!"
          fi
          continue
        fi

        if test -e "$_CHECK_PATH_/libpetscsles.so"; then

          if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
            "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            _CHECK_PATH_=""
          fi

          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes

          tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
          eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
	  echo "$as_me:$LINENO: result: Found libpetscsles.so in $_CHECK_PATH_" >&5
echo "${ECHO_T}Found libpetscsles.so in $_CHECK_PATH_" >&6

	  eval $_SCI_VAR_LIB_FLAG_=-lpetscsles

          if test "$debugging" = "yes"; then
            echo "FOUND IT (libpetscsles.so)"
  	    eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	    eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	    eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	    eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	    echo
	    break;
  	  fi
        fi
      done

      eval result='$'$_SCI_VAR_HAVE_

      if test "$result" = ""; then
        if test "$debugging" = "yes"; then
          echo "Did NOT find it"
        fi
        eval $_SCI_VAR_DIR_=''
        eval $_SCI_VAR_HAVE_=''
        eval $_SCI_VAR_LIB_DIR_FLAG_=''
        eval $_SCI_VAR_LIB_FLAG_=''
      fi

    else

    # NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself...
    _SCI_CHECK_PATHS_="$dirs NO_EXPLICIT_PATH"

    ## WARNING... in some cases it might be an error if we specify
    ##            a path to a lib, but the compiler has a default.
    ##            For example, if we want libm.so and we specify
    ##            to look in /usr/lib, and then we use a compiler
    ##            that has its own version of libm (say in /usr/compiler/lib)
    ##            then things will break.  However, in some cases
    ##            this is not a problem: eg. /res/sci/lib/libtcl.so.
    ##            I'm not sure how we should resolve this.

    # Remove any old output file.
    rm -f conftest.out

    for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

       if test "$debugging" = "yes"; then
          echo "Checking in path: $_CHECK_PATH_"
       fi

       if test "$_CHECK_PATH_" = "/usr/lib" -o "$_CHECK_PATH_" = "/lib" -o \
          "$_CHECK_PATH_" = "/usr/lib/" -o "$_CHECK_PATH_" = "/lib/"; then
            if test "$debugging" = "yes"; then
               { echo "$as_me:$LINENO: WARNING: Skipping generic lib: SCI CHECK LIB" >&5
echo "$as_me: WARNING: Skipping generic lib: SCI CHECK LIB" >&2;}
            fi
            continue
       fi

       if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
          _CHECK_PATH_=""
          LIBRARY=
       else
          if test ! -d "$_CHECK_PATH_"; then
             if test "$debugging" = "yes"; then
                echo "No such path!"
             fi
             continue
          fi
          LIBRARY=-L$_CHECK_PATH_
       fi

       if test "$_SCI_USING_CXX_" = "no"; then
         theCompiler=$CC
	 theExt=c
       else
         theCompiler=$CXX
	 theExt=cc
       fi

       cat > conftest.$theExt <<EOF

       #include "confdefs.h"
       $EXTERN_BEGIN
       $_SCI_DECL_
       $EXTERN_END
       int main() {
         $_SCI_CALL_
         return 0;
       }
EOF

       rm -f a.out
       ac_try="$theCompiler $CFLAGS conftest.$theExt $LIBRARY -lpetscsles $_SCI_OTHER_LIBS_ >/dev/null >> conftest.out 2>> conftest.out"
       (eval $ac_try) 2>&5

       if test "$debugging" = "yes"; then
          echo ac_try is $ac_try
       fi

       if test -f a.out; then
          if test "$_CHECK_PATH_" = ""; then
             echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
          else
             if test -f "$_CHECK_PATH_/libpetscsles.a" -o -f "$_CHECK_PATH_/libpetscsles.so" \
	                 -o -f "$_CHECK_PATH_/libpetscsles.dylib"; then
                echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
             else
                # Even though the compilation was successful,
                # it was because the library was in the generic
                # compiler path, not because it was in the path we just
                # tested.  Thus, we really did not succeed.

                if test "$debugging" = "yes"; then
                   echo "false alarm on lib, will keep trying"
                fi
                eval $_SCI_VAR_DIR_=''
                eval $_SCI_VAR_HAVE_=''
                eval $_SCI_VAR_LIB_DIR_FLAG_=''
                eval $_SCI_VAR_LIB_FLAG_=''
                continue
             fi
          fi
          eval $_SCI_VAR_DIR_=$_CHECK_PATH_
          eval $_SCI_VAR_HAVE_=yes
          if test "$_CHECK_PATH_" != ""; then
	      tmp="$LDRUN_PREFIX$_CHECK_PATH_ -L$_CHECK_PATH_"
              eval $_SCI_VAR_LIB_DIR_FLAG_='"$tmp"'
          fi
	  eval $_SCI_VAR_LIB_FLAG_=-lpetscsles

          if test "$debugging" = "yes"; then
             echo "FOUND IT"
	     eval echo "$_SCI_VAR_DIR_    is $"$_SCI_VAR_DIR_""
	     eval echo "$_SCI_VAR_HAVE_    is $"$_SCI_VAR_HAVE_""
	     eval echo "$_SCI_VAR_LIB_DIR_FLAG_ is $"$_SCI_VAR_LIB_DIR_FLAG_""
	     eval echo "$_SCI_VAR_LIB_FLAG_ is $"$_SCI_VAR_LIB_FLAG_""
	     echo
          fi

          break
       else
          if test "$debugging" = "yes"; then
             echo "Did NOT find it"
          fi
          eval $_SCI_VAR_DIR_=''
          eval $_SCI_VAR_HAVE_=''
          eval $_SCI_VAR_LIB_DIR_FLAG_=''
          eval $_SCI_VAR_LIB_FLAG_=''
       fi

    done # loop over all libs.
    fi
    # For some reason putting the eval statement in the following "if test"
    # statement doesn't work... so I do it here.
    eval result='$'$_SCI_VAR_HAVE_

    if test "$result" = ""; then
       if test "$debugging" = "yes"; then
          echo "Did not find it at all"
       fi
       # Didn't find the library, link the library, find the function)...
       echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6
       if test "$_SCI_LIB_OPTIONAL_" = "not-optional"; then
          { echo "$as_me:$LINENO: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&5
echo "$as_me: WARNING: Required library $_SCI_VAR_LIBNAME_ not found." >&2;}
	  if test "main"; then
            { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
            { echo "$as_me:$LINENO: WARNING: Compile output is:" >&5
echo "$as_me: WARNING: Compile output is:" >&2;}
            cat conftest.out
	  fi

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure: non-optional lib not found. Bye." >&5
echo "$as_me: error: Exiting configure: non-optional lib not found. Bye." >&2;}
   { (exit 1); exit 1; }; }

       fi
    fi



    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       $LIB_DIR_PETSC/../../../include /usr/include/petsc"
       echo "   headers:     petsc.h petscsles.h"
       echo "   other-paths: $INC_MPI_H -I$LIB_DIR_PETSC/../../../bmake/$PETSC_ARCH"
       echo "   c++ lib:     "
       echo "   optional:    not-optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_="$LIB_DIR_PETSC/../../../include /usr/include/petsc NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="petsc.h petscsles.h"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="not-optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for petsc.h petscsles.h) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for petsc.h petscsles.h) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_MPI_H -I$LIB_DIR_PETSC/../../../bmake/$PETSC_ARCH >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS $INC_MPI_H -I$LIB_DIR_PETSC/../../../bmake/$PETSC_ARCH >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files


  fi

  if test "$HAVE_LIB_PETSC"	&& test "$HAVE_PETSC_H" &&
     test "$HAVE_LIB_PETSCVEC"	&& test "$HAVE_LIB_PETSCMAT" &&
     test "$HAVE_LIB_PETSCDM"	&& test "$HAVE_LIB_PETSCSLES"; then
    HAVE_LIB_PETSC_UNI="yes"
    DEF_PETSC_UNI="#define UNI_PETSC 1"
    LIB_DIR_PETSC_UNI="$LIB_DIR_PETSC"
    PETSC_UNI_LIB_DIR_FLAG="$PETSC_LIB_DIR_FLAG"
    PETSC_UNI_LIB_FLAG="$PETSC_LIB_FLAG  $PETSCVEC_LIB_FLAG $PETSCMAT_LIB_FLAG $PETSCDM_LIB_FLAG $PETSCSLES_LIB_FLAG"
    INC_PETSC_UNI_H="$INC_PETSC_H -I$LIB_DIR_PETSC/../../../bmake/$PETSC_ARCH -I$LIB_DIR_PETSC/../../../src/sys/src/mpiuni"
    PETSC_UNI_EXTRA_LIB_FLAG="$PETSC_UNI_EXTRA_LIB_FLAG $MPIUNI_LIB_DIR_FLAG $MPIUNI_LIB_FLAG $BLAS_LIB_DIR_FLAG $BLAS_LIB_FLAG $LAPACK_LIB_DIR_FLAG $LAPACK_LIB_FLAG"
  fi
fi

if test "$with_unipetsc" && test ! "$HAVE_LIB_PETSC_UNI"; then
  echo
  { { echo "$as_me:$LINENO: error: One or more of the UNI_PETSC components is missing." >&5
echo "$as_me: error: One or more of the UNI_PETSC components is missing." >&2;}
   { (exit 1); exit 1; }; }
  echo
fi







##  --  search for optional headers  ------------------------------------

    #######################################################
    ##  Begin: SCI_CHECK_HEADERS macro...

    if test "$debugging" = "yes"; then
       echo "SCI CHECK HEADERS:"
       echo "   paths:       "
       echo "   headers:     sstream"
       echo "   other-paths: "
       echo "   c++ lib:     "
       echo "   optional:    optional"
    fi

    ########################
    # PATHS parameter:
    #
    #   NO_EXPLICIT_PATHS: this flag is used to check a "blank" path.
    # In other words, to see if the compiler can find it by itself
    # before we test explicit paths.

    _SCI_CHECK_PATHS_=" NO_EXPLICIT_PATH"
    ########################
    # HEADERS parameter:

    _HEADER_LIST_="sstream"

    ##  SCI_CHECK_HEADERS
    _SCI_USING_CXX_=""
    _SCI_HEADER_OPTIONAL_="optional"

    if test "$_SCI_USING_CXX_" = "no"; then
       theCompiler=$CC
       theExt=c
    else
       theCompiler=$CXX
       theExt=cc
    fi

    if test "$_SCI_HEADER_OPTIONAL_" != "not-optional" -a \
            "$_SCI_HEADER_OPTIONAL_" != "optional"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: SCI CHECK HEADERS macro (for sstream) optional parameter must be set to 'optional' or 'not-optional'" >&5
echo "$as_me: error: SCI CHECK HEADERS macro (for sstream) optional parameter must be set to 'optional' or 'not-optional'" >&2;}
   { (exit 1); exit 1; }; }

    fi

    ## Testing for all headers at the same time...  Should be a lot
    ## faster... if this fails, we will try one by one to figure out
    ## which one is broken.

    # Make num_headers into an "integer"
    num_headers=`echo $_HEADER_LIST_ | wc -w`

    first_header=
    for the_header in $_HEADER_LIST_; do
        if test "$first_header" = ""; then
           first_header=$the_header
        fi
    done

    SUCCESS="no"
    ## If more than one header...
    if test $num_headers -gt 1; then

       echo "$as_me:$LINENO: checking for all headers at the same time: $_HEADER_LIST_" >&5
echo $ECHO_N "checking for all headers at the same time: $_HEADER_LIST_... $ECHO_C" >&6
       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking all .h files at once in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          include_list="#include \"confdefs.h\"\n"
          for _HEADER_ in $_HEADER_LIST_; do
             include_list="$include_list""#include <$_HEADER_>\n"
          done

          include_list="\n""$include_list\n""int main() { return 0; }\n"

	  echo $use_minus_e $include_list > conftest.$theExt

          rm -f conftest.o
          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          (eval $ac_try) 2>&5

          if test "$debugging" = "yes"; then
             echo ac_try is $ac_try
          fi

          if test -f conftest.o; then
             # Succeeded... need to run through all header files and
             # create/save appropriate flags.

             if test "$_CHECK_PATH_" = ""; then
                echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             else
                if test -f "$_CHECK_PATH_/$first_header"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             fi

             SUCCESS="yes"

             define_list=

             for _HEADER_ in $_HEADER_LIST_; do
                # Using set to capitalize the string and replace / with _
                _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
                eval $_SCI_HEADER_NAME_=''
                _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
                _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

                if test "$_CHECK_PATH_" != ""; then
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                fi
                eval $_SCI_HEADER_HAVE_=yes

		if test "$debugging" = "yes"; then
		   eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		   eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
		fi

                # Save a list of defines in confdefs.h.  Something
	        # later removes a bunch of them... haven't been able
                # to figure out what yet.
                define_list="#define $_SCI_HEADER_HAVE_ 1\n$define_list"
             done

	     # Saving all the defines into one string and then echoing
             # that string to confdefs.h is much faster than sending
             # them one at a time as opening the file on some file systems
             # (ASCI computers?) takes forever.
             echo $use_minus_e $define_list >> confdefs.h

             # Found it so stop looking in other locations.
             break
          fi ## end if success
       done ## for _CHECK_PATH_
    fi ## end if more than 1 header

    # If we succeeded in testing all the .h files in one test above,
    # then skip the individual tests below.
    if test "$SUCCESS" = "yes"; then
       _HEADER_LIST_=""
    else
       if test $num_headers -gt 1; then
          echo "no.  (One or more missing, will check individually)"
       fi
    fi

    ## Begin: HEADER for loop
    for _HEADER_ in $_HEADER_LIST_; do

       echo "$as_me:$LINENO: checking for $_HEADER_" >&5
echo $ECHO_N "checking for $_HEADER_... $ECHO_C" >&6

       for _CHECK_PATH_ in $_SCI_CHECK_PATHS_; do

          if test "$debugging" = "yes"; then
             echo "Checking in: $_CHECK_PATH_"
          fi
          if test "$_CHECK_PATH_" = "/usr/include"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Do not specify /usr/include in SCI CHECK HEADERS" >&5
echo "$as_me: error: Do not specify /usr/include in SCI CHECK HEADERS" >&2;}
   { (exit 1); exit 1; }; }

          fi

          INCLUDE_FLAGS=""
          if test "$_CHECK_PATH_" = "NO_EXPLICIT_PATH"; then
             _CHECK_PATH_=""
          else
             if test ! -d "$_CHECK_PATH_"; then
                continue
             fi
             INCLUDE_FLAGS="-I$_CHECK_PATH_"
          fi

          # Using set to capitalize the string and replace / with _
          _SCI_HEADER_NAME_=`echo $_HEADER_ | sed -e 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`
          eval $_SCI_HEADER_NAME_=''
          _SCI_HEADER_HAVE_=HAVE_$_SCI_HEADER_NAME_
          _SCI_INCLUDE_NAME_=INC_$_SCI_HEADER_NAME_

          ac_try="$theCompiler $CFLAGS -c conftest.$theExt $INCLUDE_FLAGS  >/dev/null 2>conftest.out"
          cat > conftest.$theExt <<EOF
          #include "confdefs.h"
          #include <$_HEADER_>
          int main() {
            return 0;
          }
EOF
          rm -f conftest.o
          (eval $ac_try) 2>&5

          if test -f conftest.o; then
             if test "$_CHECK_PATH_" != ""; then
                if test -f "$_CHECK_PATH_/$_HEADER_"; then
                   echo "$as_me:$LINENO: result: $_CHECK_PATH_" >&5
echo "${ECHO_T}$_CHECK_PATH_" >&6
                   eval $_SCI_INCLUDE_NAME_=-I$_CHECK_PATH_
                else
                   # Even though the compilation was successful,
                   # it was because the header was in the generic
                   # compiler path, not because it was in the path we just
                   # tested.  Thus, we really did not succeed.
                   if test "$debugging" = "yes"; then
                      echo "False alarm, will keep trying"
                   fi
                   continue
                fi
             else
	        echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6
             fi
             eval $_SCI_HEADER_HAVE_=yes

	     if test "$debugging" = "yes"; then
	        eval echo "HAVE_$_SCI_HEADER_NAME_ is $"$_SCI_HEADER_HAVE_""
		eval echo "INC_$_SCI_HEADER_NAME_ is $"$_SCI_INCLUDE_NAME_""
	     fi

             # Save a list of defines in confdefs.h.  Something
	     # later removes a bunch of them... haven't been able
             # to figure out what yet.
	     cat >> confdefs.h <<EOF
#define $_SCI_HEADER_HAVE_ 1
EOF
             break
          fi
       done ## End: loop over paths to search

       # For some reason putting the eval statement directly in the
       # following "if test" statement doesn't work... so I do it here.
       eval result='$'$_SCI_HEADER_HAVE_

       if test "$result" = ""; then
          # Didn't find the .h file.
          echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6

          if test "$_SCI_HEADER_OPTIONAL_" = "not-optional"; then
             { echo "$as_me:$LINENO: WARNING: Required include file $_HEADER_ not found." >&5
echo "$as_me: WARNING: Required include file $_HEADER_ not found." >&2;}
             { echo "$as_me:$LINENO: WARNING: Command line for test was: $ac_try" >&5
echo "$as_me: WARNING: Command line for test was: $ac_try" >&2;}
             { echo "$as_me:$LINENO: WARNING: Compile output was:" >&5
echo "$as_me: WARNING: Compile output was:" >&2;}
             cat conftest.out

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Exiting configure script. Bye." >&5
echo "$as_me: error: Exiting configure script. Bye." >&2;}
   { (exit 1); exit 1; }; }

          fi
       fi

    done ## End: loop over .h files


if test "$HAVE_SSTREAM"; then
   SSTREAM_COMPAT="no"
else
   # Use SCIRun sstream compatibility files...
   SSTREAM_COMPAT="yes"
fi



##  --  finis flags  ------------------------------------------------
case $host in
  *-irix*)
    LDFLAGS="$LDFLAGS -J\$(MAKE_PARALLELISM) $(TLINK)"
    ;;
  *linux*)
    ;;
  *aix*)
    ;;
  *dec*)
    ;;
  *)
    ;;
esac

##  --  search for uuid functions, either uuid_create or uuid_generate ----

# This is typical on SGI and ??
echo "$as_me:$LINENO: checking for uuid_create in sys/uuid.h" >&5
echo $ECHO_N "checking for uuid_create in sys/uuid.h... $ECHO_C" >&6
cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"
#include <sys/types.h>
             extern "C" {
                #include <sys/uuid.h>
             }
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
char* uuid_str;
	 uuid_t uuid;
	 uint_t status;
	 uuid_create(&uuid, &status);
  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  have_uuid=yes
         cat >>confdefs.h <<\_ACEOF
#define HAVE_SYS_UUID_H 1
_ACEOF

else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
have_uuid=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext
echo "$as_me:$LINENO: result: $have_uuid" >&5
echo "${ECHO_T}$have_uuid" >&6

if test "$have_uuid" != "yes"; then
  # This is typical on linux and ??
  echo "$as_me:$LINENO: checking for uuid_generate in uuid/uuid.h" >&5
echo $ECHO_N "checking for uuid_generate in uuid/uuid.h... $ECHO_C" >&6
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"

extern "C" { // The linux uuid.h doesn't have this, so we need exter C here
#include <uuid/uuid.h>
}
#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{
uuid_t uuid;
	 char uuid_str[64];
	 uuid_generate(uuid);
	 uuid_unparse(uuid, uuid_str);
  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  have_uuid=yes
         cat >>confdefs.h <<\_ACEOF
#define HAVE_UUID_UUID_H 1
_ACEOF

else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
have_uuid=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext
  echo "$as_me:$LINENO: result: $have_uuid" >&5
echo "${ECHO_T}$have_uuid" >&6
fi

if test "$have_uuid" = "yes"; then
  echo "$as_me:$LINENO: checking for uuid library" >&5
echo $ECHO_N "checking for uuid library... $ECHO_C" >&6
  old_LIBS=$LIBS
  for i in "" -luuid; do
    LIBS="$old_LIBS $i"
    cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
#include "confdefs.h"

#if HAVE_SYS_UUID_H
#include <sys/types.h>
extern "C" { // SGI uuid.h doesn't have this, so we need extern C here
#include <sys/uuid.h>
}
#define UUID_CREATE
#else
#if HAVE_UUID_UUID_H
extern "C" { // The linux uuid.h does not have this, so we need extern C here
#include <uuid/uuid.h>
}
#define UUID_GENERATE
#else
#error We need either sys/uuid.h or uuid/uuid.h
#endif
#endif

#ifdef F77_DUMMY_MAIN
#  ifdef __cplusplus
     extern "C"
#  endif
   int F77_DUMMY_MAIN() { return 1; }
#endif
int
main ()
{

  uuid_t uuid;
#if defined(UUID_CREATE)
  char* uuid_str;
  uint_t status;
  uuid_create(&uuid, &status);
  uuid_to_string(&uuid, &uuid_str, &status);
#else
#if defined( UUID_GENERATE)
  char uuid_str[64];
  uuid_generate( uuid );
  uuid_unparse(uuid, uuid_str);
#endif
#endif

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext conftest$ac_exeext
if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
  (eval $ac_link) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest$ac_exeext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then

  UUID_LIB_FLAG=$i
  break

else
  echo "$as_me: failed program was:" >&5
cat conftest.$ac_ext >&5
fi
rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext
  done
  if test "$UUID_LIB_FLAG" != unknown; then
    if test -z "$UUID_LIB_FLAG"; then
      echo "$as_me:$LINENO: result: none required" >&5
echo "${ECHO_T}none required" >&6
    else
      echo "$as_me:$LINENO: result: $UUID_LIB_FLAG" >&5
echo "${ECHO_T}$UUID_LIB_FLAG" >&6
    fi
  else
    echo "$as_me:$LINENO: result: not found" >&5
echo "${ECHO_T}not found" >&6
    have_uuid=no
  fi
fi



##  --  See if we have everything needed for SCIRun2 ----------------------

if test "$enable_scirun2" = "yes"; then
  if test "$HAVE_GLOBUS" != "yes"; then
    if test "$with_globus" = "no"; then

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Must include --with-globus with --enable-scirun2" >&5
echo "$as_me: error: Must include --with-globus with --enable-scirun2" >&2;}
   { (exit 1); exit 1; }; }

    else

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Globus not found required for scirun2" >&5
echo "$as_me: error: Globus not found required for scirun2" >&2;}
   { (exit 1); exit 1; }; }

    fi
    exit 1
  fi
  if test "$have_uuid" != "yes"; then
    case $host in
      *linux*)

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: uuid_generate function and libuuid not found" >&5
echo "$as_me: error: uuid_generate function and libuuid not found" >&2;}
   { (exit 1); exit 1; }; }

        ;;
      *)

      ## SCI_MSG_ERROR
      if test -z "$debugging"; then
         echo
         { echo "$as_me:$LINENO: WARNING: Adding '--enable-verbosity' to configure line" >&5
echo "$as_me: WARNING: Adding '--enable-verbosity' to configure line" >&2;}
         { echo "$as_me:$LINENO: WARNING: _may_ give more information about what is breaking" >&5
echo "$as_me: WARNING: _may_ give more information about what is breaking" >&2;}
      fi
      echo
      { { echo "$as_me:$LINENO: error: Cannot find uuid_generate or uuid_create" >&5
echo "$as_me: error: Cannot find uuid_generate or uuid_create" >&2;}
   { (exit 1); exit 1; }; }

        ;;
    esac
    exit 1
  fi
# Do not require Qt for SCIRun2 yet:
#  if test "$HAVE_QT" != "yes"; then
#    if test "$with_qt" = "no"; then
#      SCI_MSG_ERROR(Must include --with-qt with --enable-scirun2)
#    else
#      SCI_MSG_ERROR(Qt not found required for scirun2)
#    fi
#    exit 1
#  fi
  DEF_SCIRUN2="#define SCIRUN2"
  BUILD_SCIRUN2="yes"
else
  DEF_SCIRUN2=""
  BUILD_SCIRUN2="no"
fi




##  ---------------------------------------------------------------------
##  --------------------  configure packages  ---------------------------
##  ---------------------------------------------------------------------

##  nothing here yet

##  ---------------------------------------------------------------------
##  --------------------  generate output files  ------------------------
##  ---------------------------------------------------------------------

abs_conftop_dir=`pwd`;

abs_srcdir=`(cd ${srcdir};pwd)`


##  make list of all the output files
output_files="configVars.mk \
              Makefile \
              on-the-fly-libs/Makefile \
              disjointPackageMakefile \
              sci_testdefs.h"

##   Only do the following if configuring with Uintah
##   Add a list of Uintah specific output files.
if test "$pkg_uintah" = "yes" ; then
   output_files="$output_files Packages/Uintah/tools/fspec.pl"
fi

#  ignore --no-create and --no-recursion flags
no_create=no
no_recursion=no

ac_config_files="$ac_config_files $output_files"
ac_config_commands="$ac_config_commands default"
cat >confcache <<\_ACEOF
# This file is a shell script that caches the results of configure
# tests run on this system so they can be shared between configure
# scripts and configure runs, see configure's option --config-cache.
# It is not useful on other systems.  If it contains results you don't
# want to keep, you may remove or edit it.
#
# config.status only pays attention to the cache file if you give it
# the --recheck option to rerun configure.
#
# `ac_cv_env_foo' variables (set or unset) will be overriden when
# loading this file, other *unset* `ac_cv_foo' will be assigned the
# following values.

_ACEOF

# The following way of writing the cache mishandles newlines in values,
# but we know of no workaround that is simple, portable, and efficient.
# So, don't put newlines in cache variables' values.
# Ultrix sh set writes to stderr and can't be redirected directly,
# and sets the high bit in the cache file unless we assign to the vars.
{
  (set) 2>&1 |
    case `(ac_space=' '; set | grep ac_space) 2>&1` in
    *ac_space=\ *)
      # `set' does not quote correctly, so add quotes (double-quote
      # substitution turns \\\\ into \\, and sed turns \\ into \).
      sed -n \
        "s/'/'\\\\''/g;
    	  s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1='\\2'/p"
      ;;
    *)
      # `set' quotes correctly as required by POSIX, so do not add quotes.
      sed -n \
        "s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1=\\2/p"
      ;;
    esac;
} |
  sed '
     t clear
     : clear
     s/^\([^=]*\)=\(.*[{}].*\)$/test "${\1+set}" = set || &/
     t end
     /^ac_cv_env/!s/^\([^=]*\)=\(.*\)$/\1=${\1=\2}/
     : end' >>confcache
if cmp -s $cache_file confcache; then :; else
  if test -w $cache_file; then
    test "x$cache_file" != "x/dev/null" && echo "updating cache $cache_file"
    cat confcache >$cache_file
  else
    echo "not updating unwritable cache $cache_file"
  fi
fi
rm -f confcache

test "x$prefix" = xNONE && prefix=$ac_default_prefix
# Let make expand exec_prefix.
test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'

# VPATH may cause trouble with some makes, so we remove $(srcdir),
# ${srcdir} and @srcdir@ from VPATH if srcdir is ".", strip leading and
# trailing colons and then remove the whole line if VPATH becomes empty
# (actually we leave an empty line to preserve line numbers).
if test "x$srcdir" = x.; then
  ac_vpsub='/^[ 	]*VPATH[ 	]*=/{
s/:*\$(srcdir):*/:/;
s/:*\${srcdir}:*/:/;
s/:*@srcdir@:*/:/;
s/^\([^=]*=[ 	]*\):*/\1/;
s/:*$//;
s/^[^=]*=[ 	]*$//;
}'
fi

DEFS=-DHAVE_CONFIG_H


: ${CONFIG_STATUS=./config.status}
ac_clean_files_save=$ac_clean_files
ac_clean_files="$ac_clean_files $CONFIG_STATUS"
{ echo "$as_me:$LINENO: creating $CONFIG_STATUS" >&5
echo "$as_me: creating $CONFIG_STATUS" >&6;}
cat >$CONFIG_STATUS <<_ACEOF
#! $SHELL
# Generated by $as_me.
# Run this file to recreate the current configuration.
# Compiler output produced by configure, useful for debugging
# configure, is in config.log if it exists.

debug=false
SHELL=\${CONFIG_SHELL-$SHELL}
_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF

## --------------------- ##
## M4sh Initialization.  ##
## --------------------- ##

# Be Bourne compatible
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
elif test -n "${BASH_VERSION+set}" && (set -o posix) >/dev/null 2>&1; then
  set -o posix
fi

# NLS nuisances.
# Support unset when possible.
if (FOO=FOO; unset FOO) >/dev/null 2>&1; then
  as_unset=unset
else
  as_unset=false
fi

(set +x; test -n "`(LANG=C; export LANG) 2>&1`") &&
    { $as_unset LANG || test "${LANG+set}" != set; } ||
      { LANG=C; export LANG; }
(set +x; test -n "`(LC_ALL=C; export LC_ALL) 2>&1`") &&
    { $as_unset LC_ALL || test "${LC_ALL+set}" != set; } ||
      { LC_ALL=C; export LC_ALL; }
(set +x; test -n "`(LC_TIME=C; export LC_TIME) 2>&1`") &&
    { $as_unset LC_TIME || test "${LC_TIME+set}" != set; } ||
      { LC_TIME=C; export LC_TIME; }
(set +x; test -n "`(LC_CTYPE=C; export LC_CTYPE) 2>&1`") &&
    { $as_unset LC_CTYPE || test "${LC_CTYPE+set}" != set; } ||
      { LC_CTYPE=C; export LC_CTYPE; }
(set +x; test -n "`(LANGUAGE=C; export LANGUAGE) 2>&1`") &&
    { $as_unset LANGUAGE || test "${LANGUAGE+set}" != set; } ||
      { LANGUAGE=C; export LANGUAGE; }
(set +x; test -n "`(LC_COLLATE=C; export LC_COLLATE) 2>&1`") &&
    { $as_unset LC_COLLATE || test "${LC_COLLATE+set}" != set; } ||
      { LC_COLLATE=C; export LC_COLLATE; }
(set +x; test -n "`(LC_NUMERIC=C; export LC_NUMERIC) 2>&1`") &&
    { $as_unset LC_NUMERIC || test "${LC_NUMERIC+set}" != set; } ||
      { LC_NUMERIC=C; export LC_NUMERIC; }
(set +x; test -n "`(LC_MESSAGES=C; export LC_MESSAGES) 2>&1`") &&
    { $as_unset LC_MESSAGES || test "${LC_MESSAGES+set}" != set; } ||
      { LC_MESSAGES=C; export LC_MESSAGES; }


# Name of the executable.
as_me=`(basename "$0") 2>/dev/null ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)$' \| \
	 .     : '\(.\)' 2>/dev/null ||
echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{ s//\1/; q; }
  	  /^X\/\(\/\/\)$/{ s//\1/; q; }
  	  /^X\/\(\/\).*/{ s//\1/; q; }
  	  s/.*/./; q'`

# PATH needs CR, and LINENO needs CR and PATH.
# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  echo "#! /bin/sh" >conftest.sh
  echo  "exit 0"   >>conftest.sh
  chmod +x conftest.sh
  if (PATH=".;."; conftest.sh) >/dev/null 2>&1; then
    PATH_SEPARATOR=';'
  else
    PATH_SEPARATOR=:
  fi
  rm -f conftest.sh
fi


  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  as_lineno_3=`(expr $as_lineno_1 + 1) 2>/dev/null`
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x$as_lineno_3"  = "x$as_lineno_2"  || {
  # Find who we are.  Look in the path if we contain no path at all
  # relative or not.
  case $0 in
    *[\\/]* ) as_myself=$0 ;;
    *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
done

       ;;
  esac
  # We did not find ourselves, most probably we were run as `sh COMMAND'
  # in which case we are not to be found in the path.
  if test "x$as_myself" = x; then
    as_myself=$0
  fi
  if test ! -f "$as_myself"; then
    { { echo "$as_me:$LINENO: error: cannot find myself; rerun with an absolute path" >&5
echo "$as_me: error: cannot find myself; rerun with an absolute path" >&2;}
   { (exit 1); exit 1; }; }
  fi
  case $CONFIG_SHELL in
  '')
    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for as_base in sh bash ksh sh5; do
	 case $as_dir in
	 /*)
	   if ("$as_dir/$as_base" -c '
  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  as_lineno_3=`(expr $as_lineno_1 + 1) 2>/dev/null`
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x$as_lineno_3"  = "x$as_lineno_2" ') 2>/dev/null; then
	     CONFIG_SHELL=$as_dir/$as_base
	     export CONFIG_SHELL
	     exec "$CONFIG_SHELL" "$0" ${1+"$@"}
	   fi;;
	 esac
       done
done
;;
  esac

  # Create $as_me.lineno as a copy of $as_myself, but with $LINENO
  # uniformly replaced by the line number.  The first 'sed' inserts a
  # line-number line before each line; the second 'sed' does the real
  # work.  The second script uses 'N' to pair each line-number line
  # with the numbered line, and appends trailing '-' during
  # substitution so that $LINENO is not a special case at line end.
  # (Raja R Harinath suggested sed '=', and Paul Eggert wrote the
  # second 'sed' script.  Blame Lee E. McMahon for sed's syntax.  :-)
  sed '=' <$as_myself |
    sed '
      N
      s,$,-,
      : loop
      s,^\(['$as_cr_digits']*\)\(.*\)[$]LINENO\([^'$as_cr_alnum'_]\),\1\2\1\3,
      t loop
      s,-$,,
      s,^['$as_cr_digits']*\n,,
    ' >$as_me.lineno &&
  chmod +x $as_me.lineno ||
    { { echo "$as_me:$LINENO: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&5
echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2;}
   { (exit 1); exit 1; }; }

  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensible to this).
  . ./$as_me.lineno
  # Exit status is that of the last command.
  exit
}


case `echo "testing\c"; echo 1,2,3`,`echo -n testing; echo 1,2,3` in
  *c*,-n*) ECHO_N= ECHO_C='
' ECHO_T='	' ;;
  *c*,*  ) ECHO_N=-n ECHO_C= ECHO_T= ;;
  *)       ECHO_N= ECHO_C='\c' ECHO_T= ;;
esac

if expr a : '\(a\)' >/dev/null 2>&1; then
  as_expr=expr
else
  as_expr=false
fi

rm -f conf$$ conf$$.exe conf$$.file
echo >conf$$.file
if ln -s conf$$.file conf$$ 2>/dev/null; then
  # We could just check for DJGPP; but this test a) works b) is more generic
  # and c) will remain valid once DJGPP supports symlinks (DJGPP 2.04).
  if test -f conf$$.exe; then
    # Don't use ln at all; we don't have any links
    as_ln_s='cp -p'
  else
    as_ln_s='ln -s'
  fi
elif ln conf$$.file conf$$ 2>/dev/null; then
  as_ln_s=ln
else
  as_ln_s='cp -p'
fi
rm -f conf$$ conf$$.exe conf$$.file

as_executable_p="test -f"

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="sed y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="sed y%*+%pp%;s%[^_$as_cr_alnum]%_%g"


# IFS
# We need space, tab and new line, in precisely that order.
as_nl='
'
IFS=" 	$as_nl"

# CDPATH.
$as_unset CDPATH || test "${CDPATH+set}" != set || { CDPATH=$PATH_SEPARATOR; export CDPATH; }

exec 6>&1

# Open the log real soon, to keep \$[0] and so on meaningful, and to
# report actual input values of CONFIG_FILES etc. instead of their
# values after options handling.  Logging --version etc. is OK.
exec 5>>config.log
{
  echo
  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## Running $as_me. ##
_ASBOX
} >&5
cat >&5 <<_CSEOF

This file was extended by $as_me, which was
generated by GNU Autoconf 2.53.  Invocation command line was

  CONFIG_FILES    = $CONFIG_FILES
  CONFIG_HEADERS  = $CONFIG_HEADERS
  CONFIG_LINKS    = $CONFIG_LINKS
  CONFIG_COMMANDS = $CONFIG_COMMANDS
  $ $0 $@

_CSEOF
echo "on `(hostname || uname -n) 2>/dev/null | sed 1q`" >&5
echo >&5
_ACEOF

# Files that config.status was made for.
if test -n "$ac_config_files"; then
  echo "config_files=\"$ac_config_files\"" >>$CONFIG_STATUS
fi

if test -n "$ac_config_headers"; then
  echo "config_headers=\"$ac_config_headers\"" >>$CONFIG_STATUS
fi

if test -n "$ac_config_links"; then
  echo "config_links=\"$ac_config_links\"" >>$CONFIG_STATUS
fi

if test -n "$ac_config_commands"; then
  echo "config_commands=\"$ac_config_commands\"" >>$CONFIG_STATUS
fi

cat >>$CONFIG_STATUS <<\_ACEOF

ac_cs_usage="\
\`$as_me' instantiates files from templates according to the
current configuration.

Usage: $0 [OPTIONS] [FILE]...

  -h, --help       print this help, then exit
  -V, --version    print version number, then exit
  -d, --debug      don't remove temporary files
      --recheck    update $as_me by reconfiguring in the same conditions
  --file=FILE[:TEMPLATE]
                   instantiate the configuration file FILE
  --header=FILE[:TEMPLATE]
                   instantiate the configuration header FILE

Configuration files:
$config_files

Configuration headers:
$config_headers

Configuration commands:
$config_commands

Report bugs to <bug-autoconf@gnu.org>."
_ACEOF

cat >>$CONFIG_STATUS <<_ACEOF
ac_cs_version="\\
config.status
configured by $0, generated by GNU Autoconf 2.53,
  with options \\"`echo "$ac_configure_args" | sed 's/[\\""\`\$]/\\\\&/g'`\\"

Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001
Free Software Foundation, Inc.
This config.status script is free software; the Free Software Foundation
gives unlimited permission to copy, distribute and modify it."
srcdir=$srcdir
_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF
# If no file are specified by the user, then we need to provide default
# value.  By we need to know if files were specified by the user.
ac_need_defaults=:
while test $# != 0
do
  case $1 in
  --*=*)
    ac_option=`expr "x$1" : 'x\([^=]*\)='`
    ac_optarg=`expr "x$1" : 'x[^=]*=\(.*\)'`
    shift
    set dummy "$ac_option" "$ac_optarg" ${1+"$@"}
    shift
    ;;
  -*);;
  *) # This is not an option, so the user has probably given explicit
     # arguments.
     ac_need_defaults=false;;
  esac

  case $1 in
  # Handling of the options.
_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF
  -recheck | --recheck | --rechec | --reche | --rech | --rec | --re | --r)
    echo "running $SHELL $0 " $ac_configure_args " --no-create --no-recursion"
    exec $SHELL $0 $ac_configure_args --no-create --no-recursion ;;
_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF
  --version | --vers* | -V )
    echo "$ac_cs_version"; exit 0 ;;
  --he | --h)
    # Conflict between --help and --header
    { { echo "$as_me:$LINENO: error: ambiguous option: $1
Try \`$0 --help' for more information." >&5
echo "$as_me: error: ambiguous option: $1
Try \`$0 --help' for more information." >&2;}
   { (exit 1); exit 1; }; };;
  --help | --hel | -h )
    echo "$ac_cs_usage"; exit 0 ;;
  --debug | --d* | -d )
    debug=: ;;
  --file | --fil | --fi | --f )
    shift
    CONFIG_FILES="$CONFIG_FILES $1"
    ac_need_defaults=false;;
  --header | --heade | --head | --hea )
    shift
    CONFIG_HEADERS="$CONFIG_HEADERS $1"
    ac_need_defaults=false;;

  # This is an error.
  -*) { { echo "$as_me:$LINENO: error: unrecognized option: $1
Try \`$0 --help' for more information." >&5
echo "$as_me: error: unrecognized option: $1
Try \`$0 --help' for more information." >&2;}
   { (exit 1); exit 1; }; } ;;

  *) ac_config_targets="$ac_config_targets $1" ;;

  esac
  shift
done

_ACEOF





cat >>$CONFIG_STATUS <<\_ACEOF
for ac_config_target in $ac_config_targets
do
  case "$ac_config_target" in
  # Handling of arguments.
  "$output_files" ) CONFIG_FILES="$CONFIG_FILES $output_files" ;;
  "default" ) CONFIG_COMMANDS="$CONFIG_COMMANDS default" ;;
  "sci_config.h" ) CONFIG_HEADERS="$CONFIG_HEADERS sci_config.h" ;;
  *) { { echo "$as_me:$LINENO: error: invalid argument: $ac_config_target" >&5
echo "$as_me: error: invalid argument: $ac_config_target" >&2;}
   { (exit 1); exit 1; }; };;
  esac
done

# If the user did not use the arguments to specify the items to instantiate,
# then the envvar interface is used.  Set only those that are not.
# We use the long form for the default assignment because of an extremely
# bizarre bug on SunOS 4.1.3.
if $ac_need_defaults; then
  test "${CONFIG_FILES+set}" = set || CONFIG_FILES=$config_files
  test "${CONFIG_HEADERS+set}" = set || CONFIG_HEADERS=$config_headers
  test "${CONFIG_COMMANDS+set}" = set || CONFIG_COMMANDS=$config_commands
fi

# Create a temporary directory, and hook for its removal unless debugging.
$debug ||
{
  trap 'exit_status=$?; rm -rf $tmp && exit $exit_status' 0
  trap '{ (exit 1); exit 1; }' 1 2 13 15
}

# Create a (secure) tmp directory for tmp files.
: ${TMPDIR=/tmp}
{
  tmp=`(umask 077 && mktemp -d -q "$TMPDIR/csXXXXXX") 2>/dev/null` &&
  test -n "$tmp" && test -d "$tmp"
}  ||
{
  tmp=$TMPDIR/cs$$-$RANDOM
  (umask 077 && mkdir $tmp)
} ||
{
   echo "$me: cannot create a temporary directory in $TMPDIR" >&2
   { (exit 1); exit 1; }
}

_ACEOF

cat >>$CONFIG_STATUS <<_ACEOF

#
# CONFIG_FILES section.
#

# No need to generate the scripts if there are no CONFIG_FILES.
# This happens for instance when ./config.status config.h
if test -n "\$CONFIG_FILES"; then
  # Protect against being on the right side of a sed subst in config.status.
  sed 's/,@/@@/; s/@,/@@/; s/,;t t\$/@;t t/; /@;t t\$/s/[\\\\&,]/\\\\&/g;
   s/@@/,@/; s/@@/@,/; s/@;t t\$/,;t t/' >\$tmp/subs.sed <<\\CEOF
s,@SHELL@,$SHELL,;t t
s,@PATH_SEPARATOR@,$PATH_SEPARATOR,;t t
s,@PACKAGE_NAME@,$PACKAGE_NAME,;t t
s,@PACKAGE_TARNAME@,$PACKAGE_TARNAME,;t t
s,@PACKAGE_VERSION@,$PACKAGE_VERSION,;t t
s,@PACKAGE_STRING@,$PACKAGE_STRING,;t t
s,@PACKAGE_BUGREPORT@,$PACKAGE_BUGREPORT,;t t
s,@exec_prefix@,$exec_prefix,;t t
s,@prefix@,$prefix,;t t
s,@program_transform_name@,$program_transform_name,;t t
s,@bindir@,$bindir,;t t
s,@sbindir@,$sbindir,;t t
s,@libexecdir@,$libexecdir,;t t
s,@datadir@,$datadir,;t t
s,@sysconfdir@,$sysconfdir,;t t
s,@sharedstatedir@,$sharedstatedir,;t t
s,@localstatedir@,$localstatedir,;t t
s,@libdir@,$libdir,;t t
s,@includedir@,$includedir,;t t
s,@oldincludedir@,$oldincludedir,;t t
s,@infodir@,$infodir,;t t
s,@mandir@,$mandir,;t t
s,@build_alias@,$build_alias,;t t
s,@host_alias@,$host_alias,;t t
s,@target_alias@,$target_alias,;t t
s,@DEFS@,$DEFS,;t t
s,@ECHO_C@,$ECHO_C,;t t
s,@ECHO_N@,$ECHO_N,;t t
s,@ECHO_T@,$ECHO_T,;t t
s,@LIBS@,$LIBS,;t t
s,@CC@,$CC,;t t
s,@CFLAGS@,$CFLAGS,;t t
s,@LDFLAGS@,$LDFLAGS,;t t
s,@CPPFLAGS@,$CPPFLAGS,;t t
s,@ac_ct_CC@,$ac_ct_CC,;t t
s,@EXEEXT@,$EXEEXT,;t t
s,@OBJEXT@,$OBJEXT,;t t
s,@CXX@,$CXX,;t t
s,@CXXFLAGS@,$CXXFLAGS,;t t
s,@ac_ct_CXX@,$ac_ct_CXX,;t t
s,@F77@,$F77,;t t
s,@FFLAGS@,$FFLAGS,;t t
s,@ac_ct_F77@,$ac_ct_F77,;t t
s,@build@,$build,;t t
s,@build_cpu@,$build_cpu,;t t
s,@build_vendor@,$build_vendor,;t t
s,@build_os@,$build_os,;t t
s,@host@,$host,;t t
s,@host_cpu@,$host_cpu,;t t
s,@host_vendor@,$host_vendor,;t t
s,@host_os@,$host_os,;t t
s,@HAVE_OSX@,$HAVE_OSX,;t t
s,@SO_OR_ARCHIVE_EXTENSION@,$SO_OR_ARCHIVE_EXTENSION,;t t
s,@ASSERTION_LEVEL@,$ASSERTION_LEVEL,;t t
s,@NOPRINTDIR@,$NOPRINTDIR,;t t
s,@DEF_MALLOC@,$DEF_MALLOC,;t t
s,@PACKAGE_DIRS@,$PACKAGE_DIRS,;t t
s,@LOAD_PACKAGE@,$LOAD_PACKAGE,;t t
s,@EXENAME@,$EXENAME,;t t
s,@LARGESOS@,$LARGESOS,;t t
s,@TIME_IMPL@,$TIME_IMPL,;t t
s,@AS@,$AS,;t t
s,@LD@,$LD,;t t
s,@CPP@,$CPP,;t t
s,@CXXCPP@,$CXXCPP,;t t
s,@CC_DEPEND_MODE@,$CC_DEPEND_MODE,;t t
s,@CC_DEPEND_REGEN@,$CC_DEPEND_REGEN,;t t
s,@CC_DEPEND_EXT@,$CC_DEPEND_EXT,;t t
s,@F77_DEPEND_MODE@,$F77_DEPEND_MODE,;t t
s,@F77_DEPEND_REGEN@,$F77_DEPEND_REGEN,;t t
s,@F77_DEPEND_EXT@,$F77_DEPEND_EXT,;t t
s,@GMAKE@,$GMAKE,;t t
s,@MAKE@,$MAKE,;t t
s,@AWK@,$AWK,;t t
s,@YACC@,$YACC,;t t
s,@LEX@,$LEX,;t t
s,@LEXLIB@,$LEXLIB,;t t
s,@LEX_OUTPUT_ROOT@,$LEX_OUTPUT_ROOT,;t t
s,@LEX_LIB_FLAG@,$LEX_LIB_FLAG,;t t
s,@PERL@,$PERL,;t t
s,@ETAGS@,$ETAGS,;t t
s,@FORTRAN_UNDERSCORE@,$FORTRAN_UNDERSCORE,;t t
s,@G77@,$G77,;t t
s,@SOFLAGS@,$SOFLAGS,;t t
s,@ASFLAGS@,$ASFLAGS,;t t
s,@LDRUN_PREFIX@,$LDRUN_PREFIX,;t t
s,@extra_cflags@,$extra_cflags,;t t
s,@MAKE_PARALLELISM@,$MAKE_PARALLELISM,;t t
s,@NEED_SONAME@,$NEED_SONAME,;t t
s,@REPOSITORY_FLAGS@,$REPOSITORY_FLAGS,;t t
s,@TEMPLATE_TAG@,$TEMPLATE_TAG,;t t
s,@TEMPLATE_BOX@,$TEMPLATE_BOX,;t t
s,@NBITS@,$NBITS,;t t
s,@HAVE_INSIGHT@,$HAVE_INSIGHT,;t t
s,@INSIGHT_LIB_FLAG@,$INSIGHT_LIB_FLAG,;t t
s,@INSIGHT_LIB_DIR_FLAG@,$INSIGHT_LIB_DIR_FLAG,;t t
s,@INC_INSIGHT_H@,$INC_INSIGHT_H,;t t
s,@DEF_INSIGHT@,$DEF_INSIGHT,;t t
s,@M_LIB_FLAG@,$M_LIB_FLAG,;t t
s,@M_LIB_DIR_FLAG@,$M_LIB_DIR_FLAG,;t t
s,@X11_LIB_FLAG@,$X11_LIB_FLAG,;t t
s,@X11_LIB_DIR_FLAG@,$X11_LIB_DIR_FLAG,;t t
s,@XEXT_LIB_FLAG@,$XEXT_LIB_FLAG,;t t
s,@XEXT_LIB_DIR_FLAG@,$XEXT_LIB_DIR_FLAG,;t t
s,@XI_LIB_FLAG@,$XI_LIB_FLAG,;t t
s,@XI_LIB_DIR_FLAG@,$XI_LIB_DIR_FLAG,;t t
s,@XT_LIB_FLAG@,$XT_LIB_FLAG,;t t
s,@XT_LIB_DIR_FLAG@,$XT_LIB_DIR_FLAG,;t t
s,@XMU_LIB_FLAG@,$XMU_LIB_FLAG,;t t
s,@XMU_LIB_DIR_FLAG@,$XMU_LIB_DIR_FLAG,;t t
s,@XAW_LIB_FLAG@,$XAW_LIB_FLAG,;t t
s,@XAW_LIB_DIR_FLAG@,$XAW_LIB_DIR_FLAG,;t t
s,@INC_XLIB_H@,$INC_XLIB_H,;t t
s,@F_LIB_FLAG@,$F_LIB_FLAG,;t t
s,@THREAD_IMPL@,$THREAD_IMPL,;t t
s,@THREAD_LIB_FLAG@,$THREAD_LIB_FLAG,;t t
s,@DEF_THREAD@,$DEF_THREAD,;t t
s,@SEMAPHORE_LIB_FLAG@,$SEMAPHORE_LIB_FLAG,;t t
s,@GL_LIB_FLAG@,$GL_LIB_FLAG,;t t
s,@GL_LIB_DIR_FLAG@,$GL_LIB_DIR_FLAG,;t t
s,@GLU_LIB_FLAG@,$GLU_LIB_FLAG,;t t
s,@GLU_LIB_DIR_FLAG@,$GLU_LIB_DIR_FLAG,;t t
s,@INC_GL_H@,$INC_GL_H,;t t
s,@JPEG_LIB_FLAG@,$JPEG_LIB_FLAG,;t t
s,@JPEG_LIB_DIR_FLAG@,$JPEG_LIB_DIR_FLAG,;t t
s,@TIFF_LIB_FLAG@,$TIFF_LIB_FLAG,;t t
s,@TIFF_LIB_DIR_FLAG@,$TIFF_LIB_DIR_FLAG,;t t
s,@NETSOLVE_LIB_FLAG@,$NETSOLVE_LIB_FLAG,;t t
s,@NETSOLVE_LIB_DIR_FLAG@,$NETSOLVE_LIB_DIR_FLAG,;t t
s,@INC_GL_GLUT_H@,$INC_GL_GLUT_H,;t t
s,@GLUT_LIB_FLAG@,$GLUT_LIB_FLAG,;t t
s,@GLUT_LIB_DIR_FLAG@,$GLUT_LIB_DIR_FLAG,;t t
s,@INC_GLUI_H@,$INC_GLUI_H,;t t
s,@GLUI_LIB_FLAG@,$GLUI_LIB_FLAG,;t t
s,@GLUI_LIB_DIR_FLAG@,$GLUI_LIB_DIR_FLAG,;t t
s,@INC_OOGL_H@,$INC_OOGL_H,;t t
s,@DEF_OOGL@,$DEF_OOGL,;t t
s,@OOGL_LIB_FLAG@,$OOGL_LIB_FLAG,;t t
s,@OOGL_LIB_DIR_FLAG@,$OOGL_LIB_DIR_FLAG,;t t
s,@DEF_AUDIO@,$DEF_AUDIO,;t t
s,@HAVE_AUDIO@,$HAVE_AUDIO,;t t
s,@AUDIO_LIB_FLAG@,$AUDIO_LIB_FLAG,;t t
s,@AUDIO_LIB_DIR_FLAG@,$AUDIO_LIB_DIR_FLAG,;t t
s,@AUDIOFILE_LIB_FLAG@,$AUDIOFILE_LIB_FLAG,;t t
s,@AUDIOFILE_LIB_DIR_FLAG@,$AUDIOFILE_LIB_DIR_FLAG,;t t
s,@DL_LIB_FLAG@,$DL_LIB_FLAG,;t t
s,@DL_LIB_DIR_FLAG@,$DL_LIB_DIR_FLAG,;t t
s,@DEF_HASHMAP@,$DEF_HASHMAP,;t t
s,@LIB_DIR_TCL@,$LIB_DIR_TCL,;t t
s,@TCL_LIB_FLAG@,$TCL_LIB_FLAG,;t t
s,@TCL_LIB_DIR_FLAG@,$TCL_LIB_DIR_FLAG,;t t
s,@INC_TCL_H@,$INC_TCL_H,;t t
s,@DEF_TCL@,$DEF_TCL,;t t
s,@TK_LIB_FLAG@,$TK_LIB_FLAG,;t t
s,@TK_LIB_DIR_FLAG@,$TK_LIB_DIR_FLAG,;t t
s,@INC_TK_H@,$INC_TK_H,;t t
s,@LIB_DIR_ITCL@,$LIB_DIR_ITCL,;t t
s,@ITCL_LIB_FLAG@,$ITCL_LIB_FLAG,;t t
s,@ITCL_LIB_DIR_FLAG@,$ITCL_LIB_DIR_FLAG,;t t
s,@INC_ITCL_H@,$INC_ITCL_H,;t t
s,@ITK_LIB_FLAG@,$ITK_LIB_FLAG,;t t
s,@ITK_LIB_DIR_FLAG@,$ITK_LIB_DIR_FLAG,;t t
s,@INC_ITK_H@,$INC_ITK_H,;t t
s,@BLT_LIB_FLAG@,$BLT_LIB_FLAG,;t t
s,@BLT_LIB_DIR_FLAG@,$BLT_LIB_DIR_FLAG,;t t
s,@INC_BLT_H@,$INC_BLT_H,;t t
s,@DEF_COLLAB_VIS@,$DEF_COLLAB_VIS,;t t
s,@HAVE_COLLAB_VIS@,$HAVE_COLLAB_VIS,;t t
s,@PLPLOT_LIB_FLAG@,$PLPLOT_LIB_FLAG,;t t
s,@PLPLOT_LIB_DIR_FLAG@,$PLPLOT_LIB_DIR_FLAG,;t t
s,@INC_PLPLOT_H@,$INC_PLPLOT_H,;t t
s,@DEF_PLPLOT@,$DEF_PLPLOT,;t t
s,@TCLMATRIX_LIB_FLAG@,$TCLMATRIX_LIB_FLAG,;t t
s,@TCLMATRIX_LIB_DIR_FLAG@,$TCLMATRIX_LIB_DIR_FLAG,;t t
s,@INC_TCLMATRIX_H@,$INC_TCLMATRIX_H,;t t
s,@DEF_TCLMATRIX@,$DEF_TCLMATRIX,;t t
s,@TCL_PREFIX@,$TCL_PREFIX,;t t
s,@TCL_VERSION@,$TCL_VERSION,;t t
s,@TK_VERSION@,$TK_VERSION,;t t
s,@ITCL_WIDGETS@,$ITCL_WIDGETS,;t t
s,@XERCES_C_LIB_FLAG@,$XERCES_C_LIB_FLAG,;t t
s,@XERCES_C_LIB_DIR_FLAG@,$XERCES_C_LIB_DIR_FLAG,;t t
s,@INC_XERCESC_H@,$INC_XERCESC_H,;t t
s,@MPI_LIB_FLAG@,$MPI_LIB_FLAG,;t t
s,@MPI_LIB_DIR_FLAG@,$MPI_LIB_DIR_FLAG,;t t
s,@INC_MPI_H@,$INC_MPI_H,;t t
s,@DEF_MPI@,$DEF_MPI,;t t
s,@MPIUNI_LIB_FLAG@,$MPIUNI_LIB_FLAG,;t t
s,@MPIUNI_LIB_DIR_FLAG@,$MPIUNI_LIB_DIR_FLAG,;t t
s,@INC_MPIUNI_H@,$INC_MPIUNI_H,;t t
s,@DEF_MPIUNI@,$DEF_MPIUNI,;t t
s,@TAU_MAKEFILE@,$TAU_MAKEFILE,;t t
s,@TEEM_LIB_FLAG@,$TEEM_LIB_FLAG,;t t
s,@TEEM_LIB_DIR_FLAG@,$TEEM_LIB_DIR_FLAG,;t t
s,@INC_TEEM_H@,$INC_TEEM_H,;t t
s,@DEF_TEEM@,$DEF_TEEM,;t t
s,@MPEGE_LIB_FLAG@,$MPEGE_LIB_FLAG,;t t
s,@MPEGE_LIB_DIR_FLAG@,$MPEGE_LIB_DIR_FLAG,;t t
s,@DEF_MPEG@,$DEF_MPEG,;t t
s,@MDSPLUS_LIB_FLAG@,$MDSPLUS_LIB_FLAG,;t t
s,@MDSPLUS_LIB_DIR_FLAG@,$MDSPLUS_LIB_DIR_FLAG,;t t
s,@INC_MDSPLUS_H@,$INC_MDSPLUS_H,;t t
s,@DEF_MDSPLUS@,$DEF_MDSPLUS,;t t
s,@PERFEX_LIB_FLAG@,$PERFEX_LIB_FLAG,;t t
s,@PERFEX_LIB_DIR_FLAG@,$PERFEX_LIB_DIR_FLAG,;t t
s,@DEF_PERFEX@,$DEF_PERFEX,;t t
s,@FASTM_LIB_FLAG@,$FASTM_LIB_FLAG,;t t
s,@FASTM_LIB_DIR_FLAG@,$FASTM_LIB_DIR_FLAG,;t t
s,@DEF_FASTM@,$DEF_FASTM,;t t
s,@SSL_LIB_FLAG@,$SSL_LIB_FLAG,;t t
s,@SSL_LIB_DIR_FLAG@,$SSL_LIB_DIR_FLAG,;t t
s,@DEF_SSL@,$DEF_SSL,;t t
s,@CRYPTO_LIB_FLAG@,$CRYPTO_LIB_FLAG,;t t
s,@CRYPTO_LIB_DIR_FLAG@,$CRYPTO_LIB_DIR_FLAG,;t t
s,@DEF_CRYPTO@,$DEF_CRYPTO,;t t
s,@EXC_LIB_FLAG@,$EXC_LIB_FLAG,;t t
s,@EXC_LIB_DIR_FLAG@,$EXC_LIB_DIR_FLAG,;t t
s,@DEF_EXC@,$DEF_EXC,;t t
s,@GLOBUS_IO_LIB_FLAG@,$GLOBUS_IO_LIB_FLAG,;t t
s,@GLOBUS_IO_LIB_DIR_FLAG@,$GLOBUS_IO_LIB_DIR_FLAG,;t t
s,@GLOBUS_COMMON_LIB_FLAG@,$GLOBUS_COMMON_LIB_FLAG,;t t
s,@GLOBUS_COMMON_LIB_DIR_FLAG@,$GLOBUS_COMMON_LIB_DIR_FLAG,;t t
s,@GLOBUS_LIB_FLAG@,$GLOBUS_LIB_FLAG,;t t
s,@GLOBUS_LIB_DIR_FLAG@,$GLOBUS_LIB_DIR_FLAG,;t t
s,@GLOBUS_EXTRA_LIB_FLAG@,$GLOBUS_EXTRA_LIB_FLAG,;t t
s,@INC_GLOBUS_H@,$INC_GLOBUS_H,;t t
s,@DEF_GLOBUS@,$DEF_GLOBUS,;t t
s,@QT_MOC_BIN@,$QT_MOC_BIN,;t t
s,@HAVE_QT@,$HAVE_QT,;t t
s,@QT_MT_LIB_FLAG@,$QT_MT_LIB_FLAG,;t t
s,@QT_MT_LIB_DIR_FLAG@,$QT_MT_LIB_DIR_FLAG,;t t
s,@INC_QT_MT_H@,$INC_QT_MT_H,;t t
s,@DEF_QT@,$DEF_QT,;t t
s,@BABEL_BIN@,$BABEL_BIN,;t t
s,@HAVE_BABEL@,$HAVE_BABEL,;t t
s,@SIDL_LIB_FLAG@,$SIDL_LIB_FLAG,;t t
s,@SIDL_LIB_DIR_FLAG@,$SIDL_LIB_DIR_FLAG,;t t
s,@INC_SIDL_H@,$INC_SIDL_H,;t t
s,@DEF_BABEL@,$DEF_BABEL,;t t
s,@DEF_VDT@,$DEF_VDT,;t t
s,@VDT_LIB_FLAG@,$VDT_LIB_FLAG,;t t
s,@VDT_LIB_DIR_FLAG@,$VDT_LIB_DIR_FLAG,;t t
s,@VDT_EXTRA_LIB_FLAG@,$VDT_EXTRA_LIB_FLAG,;t t
s,@VDT_EXTRA_LIB_DIR_FLAG@,$VDT_EXTRA_LIB_DIR_FLAG,;t t
s,@INC_VDT_H@,$INC_VDT_H,;t t
s,@MAGICK_LIB_FLAG@,$MAGICK_LIB_FLAG,;t t
s,@MAGICK_LIB_DIR_FLAG@,$MAGICK_LIB_DIR_FLAG,;t t
s,@MAGICK_EXTRA_LIB_FLAG@,$MAGICK_EXTRA_LIB_FLAG,;t t
s,@MAGICK_EXTRA_LIB_DIR_FLAG@,$MAGICK_EXTRA_LIB_DIR_FLAG,;t t
s,@INC_MAGICK_H@,$INC_MAGICK_H,;t t
s,@DEF_MAGICK@,$DEF_MAGICK,;t t
s,@Z_LIB_FLAG@,$Z_LIB_FLAG,;t t
s,@Z_LIB_DIR_FLAG@,$Z_LIB_DIR_FLAG,;t t
s,@INC_ZLIB_H@,$INC_ZLIB_H,;t t
s,@DEF_Z@,$DEF_Z,;t t
s,@BLAS_LIB_FLAG@,$BLAS_LIB_FLAG,;t t
s,@BLAS_LIB_DIR_FLAG@,$BLAS_LIB_DIR_FLAG,;t t
s,@DEF_BLAS@,$DEF_BLAS,;t t
s,@LAPACK_LIB_FLAG@,$LAPACK_LIB_FLAG,;t t
s,@LAPACK_LIB_DIR_FLAG@,$LAPACK_LIB_DIR_FLAG,;t t
s,@HAVE_HYPRE@,$HAVE_HYPRE,;t t
s,@DEF_HYPRE@,$DEF_HYPRE,;t t
s,@HYPRE_LIB_FLAG@,$HYPRE_LIB_FLAG,;t t
s,@HYPRE_LIB_DIR_FLAG@,$HYPRE_LIB_DIR_FLAG,;t t
s,@INC_HYPRE_H@,$INC_HYPRE_H,;t t
s,@HAVE_PETSC@,$HAVE_PETSC,;t t
s,@PETSC_LIB_FLAG@,$PETSC_LIB_FLAG,;t t
s,@PETSC_LIB_DIR_FLAG@,$PETSC_LIB_DIR_FLAG,;t t
s,@PETSC_EXTRA_LIB_FLAG@,$PETSC_EXTRA_LIB_FLAG,;t t
s,@DEF_PETSC@,$DEF_PETSC,;t t
s,@INC_PETSC_H@,$INC_PETSC_H,;t t
s,@PETSC_UNI_LIB_FLAG@,$PETSC_UNI_LIB_FLAG,;t t
s,@PETSC_UNI_LIB_DIR_FLAG@,$PETSC_UNI_LIB_DIR_FLAG,;t t
s,@PETSC_UNI_EXTRA_LIB_FLAG@,$PETSC_UNI_EXTRA_LIB_FLAG,;t t
s,@DEF_PETSC_UNI@,$DEF_PETSC_UNI,;t t
s,@INC_PETSC_UNI_H@,$INC_PETSC_UNI_H,;t t
s,@SSTREAM_COMPAT@,$SSTREAM_COMPAT,;t t
s,@UUID_LIB_FLAG@,$UUID_LIB_FLAG,;t t
s,@DEF_SCIRUN2@,$DEF_SCIRUN2,;t t
s,@BUILD_SCIRUN2@,$BUILD_SCIRUN2,;t t
s,@abs_conftop_dir@,$abs_conftop_dir,;t t
s,@abs_srcdir@,$abs_srcdir,;t t
CEOF

_ACEOF

  cat >>$CONFIG_STATUS <<\_ACEOF
  # Split the substitutions into bite-sized pieces for seds with
  # small command number limits, like on Digital OSF/1 and HP-UX.
  ac_max_sed_lines=48
  ac_sed_frag=1 # Number of current file.
  ac_beg=1 # First line for current file.
  ac_end=$ac_max_sed_lines # Line after last line for current file.
  ac_more_lines=:
  ac_sed_cmds=
  while $ac_more_lines; do
    if test $ac_beg -gt 1; then
      sed "1,${ac_beg}d; ${ac_end}q" $tmp/subs.sed >$tmp/subs.frag
    else
      sed "${ac_end}q" $tmp/subs.sed >$tmp/subs.frag
    fi
    if test ! -s $tmp/subs.frag; then
      ac_more_lines=false
    else
      # The purpose of the label and of the branching condition is to
      # speed up the sed processing (if there are no `@' at all, there
      # is no need to browse any of the substitutions).
      # These are the two extra sed commands mentioned above.
      (echo ':t
  /@[a-zA-Z_][a-zA-Z_0-9]*@/!b' && cat $tmp/subs.frag) >$tmp/subs-$ac_sed_frag.sed
      if test -z "$ac_sed_cmds"; then
  	ac_sed_cmds="sed -f $tmp/subs-$ac_sed_frag.sed"
      else
  	ac_sed_cmds="$ac_sed_cmds | sed -f $tmp/subs-$ac_sed_frag.sed"
      fi
      ac_sed_frag=`expr $ac_sed_frag + 1`
      ac_beg=$ac_end
      ac_end=`expr $ac_end + $ac_max_sed_lines`
    fi
  done
  if test -z "$ac_sed_cmds"; then
    ac_sed_cmds=cat
  fi
fi # test -n "$CONFIG_FILES"

_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF
for ac_file in : $CONFIG_FILES; do test "x$ac_file" = x: && continue
  # Support "outfile[:infile[:infile...]]", defaulting infile="outfile.in".
  case $ac_file in
  - | *:- | *:-:* ) # input from stdin
        cat >$tmp/stdin
        ac_file_in=`echo "$ac_file" | sed 's,[^:]*:,,'`
        ac_file=`echo "$ac_file" | sed 's,:.*,,'` ;;
  *:* ) ac_file_in=`echo "$ac_file" | sed 's,[^:]*:,,'`
        ac_file=`echo "$ac_file" | sed 's,:.*,,'` ;;
  * )   ac_file_in=$ac_file.in ;;
  esac

  # Compute @srcdir@, @top_srcdir@, and @INSTALL@ for subdirectories.
  ac_dir=`(dirname "$ac_file") 2>/dev/null ||
$as_expr X"$ac_file" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
         X"$ac_file" : 'X\(//\)[^/]' \| \
         X"$ac_file" : 'X\(//\)$' \| \
         X"$ac_file" : 'X\(/\)' \| \
         .     : '\(.\)' 2>/dev/null ||
echo X"$ac_file" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{ s//\1/; q; }
  	  /^X\(\/\/\)[^/].*/{ s//\1/; q; }
  	  /^X\(\/\/\)$/{ s//\1/; q; }
  	  /^X\(\/\).*/{ s//\1/; q; }
  	  s/.*/./; q'`
  { case "$ac_dir" in
  [\\/]* | ?:[\\/]* ) as_incr_dir=;;
  *)                      as_incr_dir=.;;
esac
as_dummy="$ac_dir"
for as_mkdir_dir in `IFS='/\\'; set X $as_dummy; shift; echo "$@"`; do
  case $as_mkdir_dir in
    # Skip DOS drivespec
    ?:) as_incr_dir=$as_mkdir_dir ;;
    *)
      as_incr_dir=$as_incr_dir/$as_mkdir_dir
      test -d "$as_incr_dir" ||
        mkdir "$as_incr_dir" ||
	{ { echo "$as_me:$LINENO: error: cannot create \"$ac_dir\"" >&5
echo "$as_me: error: cannot create \"$ac_dir\"" >&2;}
   { (exit 1); exit 1; }; }
    ;;
  esac
done; }

  ac_builddir=.

if test "$ac_dir" != .; then
  ac_dir_suffix=/`echo "$ac_dir" | sed 's,^\.[\\/],,'`
  # A "../" for each directory in $ac_dir_suffix.
  ac_top_builddir=`echo "$ac_dir_suffix" | sed 's,/[^\\/]*,../,g'`
else
  ac_dir_suffix= ac_top_builddir=
fi

case $srcdir in
  .)  # No --srcdir option.  We are building in place.
    ac_srcdir=.
    if test -z "$ac_top_builddir"; then
       ac_top_srcdir=.
    else
       ac_top_srcdir=`echo $ac_top_builddir | sed 's,/$,,'`
    fi ;;
  [\\/]* | ?:[\\/]* )  # Absolute path.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir ;;
  *) # Relative path.
    ac_srcdir=$ac_top_builddir$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_builddir$srcdir ;;
esac
# Don't blindly perform a `cd "$ac_dir"/$ac_foo && pwd` since $ac_foo can be
# absolute.
ac_abs_builddir=`cd "$ac_dir" && cd $ac_builddir && pwd`
ac_abs_top_builddir=`cd "$ac_dir" && cd $ac_top_builddir && pwd`
ac_abs_srcdir=`cd "$ac_dir" && cd $ac_srcdir && pwd`
ac_abs_top_srcdir=`cd "$ac_dir" && cd $ac_top_srcdir && pwd`



  if test x"$ac_file" != x-; then
    { echo "$as_me:$LINENO: creating $ac_file" >&5
echo "$as_me: creating $ac_file" >&6;}
    rm -f "$ac_file"
  fi
  # Let's still pretend it is `configure' which instantiates (i.e., don't
  # use $as_me), people would be surprised to read:
  #    /* config.h.  Generated by config.status.  */
  if test x"$ac_file" = x-; then
    configure_input=
  else
    configure_input="$ac_file.  "
  fi
  configure_input=$configure_input"Generated from `echo $ac_file_in |
                                     sed 's,.*/,,'` by configure."

  # First look for the input files in the build tree, otherwise in the
  # src tree.
  ac_file_inputs=`IFS=:
    for f in $ac_file_in; do
      case $f in
      -) echo $tmp/stdin ;;
      [\\/$]*)
         # Absolute (can't be DOS-style, as IFS=:)
         test -f "$f" || { { echo "$as_me:$LINENO: error: cannot find input file: $f" >&5
echo "$as_me: error: cannot find input file: $f" >&2;}
   { (exit 1); exit 1; }; }
         echo $f;;
      *) # Relative
         if test -f "$f"; then
           # Build tree
           echo $f
         elif test -f "$srcdir/$f"; then
           # Source tree
           echo $srcdir/$f
         else
           # /dev/null tree
           { { echo "$as_me:$LINENO: error: cannot find input file: $f" >&5
echo "$as_me: error: cannot find input file: $f" >&2;}
   { (exit 1); exit 1; }; }
         fi;;
      esac
    done` || { (exit 1); exit 1; }
_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF
  sed "$ac_vpsub
$extrasub
_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF
:t
/@[a-zA-Z_][a-zA-Z_0-9]*@/!b
s,@configure_input@,$configure_input,;t t
s,@srcdir@,$ac_srcdir,;t t
s,@abs_srcdir@,$ac_abs_srcdir,;t t
s,@top_srcdir@,$ac_top_srcdir,;t t
s,@abs_top_srcdir@,$ac_abs_top_srcdir,;t t
s,@builddir@,$ac_builddir,;t t
s,@abs_builddir@,$ac_abs_builddir,;t t
s,@top_builddir@,$ac_top_builddir,;t t
s,@abs_top_builddir@,$ac_abs_top_builddir,;t t
" $ac_file_inputs | (eval "$ac_sed_cmds") >$tmp/out
  rm -f $tmp/stdin
  if test x"$ac_file" != x-; then
    mv $tmp/out $ac_file
  else
    cat $tmp/out
    rm -f $tmp/out
  fi

done
_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF

#
# CONFIG_HEADER section.
#

# These sed commands are passed to sed as "A NAME B NAME C VALUE D", where
# NAME is the cpp macro being defined and VALUE is the value it is being given.
#
# ac_d sets the value in "#define NAME VALUE" lines.
ac_dA='s,^\([ 	]*\)#\([ 	]*define[ 	][ 	]*\)'
ac_dB='[ 	].*$,\1#\2'
ac_dC=' '
ac_dD=',;t'
# ac_u turns "#undef NAME" without trailing blanks into "#define NAME VALUE".
ac_uA='s,^\([ 	]*\)#\([ 	]*\)undef\([ 	][ 	]*\)'
ac_uB='$,\1#\2define\3'
ac_uC=' '
ac_uD=',;t'

for ac_file in : $CONFIG_HEADERS; do test "x$ac_file" = x: && continue
  # Support "outfile[:infile[:infile...]]", defaulting infile="outfile.in".
  case $ac_file in
  - | *:- | *:-:* ) # input from stdin
        cat >$tmp/stdin
        ac_file_in=`echo "$ac_file" | sed 's,[^:]*:,,'`
        ac_file=`echo "$ac_file" | sed 's,:.*,,'` ;;
  *:* ) ac_file_in=`echo "$ac_file" | sed 's,[^:]*:,,'`
        ac_file=`echo "$ac_file" | sed 's,:.*,,'` ;;
  * )   ac_file_in=$ac_file.in ;;
  esac

  test x"$ac_file" != x- && { echo "$as_me:$LINENO: creating $ac_file" >&5
echo "$as_me: creating $ac_file" >&6;}

  # First look for the input files in the build tree, otherwise in the
  # src tree.
  ac_file_inputs=`IFS=:
    for f in $ac_file_in; do
      case $f in
      -) echo $tmp/stdin ;;
      [\\/$]*)
         # Absolute (can't be DOS-style, as IFS=:)
         test -f "$f" || { { echo "$as_me:$LINENO: error: cannot find input file: $f" >&5
echo "$as_me: error: cannot find input file: $f" >&2;}
   { (exit 1); exit 1; }; }
         echo $f;;
      *) # Relative
         if test -f "$f"; then
           # Build tree
           echo $f
         elif test -f "$srcdir/$f"; then
           # Source tree
           echo $srcdir/$f
         else
           # /dev/null tree
           { { echo "$as_me:$LINENO: error: cannot find input file: $f" >&5
echo "$as_me: error: cannot find input file: $f" >&2;}
   { (exit 1); exit 1; }; }
         fi;;
      esac
    done` || { (exit 1); exit 1; }
  # Remove the trailing spaces.
  sed 's/[ 	]*$//' $ac_file_inputs >$tmp/in

_ACEOF

# Transform confdefs.h into two sed scripts, `conftest.defines' and
# `conftest.undefs', that substitutes the proper values into
# config.h.in to produce config.h.  The first handles `#define'
# templates, and the second `#undef' templates.
# And first: Protect against being on the right side of a sed subst in
# config.status.  Protect against being in an unquoted here document
# in config.status.
rm -f conftest.defines conftest.undefs
# Using a here document instead of a string reduces the quoting nightmare.
# Putting comments in sed scripts is not portable.
#
# `end' is used to avoid that the second main sed command (meant for
# 0-ary CPP macros) applies to n-ary macro definitions.
# See the Autoconf documentation for `clear'.
cat >confdef2sed.sed <<\_ACEOF
s/[\\&,]/\\&/g
s,[\\$`],\\&,g
t clear
: clear
s,^[ 	]*#[ 	]*define[ 	][ 	]*\([^ 	(][^ 	(]*\)\(([^)]*)\)[ 	]*\(.*\)$,${ac_dA}\1${ac_dB}\1\2${ac_dC}\3${ac_dD},gp
t end
s,^[ 	]*#[ 	]*define[ 	][ 	]*\([^ 	][^ 	]*\)[ 	]*\(.*\)$,${ac_dA}\1${ac_dB}\1${ac_dC}\2${ac_dD},gp
: end
_ACEOF
# If some macros were called several times there might be several times
# the same #defines, which is useless.  Nevertheless, we may not want to
# sort them, since we want the *last* AC-DEFINE to be honored.
uniq confdefs.h | sed -n -f confdef2sed.sed >conftest.defines
sed 's/ac_d/ac_u/g' conftest.defines >conftest.undefs
rm -f confdef2sed.sed

# This sed command replaces #undef with comments.  This is necessary, for
# example, in the case of _POSIX_SOURCE, which is predefined and required
# on some systems where configure will not decide to define it.
cat >>conftest.undefs <<\_ACEOF
s,^[ 	]*#[ 	]*undef[ 	][ 	]*[a-zA-Z_][a-zA-Z_0-9]*,/* & */,
_ACEOF

# Break up conftest.defines because some shells have a limit on the size
# of here documents, and old seds have small limits too (100 cmds).
echo '  # Handle all the #define templates only if necessary.' >>$CONFIG_STATUS
echo '  if egrep "^[ 	]*#[ 	]*define" $tmp/in >/dev/null; then' >>$CONFIG_STATUS
echo '  # If there are no defines, we may have an empty if/fi' >>$CONFIG_STATUS
echo '  :' >>$CONFIG_STATUS
rm -f conftest.tail
while grep . conftest.defines >/dev/null
do
  # Write a limited-size here document to $tmp/defines.sed.
  echo '  cat >$tmp/defines.sed <<CEOF' >>$CONFIG_STATUS
  # Speed up: don't consider the non `#define' lines.
  echo '/^[ 	]*#[ 	]*define/!b' >>$CONFIG_STATUS
  # Work around the forget-to-reset-the-flag bug.
  echo 't clr' >>$CONFIG_STATUS
  echo ': clr' >>$CONFIG_STATUS
  sed ${ac_max_here_lines}q conftest.defines >>$CONFIG_STATUS
  echo 'CEOF
  sed -f $tmp/defines.sed $tmp/in >$tmp/out
  rm -f $tmp/in
  mv $tmp/out $tmp/in
' >>$CONFIG_STATUS
  sed 1,${ac_max_here_lines}d conftest.defines >conftest.tail
  rm -f conftest.defines
  mv conftest.tail conftest.defines
done
rm -f conftest.defines
echo '  fi # egrep' >>$CONFIG_STATUS
echo >>$CONFIG_STATUS

# Break up conftest.undefs because some shells have a limit on the size
# of here documents, and old seds have small limits too (100 cmds).
echo '  # Handle all the #undef templates' >>$CONFIG_STATUS
rm -f conftest.tail
while grep . conftest.undefs >/dev/null
do
  # Write a limited-size here document to $tmp/undefs.sed.
  echo '  cat >$tmp/undefs.sed <<CEOF' >>$CONFIG_STATUS
  # Speed up: don't consider the non `#undef'
  echo '/^[ 	]*#[ 	]*undef/!b' >>$CONFIG_STATUS
  # Work around the forget-to-reset-the-flag bug.
  echo 't clr' >>$CONFIG_STATUS
  echo ': clr' >>$CONFIG_STATUS
  sed ${ac_max_here_lines}q conftest.undefs >>$CONFIG_STATUS
  echo 'CEOF
  sed -f $tmp/undefs.sed $tmp/in >$tmp/out
  rm -f $tmp/in
  mv $tmp/out $tmp/in
' >>$CONFIG_STATUS
  sed 1,${ac_max_here_lines}d conftest.undefs >conftest.tail
  rm -f conftest.undefs
  mv conftest.tail conftest.undefs
done
rm -f conftest.undefs

cat >>$CONFIG_STATUS <<\_ACEOF
  # Let's still pretend it is `configure' which instantiates (i.e., don't
  # use $as_me), people would be surprised to read:
  #    /* config.h.  Generated by config.status.  */
  if test x"$ac_file" = x-; then
    echo "/* Generated by configure.  */" >$tmp/config.h
  else
    echo "/* $ac_file.  Generated by configure.  */" >$tmp/config.h
  fi
  cat $tmp/in >>$tmp/config.h
  rm -f $tmp/in
  if test x"$ac_file" != x-; then
    if cmp -s $ac_file $tmp/config.h 2>/dev/null; then
      { echo "$as_me:$LINENO: $ac_file is unchanged" >&5
echo "$as_me: $ac_file is unchanged" >&6;}
    else
      ac_dir=`(dirname "$ac_file") 2>/dev/null ||
$as_expr X"$ac_file" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
         X"$ac_file" : 'X\(//\)[^/]' \| \
         X"$ac_file" : 'X\(//\)$' \| \
         X"$ac_file" : 'X\(/\)' \| \
         .     : '\(.\)' 2>/dev/null ||
echo X"$ac_file" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{ s//\1/; q; }
  	  /^X\(\/\/\)[^/].*/{ s//\1/; q; }
  	  /^X\(\/\/\)$/{ s//\1/; q; }
  	  /^X\(\/\).*/{ s//\1/; q; }
  	  s/.*/./; q'`
      { case "$ac_dir" in
  [\\/]* | ?:[\\/]* ) as_incr_dir=;;
  *)                      as_incr_dir=.;;
esac
as_dummy="$ac_dir"
for as_mkdir_dir in `IFS='/\\'; set X $as_dummy; shift; echo "$@"`; do
  case $as_mkdir_dir in
    # Skip DOS drivespec
    ?:) as_incr_dir=$as_mkdir_dir ;;
    *)
      as_incr_dir=$as_incr_dir/$as_mkdir_dir
      test -d "$as_incr_dir" ||
        mkdir "$as_incr_dir" ||
	{ { echo "$as_me:$LINENO: error: cannot create \"$ac_dir\"" >&5
echo "$as_me: error: cannot create \"$ac_dir\"" >&2;}
   { (exit 1); exit 1; }; }
    ;;
  esac
done; }

      rm -f $ac_file
      mv $tmp/config.h $ac_file
    fi
  else
    cat $tmp/config.h
    rm -f $tmp/config.h
  fi
done
_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF

#
# CONFIG_COMMANDS section.
#
for ac_file in : $CONFIG_COMMANDS; do test "x$ac_file" = x: && continue
  ac_dest=`echo "$ac_file" | sed 's,:.*,,'`
  ac_source=`echo "$ac_file" | sed 's,[^:]*:,,'`
  ac_dir=`(dirname "$ac_dest") 2>/dev/null ||
$as_expr X"$ac_dest" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
         X"$ac_dest" : 'X\(//\)[^/]' \| \
         X"$ac_dest" : 'X\(//\)$' \| \
         X"$ac_dest" : 'X\(/\)' \| \
         .     : '\(.\)' 2>/dev/null ||
echo X"$ac_dest" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{ s//\1/; q; }
  	  /^X\(\/\/\)[^/].*/{ s//\1/; q; }
  	  /^X\(\/\/\)$/{ s//\1/; q; }
  	  /^X\(\/\).*/{ s//\1/; q; }
  	  s/.*/./; q'`
  ac_builddir=.

if test "$ac_dir" != .; then
  ac_dir_suffix=/`echo "$ac_dir" | sed 's,^\.[\\/],,'`
  # A "../" for each directory in $ac_dir_suffix.
  ac_top_builddir=`echo "$ac_dir_suffix" | sed 's,/[^\\/]*,../,g'`
else
  ac_dir_suffix= ac_top_builddir=
fi

case $srcdir in
  .)  # No --srcdir option.  We are building in place.
    ac_srcdir=.
    if test -z "$ac_top_builddir"; then
       ac_top_srcdir=.
    else
       ac_top_srcdir=`echo $ac_top_builddir | sed 's,/$,,'`
    fi ;;
  [\\/]* | ?:[\\/]* )  # Absolute path.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir ;;
  *) # Relative path.
    ac_srcdir=$ac_top_builddir$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_builddir$srcdir ;;
esac
# Don't blindly perform a `cd "$ac_dir"/$ac_foo && pwd` since $ac_foo can be
# absolute.
ac_abs_builddir=`cd "$ac_dir" && cd $ac_builddir && pwd`
ac_abs_top_builddir=`cd "$ac_dir" && cd $ac_top_builddir && pwd`
ac_abs_srcdir=`cd "$ac_dir" && cd $ac_srcdir && pwd`
ac_abs_top_srcdir=`cd "$ac_dir" && cd $ac_top_srcdir && pwd`


  { echo "$as_me:$LINENO: executing $ac_dest commands" >&5
echo "$as_me: executing $ac_dest commands" >&6;}
  case $ac_dest in
    default ) echo timestamp > stamp-h  ;;
  esac
done
_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF

{ (exit 0); exit 0; }
_ACEOF
chmod +x $CONFIG_STATUS
ac_clean_files=$ac_clean_files_save


# configure is writing to config.log, and then calls config.status.
# config.status does its own redirection, appending to config.log.
# Unfortunately, on DOS this fails, as config.log is still kept open
# by configure, so config.status won't be able to write to it; its
# output is simply discarded.  So we exec the FD to /dev/null,
# effectively closing config.log, so it can be properly (re)opened and
# appended to by config.status.  When coming back to configure, we
# need to make the FD available again.
if test "$no_create" != yes; then
  ac_cs_success=:
  exec 5>/dev/null
  $SHELL $CONFIG_STATUS || ac_cs_success=false
  exec 5>>config.log
  # Use ||, not &&, to avoid exiting from the if with $? = 1, which
  # would make configure fail if this is the last instruction.
  $ac_cs_success || { (exit 1); exit 1; }
fi


##  check whether sci_defs.h has changed (due to a re-configure)
if cmp -s sci_defs.h sci_testdefs.h 2>/dev/null; then
  echo "$as_me:$LINENO: result: sci_defs.h is unchanged" >&5
echo "${ECHO_T}sci_defs.h is unchanged" >&6
  rm -f sci_testdefs.h
else
  mv sci_testdefs.h sci_defs.h
  { echo "$as_me:$LINENO: WARNING: sci_defs.h has changed." >&5
echo "$as_me: WARNING: sci_defs.h has changed." >&2;}
fi
