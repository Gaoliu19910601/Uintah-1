# If you change this file, you must re-run configure before the changes
# will be effective
# This makefile was inspired by:
# http://www.canb.auug.org.au/~millerp/rmch/recu-make-cons-harm.html

# Default target
default: all

include configVars.mk

# Rules for autoconf
${SRCTOP}/configure: ${SRCTOP}/configure.in ${SRCDIR}/scripts/aclocal.m4
	cd ${SRCTOP} && autoconf

sci_config.h: stamp-h
stamp-h: ${SRCTOP}/sci_config.h.in ${SRCTOP}/sci_defs.h.in \
		${OBJTOP}/config.status
	./config.status

config.status: ${SRCTOP}/configure
	./config.status --recheck
	./config.status

Makefile: ${SRCTOP}/Makefile.in ${OBJTOP}/config.status
	@( Here="`pwd`" ; cd ${OBJTOP} ; Top="`pwd`" ; CONFIG_FILES="`echo $${Here} | sed -e "s!^$${Top}/!!" -e "s!^$${Top}!.!"`/Makefile" CONFIG_HEADERS="" ./config.status ) 1>&2

# Actually include the module makefile fragments
ALLSUBDIRS := . 
include $(SRCTOP)/scripts/recurse.mk
MAKEFILEDIRS := $(wordlist 2,$(words $(ALLSUBDIRS)),$(ALLSUBDIRS))
MAKEFILEDIRS := $(subst $(SRCTOP),$(OBJTOP_ABS),$(MAKEFILEDIRS))
SUBMAKEFILES := $(patsubst %,%/Makefile,$(MAKEFILEDIRS))
CREATETCLINDEX := $(SRCTOP)/scripts/createTclIndex

# etags generation
TCL_FILES := $(patsubst %,%/*.tcl, $(ALLSUBDIRS))
C_FILES := $(patsubst %,%/*.c, $(ALLSUBDIRS))
CPP_FILES := $(patsubst %,%/*.cc, $(ALLSUBDIRS))
HEADER_FILES := $(patsubst %,%/*.h, $(ALLSUBDIRS))

ETAGS_FILES := $(wildcard $(HEADER_FILES) $(C_FILES) $(CPP_FILES) )
TCL_ETAGS_FILES := $(wildcard $(TCL_FILES))
ETAGS := @ETAGS@

all:: $(MAKEFILEDIRS) $(CREATETCLINDEX) $(LIBDIR) $(SUBMAKEFILES) $(ALLGEN) $(ALLTARGETS)

$(MAKEFILEDIRS):
	@echo creating directory $@
	@mkdir -p $@

$(CREATETCLINDEX): $(CREATETCLINDEX).in $(OBJTOP)/Makefile
	@echo creating scripts/createTclIndex
	-@sed -e 's,ITCLSH,$(ITCLSH),g' \
              -e 's,ITCL_INIT_DIR,$(ITCL_INIT_DIR),g' \
	      -e 's,TCL_INIT_DIR,$(TCL_INIT_DIR),g' \
              $(CREATETCLINDEX).in > $(CREATETCLINDEX)
	-@chmod a+x $(CREATETCLINDEX)

$(LIBDIR):
	mkdir -p $(LIBDIR)

$(ALLOBJS): $(ALLGEN)

# This rule must be after the includes, so that it will find $(SIDL_EXE)
%_sidl.o: %_sidl.cc %_sidl.h

%_sidl.cc: %.sidl $(SIDL_EXE)
	$(SIDL_EXE) -o $@ $<

%_sidl.h: %.sidl $(SIDL_EXE)
	$(SIDL_EXE) -h -o $@ $<

# Make emacs etags file
sciTAGS:  $(ETAGS_FILES) $(TCL_ETAGS_FILES)
	$(ETAGS) -o sciTAGS $(ETAGS_FILES)
	$(ETAGS) -o sciTAGS -a -l none --regex='/itcl_class[ \t]+\([^ \t]+\)/\1/' --regex='/[ \t]+method[ \t]+\([^ \t]+\)/\1/' $(TCL_ETAGS_FILES)

# The sophsticated looking $(...) mess below is just to convert a
# subdirectory of the form a/b/c into ../../..
ifeq ($(LARGESOS),yes)
  HERE = $(LIBDIR)lib$(firstword $(subst /," ",$(subst $(OBJTOP_ABS)/,,$@))).so
else
  HERE = $(LIBDIR)lib$(subst /,_,$(patsubst $(OBJTOP_ABS)/%/,%,$(dir $@))).so
endif
$(SUBMAKEFILES): scripts/Makefile.tmpl
	@echo creating $@
	@sed -e s,@OBJTOP@,$(shell echo $(foreach t,$(subst /," ",$(dir $(subst $(OBJTOP_ABS)/,,$@))),../) | sed -e 's,../ ,../,g' -e 's,/../$$,,'), -e s,@SRCTOP@,$(strip $(SRCTOP)), -e 's,@HERE_TARGET@,$(strip $(HERE)),' $< > $@


clean::
	rm -f $(patsubst %,%/*.o, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/depend.mk, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/core, $(ALLSUBDIRS))
	for fname in $(patsubst %,%/ii_files, $(ALLSUBDIRS)); \
	  do if test -d $$fname; then rm -rf $$fname; fi; done
	rm -f $(patsubst %,%/*~, $(ALLSUBDIRS))
	rm -f $(LIBDIR)so_locations ./so_locations
	rm -f $(CLEANLIBS)
	rm -f $(CLEANPROGS)
	rm -f y.output
	rm -Rf $(LIBDIR)
	-rm -f sciTAGS

distclean:: clean
	rm -f config.status config.log config.cache
	rm -f scripts/createTclIndex scripts/CC scripts/cc
	rm -f $(patsubst %,%/Makefile, $(ALLSUBDIRS))
	rm -f sci_config.h sci_defs.h stamp-

cleanall:: cleanai cleanAI cleanjs cleanJS cleantz cleanTZ cleanrest

cleanai::
	rm -f $(patsubst %,%/[a-i]*.o, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/ii_files/[a-i]*.ii, $(ALLSUBDIRS))
cleanAI::
	rm -f $(patsubst %,%/[A-I]*.o, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/ii_files/[A-I]*.ii, $(ALLSUBDIRS))
cleanjs::
	rm -f $(patsubst %,%/[j-s]*.o, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/ii_files/[j-s]*.ii, $(ALLSUBDIRS))
cleanJS::
	rm -f $(patsubst %,%/[J-S]*.o, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/ii_files/[J-S]*.ii, $(ALLSUBDIRS))
cleantz::
	rm -f $(patsubst %,%/[t-z]*.o, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/ii_files/[t-z]*.ii, $(ALLSUBDIRS))
cleanTZ::
	rm -f $(patsubst %,%/[T-Z]*.o, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/ii_files/[T-Z]*.ii, $(ALLSUBDIRS))
cleanrest::
	rm -f $(patsubst %,%/*.o, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/depend.mk, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/core, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/ii_files/*.ii, $(ALLSUBDIRS))
	-rmdir $(patsubst %,%/ii_files, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/*~, $(ALLSUBDIRS))
	rm -f $(LIBDIR)so_locations
	rm -f $(CLEANLIBS)
	rm -f $(CLEANPROGS)
	rm -f y.output
	rm -Rf $(LIBDIR)

objs: $(CLEANOBJS)

ifeq (,$(findstring objs,$(MAKECMDGOALS)))
# This includes all of the dependencies.  We prepend the absolute path
# to the obj dir to prevent make from wasting time searching for them
# in other directories

  ifeq ($(CC_DEPEND_REGEN),-MD)
    -include $(patsubst %.o,$(OBJTOP_ABS)/%.d, $(CLEANOBJS))
  else
    -include $(patsubst %,$(OBJTOP_ABS)/%/depend.mk, $(patsubst $(SRCTOP)/%,%,$(ALLSUBDIRS)))
  endif

else

# If we are making the special target "objs", we skip the dependencies.
# This is a hack for a "quick" compile.

endif

