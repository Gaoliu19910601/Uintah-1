#
# If you change this file, you must re-run configure before the changes
# will be effective
#
# $Id$
#
# This makefile was inspired by:
# http://www.canb.auug.org.au/~millerp/rmch/recu-make-cons-harm.html
# 

#
# Default target
#
default: all

#
# Blow away a bunch of makes internal rules to improve the performance
# of make
#
.SUFFIXES:
% :: RCS/%,v
% :: RCS/%
% :: %,v
% :: s.%
% :: SCCS/s.%
%.out :: %
%.c :: %
%.tex :: %

#
# Directory variables
#
SRCTOP  := @top_srcdir@
SRCDIR  := @srcdir@
OBJTOP  := .
OBJTOP_ABS    := $(shell cd $(OBJTOP) ; pwd)
SRCTOP_ABS    := $(shell cd $(SRCTOP) ; pwd)
ifeq ($(OBJTOP),.)
LIBDIR := lib/
else
LIBDIR := $(OBJTOP_ABS)/lib/
endif
LIBDIR_ABS    := $(shell mkdir -p $(LIBDIR); cd $(LIBDIR) ; pwd)

VPATH := $(SRCTOP)

#
# Optional pieces
#

PACKAGE_DIRS := @PACKAGE_DIRS@
PACKAGE_PATH := @PACKAGE_PATH@
BUILD_PARALLEL := @BUILD_PARALLEL@
ifeq ($(BUILD_PARALLEL),yes)
COMPONENT_DIRS := tools/sidl Component
endif

# These cannot be :=
THREAD_IMPL = $(SRCDIR)/@THREAD_IMPL@
TIME_IMPL = $(SRCDIR)/@TIME_IMPL@
LOCK_IMPL = $(SRCDIR)/@LOCK_IMPL@

#
# Subdirectories
# 
SUBDIRS := SCICore PSECore $(COMPONENT_DIRS) main PSECommon \
	testprograms $(PACKAGE_DIRS)

#
# Libraries and other flags
#

TCL_LIB_DIR   := @TCL_LIB_DIR@
TCL_LIB_FLAG  := @TCL_LIB_FLAG@
TK_LIB_DIR    := @TK_LIB_DIR@
TK_LIB_FLAG   := @TK_LIB_FLAG@
ITCL_LIB_DIR  := @ITCL_LIB_DIR@
ITCL_LIB_FLAG := @ITCL_LIB_FLAG@
BLT_LIB_DIR  := @BLT_LIB_DIR@
BLT_LIB_FLAG := @BLT_LIB_FLAG@
BLT_TLINK := -L$(BLT_LIB_DIR)
ITCL_WIDGETS  := @ITCL_WIDGETS@

LDRUN_PREFIX  := @LDRUN_PREFIX@

X_LIBS := @X_LIBS@
X_PRE_LIBS := @X_PRE_LIBS@
X_EXTRA_LIBS := @X_EXTRA_LIBS@
THREAD_LIBS := @THREAD_LIBS@
PLATFORM_LDFLAGS := @PLATFORM_LDFLAGS@
GL_LIBS := $(X_LIBS) $(X_PRE_LIBS) -lGLU -lGL -lXext -lX11 $(X_EXTRA_LIBS)
X11_LIBS := $(X_LIBS) $(X_PRE_LIBS) -lXext -lX11 $(X_EXTRA_LIBS)

PROGRAM_PSE   := @EXENAME@

TRACEBACK_LIB := @TRACEBACK_LIB@

LEX := @LEX@
YACC := @YACC@ -d -v

MAKE_PARALLELISM := @MAKE_PARALLELISM@

LARGESOS := @LARGESOS@

ifeq ($(LARGESOS),yes)
MALLOCLIB := SCICore
else
MALLOCLIB := SCICore/Malloc
endif

#
# Convenience variables - compounded from above definitions
#
BLT_LIBRARY := $(LDRUN_PREFIX)$(BLT_LIB_DIR) -L$(BLT_LIB_DIR) $(BLT_LIB_FLAG)
TCL_LIBRARY := $(LDRUN_PREFIX)$(TCL_LIB_DIR) -L$(TCL_LIB_DIR) $(TCL_LIB_FLAG)
TK_LIBRARY := $(LDRUN_PREFIX)$(TK_LIB_DIR) -L$(TK_LIB_DIR) $(TK_LIB_FLAG)
ITCL_LIBRARY := $(LDRUN_PREFIX)$(ITCL_LIB_DIR) -L$(ITCL_LIB_DIR) $(ITCL_LIB_FLAG)

XML_LIB_DIR := @XML_LIB_DIR@
XML_LIB_FLAG := @XML_LIB_FLAG@
XML_LIBRARY := $(LDRUN_PREFIX)$(XML_LIB_DIR) -L$(XML_LIB_DIR) $(XML_LIB_FLAG)
XML_INCLUDE := -I@XML_INCLUDE_DIR@
XML_TLINK := -L$(XML_LIB_DIR)

ifeq ($(BUILD_PARALLEL),yes)
GLOBUS_LIB_DIR := /tmp/opt/globus64-1.1b16u/lib
GLOBUS_LIBS := $(LDRUN_PREFIX)$(GLOBUS_LIB_DIR) -L$(GLOBUS_LIB_DIR)
GLOBUS_COMMON := $(LDRUN_PREFIX)$(GLOBUS_LIB_DIR) -L$(GLOBUS_LIB_DIR) -lglobus_common
GLOBUS_TLINK := -L$(GLOBUS_LIB_DIR)
endif

TLINK := $(BLT_TLINK) $(GLOBUS_TLINK) $(XML_TLINK)


INCLUDES += -I$(SRCTOP)/include -I$(SRCTOP) -I$(OBJTOP) -I@TCL_INCLUDE_DIR@ -I@TK_INCLUDE_DIR@ -I@ITCL_INCLUDE_DIR@ -I@BLT_INCLUDE_DIR@ @GLOBUS_INCLUDE@ $(XML_INCLUDE)

SSTREAM_COMPAT := @SSTREAM_COMPAT@
ifeq ($(SSTREAM_COMPAT),yes)
INCLUDES := $(INCLUDES) -I$(SRCTOP)/include/compat
endif
INCLUDES := $(sort $(INCLUDES))

#
# Rules for autoconf
# 
${SRCTOP}/configure: ${SRCTOP}/configure.in ${SRCDIR}/scripts/aclocal.m4
	cd ${SRCTOP} && autoconf

sci_config.h: stamp-h
stamp-h: ${SRCTOP}/sci_config.h.in ${SRCTOP}/sci_defs.h.in \
		${OBJTOP}/config.status
	./config.status
     
config.status: ${SRCTOP}/configure
	./config.status --recheck
	./config.status

Makefile: ${SRCTOP}/Makefile.in ${OBJTOP}/config.status
	@( Here="`pwd`" ; cd ${OBJTOP} ; Top="`pwd`" ; CONFIG_FILES="`echo $${Here} | sed -e "s!^$${Top}/!!" -e "s!^$${Top}!.!"`/Makefile" CONFIG_HEADERS="" ./config.status ) 1>&2

# variables and suffix rules for module transformation
#------------------------------------------------------------------------------

CC              := @CC@
CXX             := @CXX@
AS              := @AS@
LD              := @LD@
CFLAGS          := @CFLAGS@ $(CFLAGS)
SOFLAGS         := @SOFLAGS@ -L$(LIBDIR)
LDFLAGS         := @LDFLAGS@ -L$(LIBDIR)
ASFLAGS         := @ASFLAGS@  $(ASFLAGS)
CC_DEPEND_REGEN = @CC_DEPEND_REGEN@
NEED_SONAME	:= @NEED_SONAME@

.SUFFIXES: .cc .c .o .d .s

.cc.o: $<
	$(CXX) $(CFLAGS) $(INCLUDES) $(CC_DEPEND_REGEN) -c $< -o $@
ifeq ($(CC_DEPEND_REGEN),-MD)
	mv $(basename $(notdir $@)).d $(basename $@).d
endif

.c.o: $<
	$(CC) $(CFLAGS) $(INCLUDES) $(CC_DEPEND_REGEN) -c $< -o $@
ifeq ($(CC_DEPEND_REGEN),-MD)
	mv $(basename $(notdir $@)).d $(basename $@).d
endif

.s.o: $<
	$(AS) $(ASFLAGS) -o $@ $< -o $@

#
# Actually include the module makefile fragments
#
ALLSUBDIRS := . 
include $(SRCTOP)/scripts/recurse.mk
MAKEFILEDIRS := $(wordlist 2,$(words $(ALLSUBDIRS)),$(ALLSUBDIRS))
MAKEFILEDIRS := $(subst $(SRCTOP),$(OBJTOP_ABS),$(MAKEFILEDIRS))
SUBMAKEFILES := $(patsubst %,%/Makefile,$(MAKEFILEDIRS))

all:: $(MAKEFILEDIRS)

all:: $(LIBDIR) $(SUBMAKEFILES)

all:: $(ALLGEN) $(ALLTARGETS)

$(MAKEFILEDIRS):
	@echo creating directory $@
	@mkdir -p $@

$(LIBDIR):
	mkdir -p $(LIBDIR)

$(ALLOBJS): $(ALLGEN)

#
# This rule must be after the includes, so that it will find $(SIDL_EXE)
#
%_sidl.o: %_sidl.cc %_sidl.h

%_sidl.cc: %.sidl $(SIDL_EXE)
	$(SIDL_EXE) -o $@ $<

%_sidl.h: %.sidl $(SIDL_EXE)
	$(SIDL_EXE) -h -o $@ $<

#
# The sophsticated looking $(...) mess below is just to convert a
# subdirectory of the form a/b/c into ../../..
#
ifeq ($(LARGESOS),yes)
  HERE = $(LIBDIR)lib$(firstword $(subst /," ",$(subst $(OBJTOP_ABS)/,,$@))).so
else
  HERE = $(LIBDIR)lib$(subst /,_,$(patsubst $(OBJTOP_ABS)/%/,%,$(dir $@))).so
endif
$(SUBMAKEFILES): scripts/Makefile.tmpl
	@echo creating $@
	@sed -e s,@OBJTOP@,$(shell echo $(foreach t,$(subst /," ",$(dir $(subst $(OBJTOP_ABS)/,,$@))),../) | sed -e 's,../ ,../,g' -e 's,/../$$,,'), -e s,@SRCTOP@,$(strip $(SRCTOP)), -e s,@HERE_TARGET@,$(strip $(HERE)), $< > $@

clean::
	rm -f $(CLEANOBJS)
	rm -f $(patsubst %,%/depend.mk, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/core, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/ii_files/*.ii, $(ALLSUBDIRS))
	-rmdir $(patsubst %,%/ii_files, $(ALLSUBDIRS))
	rm -f $(patsubst %,%/*~, $(ALLSUBDIRS))
	rm -f $(LIBDIR)so_locations
	rm -f $(CLEANLIBS)
	rm -f $(CLEANPROGS)
	rm -f y.output
	rmdir $(LIBDIR)

distclean:: clean
	rm -f config.status config.log config.cache
	rm -f $(patsubst %,%/Makefile, $(ALLSUBDIRS))
	rm -f sci_config.h sci_defs.h stamp-

objs: $(CLEANOBJS)

ifeq (,$(findstring objs,$(MAKECMDGOALS)))
#
# This includes all of the dependencies.  We prepend the absolute path
# to the obj dir to prevent make from wasting time searching for them
# in other directories
#

  ifeq ($(CC_DEPEND_REGEN),-MD)
    -include $(patsubst %.o,$(OBJTOP_ABS)/%.d, $(CLEANOBJS))
  else
    -include $(patsubst %,$(OBJTOP_ABS)/%/depend.mk, $(ALLSUBDIRS))
  endif

else

#
# If we are making the special target "objs", we skip the dependencies.
# This is a hack for a "quick" compile.
#

endif

#
# $Log$
# Revision 1.19  2000/03/23 10:54:26  sparker
# Moved sidl pattern rule to after the recursive include - so that
#  $(SIDL_EXE) will be defined
#
# Revision 1.18  2000/03/23 10:33:09  sparker
# Configure new exception facility (using libexc on SGI)
#
# Revision 1.17  2000/03/22 09:59:15  sparker
# Assorted make performance improvements
# Added a "make objs" target that only builds the .o files and bypasses
#   all of the depend.mk files - works faster
#
# Revision 1.16  2000/03/21 06:13:30  sparker
# Added pattern rule for .sidl files
# Compile component testprograms
#
# Revision 1.15  2000/03/21 04:30:04  sparker
# Simplified rules for using -soname
# Added a convenience target for subdirectories: "make here"
#
# Revision 1.14  2000/03/20 23:14:13  sparker
# Quieted make output in rules for building subdir Makefiles (added @)
#
# Revision 1.13  2000/03/20 23:07:05  yarden
#  enable compilation in any subdir (sparker)
#  fix sstream include
#
# Revision 1.12  2000/03/20 21:43:30  yarden
# Linux port: add NEED_SONAME
#
# Revision 1.11  2000/03/20 19:35:41  sparker
# Added VPATH support
#
# Revision 1.10  2000/03/17 09:25:07  sparker
# New makefile scheme: sub.mk instead of Makefile.in
# Use XML-based files for module repository
# Plus many other changes to make these two things work
#
# 
