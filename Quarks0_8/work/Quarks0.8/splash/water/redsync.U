EXTERN_ENV
#include "stdio.h"
#include "comments.h"	/* moves leading comments to another file for now */

#include "parameters.h"
#include "mdvar.h"
#include "water.h"
#include "wwpot.h"
#include "cnst.h"
#include "mddata.h"
#include "fileio.h"
#include "split.h"
#include "global.h"

extern double OMAS,HMAS;
extern molecule_type *VAR;

extern double  TLC[100],
      TKIN,TVIR,TTMV,FPOT,FKIN;

extern int procid;
extern int NumProcs;

extern int KINETI(int NMOL, double SUM[], double HMAS, double OMAS);
extern int BNDRY();
extern int POTENG(double *, double *, double *);
extern int CORREC(double *, int);
extern int INTRAF(double *);
extern int PREDIC(double *, int);
extern int INTERF(int, double *);


/************************************************************************/
double  MDMAIN(int NFSV, int NFRST, int NSTEP, int NRST,
	       int NPRINT, int NSAVE, int LKT, int NORD1)

    /* routine that implements the time-steps. Called by main routine 
        and calls others */

{
    double XTT;
    int i;
    double POTA,POTR,POTRF;
    double XVIR,AVGT,TEN;

    unsigned long tw1=0, tw2=0, tw3=0, tw4=0, tpredic=0, tintraf=0;
    unsigned long tinterf=0, tcorrec=0, tbndry=0, tkineti=0, tpoteng=0;
    unsigned long st;

        /* wait till everyone gets to beginning; not necessary */
	
    st = Qk_current_time();
    BARRIER(gl->start, NumProcs);
    tw1 += Qk_current_time() - st;

    /* MOLECULAR DYNAMICS LOOP OVER ALL TIME-STEPS */

    for (i=1;i <= NSTEP; i++) {
       	TTMV=TTMV+1.00;

            /* initialize various shared sums */
	if (procid == 0) {
	    int dir;
	    gl->VIR = 0.0;
	    gl->POTA = 0.0;
	    gl->POTR = 0.0;
	    gl->POTRF = 0.0;
	    for (dir = XDIR; dir <= ZDIR; dir++)
		gl->SUM[dir] = 0.0;
            gl->initialized = 1;
	}

	st = Qk_current_time();
    	PREDIC(TLC,NORD1);
        tpredic += Qk_current_time() - st;

/*
   while (!(gl->initialized)) printf("Process %d spinning on init\n",procid);
*/
	st = Qk_current_time();
     	INTRAF(&gl->VIR);
	tintraf += Qk_current_time() - st;

 	st = Qk_current_time();
        BARRIER(gl->start, NumProcs);
	tw2 += Qk_current_time() - st;

        if (procid == 0) gl->initialized = 0;
	st = Qk_current_time();
    	INTERF(FORCES,&gl->VIR);
	tinterf += Qk_current_time() - st;

	st = Qk_current_time();
        CORREC(PCC,NORD1);
	tcorrec += Qk_current_time() - st;

	st = Qk_current_time();
    	BNDRY();
	tbndry += Qk_current_time() - st;

	st = Qk_current_time();
    	KINETI(NMOL,gl->SUM,HMAS,OMAS);
	tkineti += Qk_current_time() - st;

	st = Qk_current_time();
        BARRIER(gl->start, NumProcs);
	tw3 += Qk_current_time() - st;

    	TKIN=TKIN+gl->SUM[0]+gl->SUM[1]+gl->SUM[2];
        TVIR=TVIR-gl->VIR;

        /*  check if potential energy is to be computed, and if
            printing and/or saving is to be done, this time step.
            Note that potential energy is computed once every NPRINT
            time-steps */

        if (((i % NPRINT) == 0) || ( (NSAVE > 0) && ((i % NSAVE) == 0))){

                /*  call potential energy computing routine */
	    st = Qk_current_time();
	    POTENG(&gl->POTA,&gl->POTR,&gl->POTRF);
	    tpoteng += Qk_current_time() - st;

 	    st = Qk_current_time();
	    BARRIER(gl->start, NumProcs);
	    tw4 += Qk_current_time() - st;

                /* modify computed sums */
	    POTA=gl->POTA*FPOT;
	    POTR=gl->POTR*FPOT;
	    POTRF=gl->POTRF*FPOT;

                /* compute some values to print */
	    XVIR=TVIR*FPOT*0.50/TTMV;
	    AVGT=TKIN*FKIN*TEMP*2.00/(3.00*TTMV);
	    TEN=(gl->SUM[0]+gl->SUM[1]+gl->SUM[2])*FKIN;
	    XTT=POTA+POTR+POTRF+TEN;
	    if ((i % NPRINT) == 0 && procid == 0) {
	  	fprintf(six,"     %5d %14.5lf %12.5lf %12.5lf  \
                    %12.5lf\n %16.3lf %16.5lf %16.5lf\n",
                    i,TEN,POTA,POTR,POTRF,XTT,AVGT,XVIR);
	    }
        }

	printf("tw1 = %d, tw2 = %d, tw3 = %d, tw4 = %d\n",tw1,tw2,tw3,tw4);
        printf("tpredic = %d, tintraf = %d, tinterf = %d, tcorrec = %d\n",
		tpredic, tintraf, tinterf, tcorrec);
	printf("tbndry = %d, tkineti = %d, tpoteng = %d\n",
		tbndry, tkineti, tpoteng);
	 	
            /* wait for everyone to finish time-step */
	BARRIER(gl->start, NumProcs);

	printf("Done step %d\n", i);
    } /* for i */
    return(XTT);
} /* end of subroutine MDMAIN */

