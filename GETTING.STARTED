Things You Need To Know About How To Build the PSE
--------------------------------------------------

1 - Configuring your environment

  Before you can build PSE, you need to appropriately configure your
  environment.  Most of this requires making changes to your shell rc files
  (.cshrc, .customs.cshrc, .kshrc, .bashrc or whatever your shell uses).
  You need only perform these steps once.

  1.1 - Putting stuff on your PATH

  You should edit your shell's rc files and make sure that the following
  are on your PATH:

    /usr/local/bin       (for the 'use' and 'ssh' commands)
    /usr/local/gnu/bin   (for the 'gmake', 'cvs', and 'patch' commands)

  If you have other versions of these commands on your PATH before the
  above versions, you may or may not encounter Strange Behavior.

  1.1 - Getting ssh access to csf

  The PSE sources are kept on the C-SAFE server, csf.cs.utah.edu.  You must
  be able to ssh to this machine in order to aquire the sources.  Most people
  already have access to this machine.  At a prompt (in these examples, "$" is
  the prompt), type:

    $ ssh csf

  You may be asked for your password, but should successfully be able to log
  into csf.  If not, go talk to Someone Who Fixes These Things and get it
  fixed.

  If you hate typing your password all the time, you may optionally add a
  line like:

    pico.cs.utah.edu mcq

  to your ".shosts" file in your home directory, where you substitute the
  name of the machine on which you're going to be running the CVS command for
  "pico.cs.utah.edu" and your username for "mcq".  Doing this tells csf
  (and all other machines on which your home directory is accessible) to
  allow the named user to have ssh access from the named machine without typing
  a password.

  There are more complex and "secure" methods to avoid typing a password than
  an .shosts file, but they're for Weird Security Nuts.

  1.2 - Setting up CVS

  The PSE source tree is managed by CVS.  CVS uses the "ssh" command to
  access the source repository on csf.cs.utah.edu.

  You should look in your shell's rc files and arrange for these variables to
  have these values.  In csh syntax:

    setenv CVS_RSH ssh
    setenv CVSROOT csf.cs.utah.edu:/csafe_noexport/cvs/cvsroot

  In sh/ksh/bash syntax:

    export CVS_RSH=ssh
    export CVSROOT=csf.cs.utah.edu:/csafe_noexport/cvs/cvsroot

  1.3 - Setting up 'use'

  Building the PSE requires that you have a specific version of Tcl/Tk and
  [incr Tcl] available.  Because you may be building the PSE for several
  different ABIs on several different platforms, it is not sufficient to
  "once and for all" configure your environment for the appropriate versions
  of [i]Tcl/Tk.

  The 'use' command will let you easily switch among available pre-built
  versions of [i]Tcl/Tk as you work.  If curious, you can read about 'use'
  on its web page (under construction at this time):

    http://www.cs.utah.edu/~mcq/doc/use.html

  You need to add a line that enables 'use' to modify your shell's
  environment.  You should set this in your shell's rc files.  In csh, this
  line is:

    alias use 'eval `/usr/local/bin/use \!*`'

  In sh/ksh/bash, add the shell function to the appropriate rc file:

    use() {
      eval `/usr/local/bin/use $*`
    }

  If you type 'use' at a command prompt and do not see a message which
  begins "# WARNING", you have correctly configured your shell for the 'use'
  command.

  1.4 - Getting Rid Of Cruft

  Previous versions of SCIrun and continuing cultural intertia cause some
  troublesome settings to persist in people's environments.  To put this
  issue to rest, you should make sure that the following are **NOT** set
  by any of your shell's rc files, nor should you run any form of "setup"
  scripts unless you Really Know What You're Doing.

  The PSE is intended to run correctly without such enviromental
  contamination.  If things in the PSE don't work right, fix the PSE --
  demanding that weirdo environment variables be set merely to achieve
  normal PSE behavior is the Wrong Way To Solve The Problem.  If you
  have problems that you think you want to set an environment variable to
  fix, which are things anyone but you will normally want to have set, you
  should go talk to McQ and he'll work configure magic to eliminate
  the need for the variable.

  The following should NOT BE SET in your shell rc files.  EVER.  PERIOD.
  (Unless you're Very Special, in which case you wouldn't be reading this
  file):

    TCL_LIBRARY
    TK_LIBRARY
    ITCL_LIBRARY
    ITK_LIBRARY
    PACKAGE_PATH

  Also, nothing to do with Tcl, Tk, or iTcl, PSECore, SCICore, or any
  PSE package should be on any of these paths:

    PATH
    LD_LIBRARY_PATH
    LD_LIBRARYN32_PATH
    LD_LIBRARY64_PATH

  Having any of the above defined is Just Asking For Trouble.

2 - Checking out and Building PSE

  2.1 - Log into a build machine

  The best build machine is pico.cs.utah.edu (formerly rapture.cs.utah.edu),
  a 32-processor SGI R10k machine.  If you can't log into pico,
  epic.cs.utah.edu is a good interim solution.  You'll likely eventually want
  to get an account on pico.

     $ ssh pico

  2.2 - Checking out the PSE sources with CVS

  The PSE sources are managed by the CVS version control system.  Go to
  whatever directory you want to work in and check out the sources:

     $ cd myWorkingDirectory
     $ cvs checkout PSE

     [ lots of files go by]

  When you're done, if you go into the PSE directory, you should see:

     $ cd PSE
     $ ls
     CVS       prebuilt  src

  2.3 - Use [i]Tcl/Tk

  In order to properly function, the PSE requires that Tcl/Tk 8.0.4 and
  [incr Tcl] 3.0.1 be available in your environment.  The command:

     $ use itcltk

  will achieve this.  When building for the 64-bit ABI on R10k boxes, you'll
  want to 'use itcltk64' instead, to get the version of [i]Tcl/Tk built for
  that ABI.

  2.4 - Configure the sources

  Before you can build the sources, you must "configure" the source tree,
  which examines your build platform and customizes the PSE's Makefiles
  for your machine.

  Go into the PSE/src directory and run the "configure" script:

    $ cd PSE/src
    $ ./configure

  You may optionally want to pass options to configure as described in
  PSE/src/README.PSE to enable for example the SCIRun or DaveW packages.  The
  Uintah package is built by default.

  2.5 - Build the sources

  You must build the sources with the 'gmake' command.  Ordinary 'make's
  won't do.  From the PSE/src directory:

    $ gmake

3 - Starting the PSE

  When finished building, you'll have a "uintah" binary in PSE/src which you
  can run to start the PSE.  This binary has hard-coded paths to the locations
  of its components, including the PSE packages, the [i]Tcl/Tk libraries and
  files, and others.

  You can run the PSE simply by running 'uintah' in the PSE/src directory:

    $ cd PSE/src
    $ ./uintah

  3.1 - A note about 'use'

  The first time that the 'use' command is run on a machine, it creates a
  link from /tmp/opt/... to the actual [i]Tcl/Tk package.  The PSE requires
  that this link be present in order to run (its hard-coded path to the
  [i]Tcl/Tk libraries points to this link).

  If you're running the PSE on a machine for the first time since it has been
  rebooted, this link will not exist and you must execute "use itcltk" to
  recreate it.

  You normally need not execute "use itcltk" before each run of the PSE.

  If you only ever build with the default (n32) ABI, you might consider
  adding the line "use itcltk" to your shell's rc files, to avoid thinking
  about such things.  The disadvantage to doing this is that "itcltk" may
  not be compiled for some cs department architecutres, causing 'use' to
  report an error when logging into those machines.
