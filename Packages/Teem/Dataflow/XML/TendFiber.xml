<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "../../../../Dataflow/XML/component.dtd">

<!--
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
-->


<component name="TendFiber" category="Tend">  <overview>
    <authors>
      <author>Martin Cole</author>
    </authors>
    <summary>Extract a single fiber tract, given a start point.</summary>
    <description>
      <p>Extract a single fiber tract, given a start point. Currently,
only fibers based on 4th-order Runge-Kutta on principal eigenvector are
supported via tend. The world space in which fibers are calculated has the
volume inscribed in a bi-unit cubecentered at the origin. The output fiber is
in the form of a 3xN array of doubles, with N points along fiber. </p>
      <p>Step Size : stepsize along fiber, in world space. This value should be a double.</p>
      <p>Stopping Criteria : the conditions that should signify the end of a fiber.
      Multiple stopping criteria are logically OR-ed and tested
      at every point along the fiber. These conditions include Fiber Length, Number of Steps,
      Confidence Threshold, and Anisotropy Threshold.</p>
      <p>Kernel : Kernel for reconstructing tensor field.</p>
    </description>
    <examplesr></examplesr>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
        <name>nin</name>
	<datatype>Teem::Nrrd</datatype>
      </port>
      <port>
        <name>SeedPoints</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
        <name>Fibers</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </outputs>
  </io>
  <testing>
  </testing>
</component>
