function [x,ierr] = loadHypreParVector(filename,numProcs)
%LOADHYPREPARVECTOR  Load parallel vector from Hypre.
%   X = LOADHYPREPARVECTOR(FNAME,NUMPROCS) loads the vector x from multiple ouptut
%   files generated by Hypre, in Par format. The Hypre matrix should be
%   printed to files using the following C commands in a Hypre interface:
%
%   HYPRE_ParVector  par_x;
%   HYPRE_ParVectorPrint(par_x, FNAME);
%
%   where FNAME is the same string as the input argument to this MATLAB
%   function. A is returned as a sparse MATLAB matrix. NUMPROCS is the
%   number of processors used to generate the Hypre output files.
%
%   See also: LOAD, LOADHYPREIJMATRIX.

% Revision history:
% 27-JUL-2005   Oren      Created


% Based on the Hypre function parcsr_mv/par_vector.c:hypre_ParVectorRead()

o       = 1;
base_i  = 1;
base_j  = 1;
ierr    = 0;
parAlist = zeros(0,3);

for myid = 0:numProcs-1
    new_filename = sprintf('%s.INFO.%d',file_name,my_id);
    file = fopen(new_filename, 'r');
    if (file < 0)
        fprintf('Error: can''t open output info file %s\n', new_filename);
        A = [];
        return;
    end

    partitioning = hypre_CTAlloc(int,num_procs+1);

sprintf(new_file_namew,"%s.INFO.%d",file_name,my_id); 
fp = fopen(new_file_name, "r");
fscanf(fp, "%d\n", &global_size);
for (i=0; i < num_procs; i++)
     fscanf(fp, "%d\n", &partitioning[i]);
     fclose (fp);
     partitioning[num_procs] = global_size; 

     par_vector = hypre_CTAlloc(hypre_ParVector, 1);
        
     hypre_ParVectorGlobalSize(par_vector) = global_size;
     hypre_ParVectorFirstIndex(par_vector) = partitioning[my_id];
     hypre_ParVectorPartitioning(par_vector) = partitioning;

     sprintf(new_file_name,"%s.%d",file_name,my_id); 
     hypre_ParVectorLocalVector(par_vector) = hypre_SeqVectorRead(new_file_name);




    global_num_rows     = fscanf(file, '%d',1);
    global_num_cols     = fscanf(file, '%d',1);
    num_rows            = fscanf(file, '%d',1);
    num_cols            = fscanf(file, '%d',1);
    num_cols_offd       = fscanf(file, '%d',1);
    num_nonzeros_diag   = fscanf(file, '%d',1);
    num_nonzeros_offd   = fscanf(file, '%d',1);

    row_starts          = zeros(numProcs+1,1);
    col_starts          = zeros(numProcs+1,1);

    for i = 0:numProcs
        row_starts(i+o) = fscanf(file, '%d',1);
        col_starts(i+o) = fscanf(file, '%d',1);
    end

    data = fscanf(file, '%d %d %e');
    Alist = reshape(data,[3 length(data)/3])';
    parAlist = [parAlist; Alist];
    fprintf('Loaded matrix from proc = %d\n',myid);
end  % for myid

A = sparse(parAlist(:,1),parAlist(:,2),parAlist(:,3));
