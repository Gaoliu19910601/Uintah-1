#!/bin/csh
#
#.......................................................................
# pscp2 <num Processors> < remove remote directory> < localDirectory> <login@Machine>:<remote dir>
# You must be able to ssh onto the remote machine without a password
# or it won't work.
#.......................................................................
#echo $argv
#
#------------------
# unalias commands
unalias ssh
unalias rm
unalias cd

#------------------
# error checking
if ($#argv != 4) then
  echo " pscp2 < number of Processors> < remove remote directory (y/n) > < local dir to be copied> <login@Remote Machine>:<remote dir>"
  exit(0)
endif

set nproc         = $argv[1]
set rmDir         = $argv[2]
set localDir      = $argv[3]
set string        = $argv[4]
set remote_machine = `echo $string |cut -d\@ -f2 | cut -d\: -f1`
set user_test      = `echo $string |cut  -s -d\@ -f1`

if ( $user_test == ""   ) then
  set user_test = $USER
endif

setenv LOGIN              $user_test@$remote_machine
setenv REMOTEDIR_TMP      `echo $string |cut -d\: -f2`
setenv LOCALDIR           $localDir
setenv REMOTEDIR          $REMOTEDIR_TMP/`basename $LOCALDIR`
setenv PSCP_FILES         /tmp/pscp_files_`basename $localDir`_`whoami`

echo "login:       $LOGIN"
echo "nprocessors: $nproc"
echo "localDir:    $localDir"
echo "remoteDir:   $REMOTEDIR"
echo "removing the remote directory: " $rmDir
echo "pscp_files:  $PSCP_FILES"

#------------------
# Bulletproofing
echo "Bullet proof tests"

echo "  Test: does the local folder ($localDir) exist"
if ( ! -e $localDir ) then
  echo " ERROR: local directory $localDir doesn't exist"
  exit(1)
endif

echo "  Test: passwordless access."
set test = `ssh -x $LOGIN "echo 'password_access_works'"`
if ( $test != "password_access_works" ) then
  echo " ERROR:  passwordless access is not working."
  echo "         You must be able to login into the $remote_machine without a password for this script to work"
  exit(1)
endif

echo "  Test: Do we know about the remote operating system"
set OS = `ssh -x $LOGIN uname`
if ( $OS != "Linux" && $OS != "IRIX64" ) then
  echo " ERROR: there is no pscp_driver for this operating system: $OS"
  exit(1)
endif
echo "_____________________________________"
#--------------------------------------------------------------------------
# Now do the work
echo "Now removing stamp directory"
#/bin/rm -rf Stamp

# remove the remote directory
if( $rmDir == "y" || $rmDir == "Y" ) then
  echo "Now removing $localDir from $remote_machine if it exists"
  ssh -x $LOGIN "cd $REMOTEDIR_TMP; /bin/rm -rf $localDir; mkdir $localDir"
else
  echo "ssh -x $LOGIN 'cd $REMOTEDIR_TMP; mkdir `basename $localDir`'"
  ssh -x $LOGIN "cd $REMOTEDIR_TMP; mkdir `basename $localDir`"
endif

cd $localDir

#-------------------------------
# make a sorted list of potential files to copy
# let the user edit that file with vi
/bin/rm -f $PSCP_FILES

find . -maxdepth 1 -type f             -exec basename {} \; > $PSCP_FILES
find . -maxdepth 1 -name "t*"  -type d -exec basename {} \; | sort -r >>$PSCP_FILES
find -path './checkpoints/*' -maxdepth 2 >>$PSCP_FILES

echo "Now starting vi in a separate xterm:  Remove the files you don't want transfered"
xterm -bg "DarkSlateGray" -fg "orange" -e "vi $PSCP_FILES"
chmod ug+rw $PSCP_FILES
 
/usr/bin/time -p gmake TAR=tar -f $pscp2dir/pscp2_driver_$OS -j $nproc
