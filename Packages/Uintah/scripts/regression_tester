#! /bin/sh

# If we are on inferno use the TestData in $INF_GS
INF_GS=/home/csafe/csafe-tester/Linux/TestData

ON_SCI_FS=
if test -d $INF_GS; then
   ON_SCI_FS=true
fi

if test "$ON_SCI_FS" == "true"; then
   if test "$GOLD_STANDARD" != "" -a "$GOLD_STANDARD" != "$INF_GS"; then
      echo ""
      echo "WARNING: You have specified a gold standard different from the default..."
      echo "         If you did not wish to do this, unset the GOLD_STANDARD environment"
      echo "         variable."
      echo ""
      echo "         Continuing in 5 seconds..."
      sleep 5
      echo ""
      test_dir=${GOLD_STANDARD}
   else
       test_dir=$INF_GS
   fi
else
    if test "$GOLD_STANDARD" == "" ; then
        echo "The variable GOLD_STANDARD has not been set.  Please set the GOLD_STANDARD"
        echo "variable to a valid directory (either in your environment or in this script."
        echo "Goodbye."
        exit
    elif test -d ${GOLD_STANDARD}; then
        test_dir=${GOLD_STANDARD}
    fi
fi


if test ! -d $GOLD_STANDARD; then
   echo "The directory, '$GOLD_STANDARD', does not exist.  Please set the variable"
   echo "GOLD_STANDARD, either in your environment or in this script, to a valid directory."
   echo "Goodbye."
   exit
fi

if test ! -x "sus"; then
   echo
   echo "You must run this script from a directory that contains the 'sus' executable."
   echo
   exit
fi

# Set the default TestData directory
DIR=dbg

# Set up MPI 
MPI=''
MPI_RUN="no"

# Set the default inputs directory
INPUTS=../../../../src/Packages/Uintah/StandAlone/inputs

if test ! -d "$INPUTS"; then
   echo
   echo "ERROR: can't find your 'inputs' directory..."
   echo "       (Looked in $INPUTS)"
   echo 
   exit
fi

input_file=

# Set the test results directory
results=TestResults
if test ! -d $results; then
    echo
    echo "Creating 'TestResults' directory..."
    echo
    mkdir TestResults
fi

do_mpm=0
do_mpmf=0
do_ice=0
do_ice_amr=0
do_mpmice=0
do_mpmice_amr=0
do_models=0
do_impm=0
do_smpm=0
do_arches=0
do_mpmarches=0
do_examples=0
do_remove=0
do_restart=0
do_mem=0
compare_uda_options=""

ALL=

usage () {
    echo
    echo "Usage: regression_tester [OPTION]..."
    echo "  Run the regression tester.  With no OPTION, run all the tests."
    echo
    echo "  -main          run the mpm,ice,mpmice,arches and mpmarches tests"
    echo "  -all           run all tests (overrides other tests flags)"
    echo "  -arches        run the arches tests"
    echo "  -ice_amr       run the tests ice amr tests"
    echo "  -e             run the example tests"
    echo "  -m             run the mpm tests"
    echo "  -models        run the Models tests"
    echo "  -mpmarches     run the mpmarches tests"
    echo "  -sm            run the smpm tests"
    echo "  -i             run the ice tests"
    echo "  -mi            run the mpmice tests"
    echo "  -mpmice_amr    run the mpmice amr tests"
    echo "  -im            run the implicit mpm tests"
    echo "  -dbg           use the dbg TestData"
    echo "  -opt           use the opt TestData"
    echo "  -nompi         do not use mpi"
    echo "  -restart       restart and compare with the original uda.000"
    echo "  -mem           check for memory leaks"
    echo "  -clean         remove the *.out *.compare and uda directories"
    echo "  -exact         perform an exact comparison (absolute/relative tolerance == 0)"
    echo "  -h[elp]        display this help and exit"
    echo;
    exit
}

for arg in $*; do

    case $arg in
        -all)
            ALL=yes
            ;;
        -main)
            echo; echo "Scheduling mpm, ice, and mpmice tests . . ."
            do_ice=1
            do_mpm=1
            do_mpmf=1
            do_mpmice=1
            do_models=1
            do_arches=1
            do_mpmarches=1
            do_examples=1;;
        -arches)
            echo "Scheduling the arches tests . . ."
            do_arches=1;;
        -ice_amr)
            echo "Scheduling the ICE AMR tests . . ."
            do_ice_amr=1
            MPI_RUN="yes";;
        -e)
            echo "Scheduling the examples tests . . ."
            do_examples=1;;
        -i) 
            echo "Scheduling the ice tests . . ."
            do_ice=1;;
        -m)
            echo "Scheduling the mpm tests . . ."
            do_mpm=1;;
        -mf)
            echo "Scheduling the mpmfracture tests . . ."
            do_mpmf=1;;
        -models)
            echo "Scheduling the models tests . . ."
            do_models=1;;
        -mpmarches)
            echo "Scheduling the mpmarches tests . . ."
            do_mpmarches=1;;
        -sm)
            echo "Scheduling the smpm tests . . ."
            do_smpm=1;;
        -mi)
            echo "Scheduling the mpmice tests . . ."
            do_mpmice=1;;
        -mpmice_amr)
            echo "Scheduling the MPMICE AMR tests . . ."
            do_mpmice_amr=1;;
        -im)
            echo "Scheduling the implicit mpm tests . . ."
            do_impm=1
            MPI_RUN="yes";;
        -clean)
            echo "Removing *.out *.compare and *.uda files . . ."
            do_remove=1;;
        -dbg)
            echo "Using the dbg TestData . . ."
            DIR=dbg;;
        -opt)
            echo "Using the opt TestData . . ."
            DIR=opt;;
        -nompi)
            echo "Not using mpi . . ."
            MPI_RUN="no";;
        -restart)
            echo "Doing restart tests . . ."
            do_restart=1;;
        -mem)
            echo; echo "Doing memory leak . . ."
            do_mem=1;;
        -exact)
            echo; echo "Doing an exact comparison test"
            compare_uda_options="-exact";;
        *)
            usage ;;
    esac
done

# If no args, run all the tests...
if test $# = 0; then
   ALL=yes
fi

echo
echo "Using the >> $DIR << gold standard directory."

# Set up the various test cases

mpm_test_cases="disks2mat4patch heatcond2mat inclined_plane_sphere foam_crush const_test_hypo const_test_cmr const_test_nhp const_test_vs adiCuJC4000s696K adiCuMTS4000s696K adiCuPTW4000s696K adiCuSCG4000s696K adiCuZA4000s696K test_corrug_plate test_cyl_pene_no_ero test_gurson_beckerdrucker_mts testConvert1MAdd"
mpmf_test_cases="regressionFMPM"
ice_test_cases="advect rieman_sm impHotBlob hotBlob2mat hotBlob2mat_sym hotBlob2mat8patch"
ice_amr_test_cases="hotBlob_AMR advect2matAMR"
mpmice_test_cases="massX guni2dRT SteadyBurn_2dRT TBurner_2dRT TRWnoz testConvertMPMICEAdd advect_2L_MI"
mpmice_amr_test_cases="advect_2L_MI"
model_test_cases="HePlume JP8_Radiation"
smpm_test_cases="test_plane_shell_punch test_sphere_shell_compress"
impm_test_cases="billet.static adiCuJC01s296K adiCuMTS01s296K adiCuPTW01s296K adiCuSCG01s296K adiCuZA01s296K"
arches_test_cases="methane_explicit_table"
mpmarches_test_cases="jp8cyl"
examples_test_cases="poisson1 poisson2"

# Check if the applications sus and compare_uda are available

if test ! -x compare_uda; then
    echo; echo "compare_uda is not available . . . exiting"
    exit
fi

if test ! -e inputs; then
    echo; echo "'inputs' data directory is not available . . . exiting"
    exit
fi

if test  -e $results; then
   echo; echo "Cleaning out old '$results' directory"
   rm -rf $results/*
fi


REMOVE () {
   rm -rf $results
}

num_proc () {
    numproc=`grep -m1 patches $input_file | tr -d "<patches>/[]" | awk '{split($0,patch,","); print patch[1]*patch[2]*patch[3]}'`
#   echo "number of patches" $numproc
}

mem_check () {
    
    if test $do_mem -eq 0; then
        return;
    fi

    MALLOC_STATS=$n.mem
    

}

run_test () {

    echo; date

    if test -x /usr/bin/lamboot; then
        /usr/bin/lamboot
    fi

    cd $results
    cp ../$INPUTS/$CASE/$n.ups ../$n.ups.rt
    input_file=../$n.ups.rt

    num_proc
  
    if test $numproc -gt 1; then
        MPI="mpirun -np $numproc"
    elif test $MPI_RUN == "yes"; then
        MPI="mpirun -np $numproc"
    else
        MPI=""
    fi

    mem_check

    echo; echo "Running: $MPI sus $opts $input_file"
    $MPI ../sus $opts $input_file &> $n.out
    rm $input_file

    success=`grep "successfully" $n.out`
    if test -n "$success"; then 
        echo $success
        cd ..
    else
        echo; echo "FAILURE running sus . . ."
        cd ..
        continue
    fi

    if test -x /usr/bin/lamhalt; then
        /usr/bin/lamhalt
    fi

}


compare_results () {
    cd $results
    
    # Inside of the component directory find the location of the 
    # gold standard uda and pass it to compare_uda
    
    uda_tmp=`echo $uda |tr "[/]" "[ ]"`  # eliminate "/" from $uda
    goldStandard=`find $test_dir/$DIR/$CASE/$n -maxdepth 3 -type d -name $uda_tmp`
    echo "Comparing $uda results against '$goldStandard'"
    
    echo "Running command: ../compare_uda $compare_uda_options gs: $goldStandard ud: $uda"
    echo "../compare_uda $compare_uda_options  $goldStandard $uda" > $n.compare 2>&1
    ../compare_uda $compare_uda_options $goldStandard $uda >> $n.compare 2>&1
    
    compare=`grep "passed" $n.compare`
    if test -n "$compare"; then
        echo $compare
        cd ..
    else
        echo; echo "FAILURE running compare_uda . . ."
        cd ..
    fi
}

run_restart () {
    if test $do_restart -eq 1; then
        cd $results

        uda_new=`echo $uda | tr -d "/"`

        echo; echo "Running: $MPI sus $opts -restart -t 0 -copy $uda_new.000"
        $MPI ../sus $opts -restart -t 0 -copy $uda_new.000 &> $n.out_restart
        success=`grep "successfully" $n.out_restart`
        if test -n "$success"; then 
            echo $success
            echo "Comparing restart results"
            echo "compare_uda $uda_new.000 $uda_new.001"
            ../compare_uda $uda_new.000 $uda_new.001 &> $n.compare_restart
            compare=`grep "passed" $n.compare_restart`
            if test -n "$compare"; then
                echo $compare
            else
                echo; echo "FAILURE running compare_uda on restart test . . ."
            fi
        else
            echo; echo "FAILURE running sus . . ."
        fi
        cd ..
    fi
}

mpm_test () {
    echo; echo "Testing $mpm_test_cases"
    
    for n in $mpm_test_cases; do
        run_test
        uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | awk '{print $1}'  `
        compare_results 
        run_restart
    done
}

mpmf_test () {
    echo; echo "Testing $mpmf_test_cases"
    
    for n in $mpmf_test_cases; do
        run_test
        uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | awk '{print $1}'  `
        compare_results 
        run_restart
        MPI=""
    done
}ar

mpmice_test () {
    echo; echo "Testing $mpmice_test_cases"
    
    for n in $mpmice_test_cases; do
        run_test
        uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<*filebase\>//g | sed s/\<// | awk '{print $1}'  `
        compare_results
        run_restart
        MPI=""
    done
}
model_test () {
    echo; echo "Testing $model_test_cases"
    echo "making link to inputs directory"
    cd $results
    ln -s ../inputs .
    cd ..
    
    for n in $model_test_cases; do
        run_test
        uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<*filebase\>//g | sed s/\<// | awk '{print $1}'  `
        compare_results
        run_restart
        MPI=""
    done
}
impm_test () {
    echo; echo "Testing $impm_test_cases"
    
    for n in $impm_test_cases; do
        run_test
        uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<*filebase\>//g | sed s/\<// | awk '{print $1}'  `
        compare_results
        run_restart
    done
    MPI=""
}

smpm_test () {
    echo; echo "Testing $smpm_test_cases"
    
    for n in $smpm_test_cases; do
        run_test
        uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
        compare_results
        run_restart
        MPI=""
    done
}


ice_test () {
    echo; echo "Testing $ice_test_cases"
    
    for n in $ice_test_cases; do
        run_test
        uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
        compare_results
        run_restart
        MPI=""
    done
}
ice_amr_test () {
    echo; echo "Testing $ice_amr_test_cases"
    
    for n in $ice_amr_test_cases; do
        run_test
        uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
        compare_results
        run_restart
        MPI=""
    done
}
mpmice_amr_test () {
    echo; echo "Testing $mpmice_amr_test_cases"
    
    for n in $mpmice_amr_test_cases; do
        run_test
        uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
        compare_results
        run_restart
        MPI=""
    done
}

arches_test () {
    echo; echo "Testing $arches_test_cases"
    
    for n in $arches_test_cases; do
        echo; echo "Running: mpirun -np 1 sus -arches $INPUTS/$CASE/$n.ups"
        uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
        mpirun -np 1 sus -arches -mpi $INPUTS/$CASE/$n.ups &> $n.out
        success=`grep "successfully" $n.out`
        if test -n "$success"; then 
            echo $success
        else
            echo; echo "FAILURE running sus . . ."
            continue
        fi

        compare_results
        run_restart
        MPI=""
    done
}

mpmarches_test () {
    echo; echo "Testing $mpmarches_test_cases"
    
    for n in $mpmarches_test_cases; do

        uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
        cd $results
        cp ../$INPUTS/ARCHES/StaticMixingTables/JP-8/NAE.rxn.new NAE.rxn.new
        cd ../

        MPI_RUN_OLD=$MPI_RUN
        MPI_RUN="yes"
        MPI='mpirun -np 1'
        run_test

        compare_results
        run_restart
        MPI=""
    done
}

examples_test () {
    echo; echo "Testing $examples_test_cases"
    
    for n in $examples_test_cases; do
        echo; echo "Running: ./sus -poisson1 $INPUTS/$CASE/$n.ups"
        run_test
        ./sus -poisson1 $INPUTS/$CASE/$n.ups &> $n.out
        success=`grep "successfully" $n.out`
        if test -n "$success"; then 
            echo $success
        else
            echo; echo "FAILURE running sus . . ."
            continue
        fi

        compare_results
        run_restart
        MPI=""
    done
}

if test -n "$ALL"; then
   do_mpm=1
   do_mpmf=1
   do_ice=1
   do_ice_amr=1
   do_mpmice=1
   do_mpmice_amr=1
   do_models=1
   do_smpm=0
   do_impm=1
   do_arches=1
   do_mpmarches=1
   do_examples=1
fi

echo
echo "Running tests using gold standard:  $test_dir"
echo "Starting tests at: `date`"
echo

if test "$do_mpm" -eq 1; then
    CASE=MPM
    opts=-mpm
    mpm_test
fi

if test "$do_mpmf" -eq 1; then
    CASE=MPMF
    opts=-mpmf
    mpmf_test
fi

if test "$do_ice" -eq 1; then
    CASE=ICE
    opts=-ice
    ice_test
fi
if test "$do_ice_amr" -eq 1; then
    CASE=ICE    # this won't work when we have MPMICE AMR
    opts=-ice
    ice_amr_test
fi
if test "$do_mpmice" -eq 1; then
    CASE=MPMICE
    opts=-mpmice
    mpmice_test
fi
if test "$do_mpmice_amr" -eq 1; then
    CASE=MPMICE
    opts=-mpmice
    mpmice_amr_test
fi
if test "$do_models" -eq 1; then 
    CASE=Models
    opts="-mpi"
    model_test
fi
if test "$do_smpm" -eq 1; then
    CASE=SMPM
    opts=-smpm
    smpm_test
fi
if test "$do_impm" -eq 1; then
    CASE=IMPM
    MPI="mpirun -np 1 "
    opts="-impm"
    impm_test
fi
if test "$do_arches" -eq 1; then
    CASE=ARCHES
    opts=-arches
    arches_test
fi
if test "$do_mpmarches" -eq 1; then
    CASE=MPMARCHES
    opts=-mpmarches
    mpmarches_test
fi
if test "$do_examples" -eq 1; then
    CASE=Examples
    examples_test
fi
if test "$do_remove" -eq 1; then
    REMOVE
fi

echo
echo "Ending tests at:   `date`"
echo
