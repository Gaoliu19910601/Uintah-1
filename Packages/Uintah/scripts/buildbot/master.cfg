# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("DebianTesting_x86_64", "password")]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.svnpoller import SVNPoller
source_code_svn_url='https://code.sci.utah.edu/svn/SCIRun/trunk'
svn_poller = SVNPoller(svnurl=source_code_svn_url,
		       pollinterval=60*60, # seconds -- every 60 minutes
		       )
c['change_source'] = [ svn_poller ]



####### SCHEDULERS

## configure the Schedulers

from buildbot import scheduler

daily = scheduler.Periodic("daily",["Uintah-Daily"],24*60*60)
code_changed = scheduler.Scheduler(name="code_changed", branch=None,
				   treeStableTimer=2*60, # wait 2 minutes
				   builderNames=["Uintah-Incremental"])

c['schedulers'] = []
c['schedulers'] = [ daily, code_changed]


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

from buildbot.process import factory
from buildbot.steps import source, shell

f1 = factory.BuildFactory()
f1.addStep(source.SVN,
	   svnurl=source_code_svn_url,
	   mode="copy")

mkdir_dbg = ["/bin/mkdir", "dbg2"]
cddir_dbg = ["cd dbg2", "/usr/bin/touch dbg3"]

compiler_env = {'CC' : '/usr/lib/ccache/gcc',
		'CXX' : '/usr/lib/ccache/g++',
		'F77' : 'gfortran'}

third_party = ["/usr/local/Thirdparty/1.25.3/Linux/gcc-4.3.1-2-64bit"]

configure_command = ["./src/configure", "--enable-debug", "--enable-64bit",
		     "--enable-sci-malloc", "--enable-package=Uintah",
		     "--with-thirdparty=/usr/local/Thirdparty/1.25.3/Linux/gcc-4.3.1-2-64bit"]


#f1.addStep(shell.ShellCommand, command=['/bin/mkdir', 'dbg'])
#f1.addStep(shell.ShellCommand, command=mkdir_dbg )

#f1.addStep(shell.ShellCommand, command=['cd dbg'])
#f1.addStep(shell.ShellCommand, command=cddir_dbg )

#f1.addStep(shell.ShellCommand, command=["/bin/sh", "cd dbg"])
#f1.addStep(shell.ShellCommand, command=["/usr/bin/touch", "dbg_file"])


f1.addStep(shell.ShellCommand, command=configure_command,env=compiler_env)

f1.addStep(shell.ShellCommand, command=["make", "-j8"])
#f1.addStep(Trial(testpath="."))

b1 = {'name': "Uintah-Daily",
      'slavename': "DebianTesting_x86_64",
      'builddir': "uintah_daily",
      'factory': f1,
      }

b2 = {'name': "Uintah-Incremental",
      'slavename': "DebianTesting_x86_64",
      'builddir': "uintah_incremental",
      'factory': f1,
      }

c['builders'] = [b1, b2]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Uintah"
c['projectURL'] = "http://www.csafe.utah.edu/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://retriever.sci.utah.edu:8010/"
