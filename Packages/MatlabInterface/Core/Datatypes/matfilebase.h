/*
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
*/

/*
 * FILE: matfilebase.h
 * AUTH: Jeroen G Stinstra
 * DATE: 7 JAN 2004
 */
 
#ifndef JGS_MATLABIO_MATFILEBASE_H
#define JGS_MATLABIO_MATFILEBASE_H 1
 
/*
 * matfilebase class includes error handling and definition of
 * types. All other matfile classes are derived from this one
 * so all enumerations and error handling classes are available
 * without spilling everything into the global namespace
 * This class should not add any memory overhead on the classes
 * derived from it.
 *
 */

#include <string>
#include "matfiledefs.h"

namespace MatlabIO {

class matfilebase {
  public:

    // all functions for reading and writing matfiles are based on
    // this class, which defines constants and error exceptions
    
    // base class for the exceptions
    class matfileerror {};   
	
	// Exceptions generated by the different matfile classes
    class could_not_open_file 	: public matfileerror {};
    class io_error				: public matfileerror {};
    class invalid_file_format 	: public matfileerror {};
    class unknown_type			: public matfileerror {};
    class empty_matlabarray     : public matfileerror {};
    class out_of_range			: public matfileerror {};
    class internal_error		: public matfileerror {};
	class invalid_file_access   : public matfileerror {};

    // enums
    enum mitype { 	miSAMEASDATA = -1,
					miUNKNOWN = 0,
                	miINT8,
					miUINT8,
					miINT16,
					miUINT16,
					miINT32,
					miUINT32,
					miSINGLE,
					miRESV1,
					miDOUBLE,
					miRESV2,
					miRESV3,
					miINT64,
					miUINT64,
					miMATRIX  }; 
                    
   // mxtype is the matlab classification for the matlab arrays
   // this enum is used internally and is not used at the interface
   // to other classes. 
   // Between the mitype and the mxtype there is a certain overlap
   // like a dense matrix is spread out over a number of different
   // classes. To have a nicer interface, a mlclass enum defined
   // only listing the most basic of classes.
							
								    
   enum mxtype {	mxUNKNOWN = 0,
					mxCELL,
					mxSTRUCT,
					mxOBJECT,
					mxCHAR,
					mxSPARSE,
					mxDOUBLE,
					mxSINGLE,
					mxINT8,
					mxUINT8,
					mxINT16,
					mxUINT16,
					mxINT32,
					mxUINT32 };
			
   enum mlclass {	mlUNKNOWN = 0,
					mlCELL,
					mlSTRUCT,
					mlOBJECT,
					mlSTRING,
					mlSPARSE,
					mlDENSE }; 
}; // end matfilebase

} // end namespace
#endif 
