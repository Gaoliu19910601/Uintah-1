<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "../../../../../doc/Utilities/XML/component.dtd">
<?xml-stylesheet href="../../../../../doc/package-component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>
<component name="Tikhonov" category="Inverse">
  <overview>
    <authors>
      <author>Yesim Serinagaoglu</author>
    </authors>
    <summary>
      This module applies Tikhonov regularization to an existing forward model, with flexible control of regularization type and parameters.  Currently, the module solves the inverse problem in a single time-instant.  This module requires a forward model matrix, geometries for the associated surfaces, and some remote boundary conditions, i.e., torso or
head surface potentials.
    </summary>
    <description>
      <p>The Tikhonov module has three inputs, two outputs, and a user
interface (UI) for selecting the regularization parameter. In a
Forward problem matrix, $\left[{\bf A}\right]$. This matrix could be
created using the SetupBEMatrix module, or created elsewhere and saved
as SCIRun matrix format, which is loaded via the MatrixReader
module.</p>
      <p>A Regularization matrix will contain the transform that
constrains the regularized inverse solution. This is typically the
output of the AttributeTrf module, but as in the Forward matrix,it can
be created externally and loaded via the MatrixReader module. If
nothing is connected to this input, identity matrix is used as
default.</p>
          
      <p>The Neumann Boundary conditions, $\left[{\bf y}\right]$ are
values of potential on the outer boundary of the geometry, typically
the body surface or head surface potentials. This is the "attributes"
part of a field data type.</p>

      <p>The ManageFieldData module can be used to extract the vector
of attributes (i.e., the potentials) from the original field data.</p>

      <p>There is a vector of potentials without any geometry
information. This vector can be combined with the appropriate geometry
file using the ManageFieldDat module to create a field data format.
</p>
         
      <p>The UI of the Tikhonov module is used to select a method to
choose lambda. Fig.[Tikh-UI] shows the UI with the L-curve option
selected and the corresponding, plotted L-curve. Thus far, we have
implemented three options: 1)enter a single value: the user can type
any value in the UI and the solution is implemented for that lambda
value only, 2) choose from a slider: the user can select a value by
moving the slider (the range of the slider and the increments are
pre-defined inside the code), and 3) determine the value using the
L-curve method described in section~\ref{Sec:regpar} as it is used to
obtain the best lambda value. Currently, the range of regularization
parameters that is used to obtain the L-curve is fixed.</p>


      <p>An example SCIRun network to solve for the potentials on the
heart surface at a particular time instant is shown in
Fig.[Tikh-net].</p>

    </description>
</overview>
 <io>
    <inputs lastportdynamic="no">
      <port>
        <name>ForwardMat</name>
        <datatype>SCIRun::Matrix</datatype>
      </port>
      <port>
        <name>RegularizationMat</name>
        <datatype>SCIRun::Matrix</datatype>
      </port>
      <port>
        <name>MeasuredPots</name>
        <datatype>SCIRun::Matrix</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
        <name>InverseSoln</name>
        <datatype>SCIRun::Matrix</datatype>
      </port>
      <port>
        <name>RegForwardMat</name>
        <datatype>SCIRun::Matrix</datatype>
      </port>
    </outputs>
  </io>
  <gui>
  </gui>
  <testing>
  </testing>
</component>

