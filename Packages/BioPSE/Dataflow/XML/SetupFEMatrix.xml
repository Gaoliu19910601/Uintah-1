<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "../../../../Dataflow/XML/component.dtd">

<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->



<component name="SetupFEMatrix" category="Forward">
  <overview>
    <authors>
      <author>Alexei Samsonov</author>
      <author>Ruth Nicholson Klepfer</author>
    </authors>
    
    <summary>The module sets up mesh with conductivity tensors and
      Dirichlet boundary conditions specifically for bioelectric field
      probles
    </summary>
    
    <description>
      <p>Version Date: March 2001</p><p>Version: 1.0</p>
      <p>The module provides basic means for construction of the FE matrix
      with linear elements for bioelectric field problems
      (discretization of Poisson equation for volume conductor
      problem). The input field should have properties with lookup
      names that correspondend to the bioelectric field problem. The module conventions appear below:</p>
      
      <orderedlist>
	<listitem>
	  <p>The Field containing a mesh should be a TetVolField(char) type,
	  which contains indices to the property 'table'; actual values of the 
	  conductivity tensors, optimizing
	  storage.</p>
	</listitem>
	<listitem>
	  <p>The property of the conductivity mesh name 'table' should
	  have the associated data object Array1(Tensor) type. Any
	  lookup into the table is done By dereferencing indices of
	  conductivity mesh, the module performs any lookup into the table.</p>
	</listitem>
	<listitem>
	  <p>Dirichlet boundary conditions, if any, should be
	  represented as property with name "dirichlet" and be a
	  vector(pair(int, double)) type, where "int" field corresponds to
	  node index, and "double" field is the value of potential at
	  the node</p>
	</listitem>
      </orderedlist>
      
      <note>
	<p>The BioPSE::Algorithm::BuildFEMatrix::build_FEMatrix()performs the actual computation 
	of the matrix. Other
	modules or any other code may use the algorithm for other
	kinds of problems involving discretization of the Poisson equation
	in 3D by linear finite elements.</p>
      </note>
      
      <developer>
	<p>The discretization of the Poisson equation on the supplied
	mesh is performed by linear finite elements using Galerkin approach.</p>
      </developer>
    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <!-- one of (device port file) -->
      <port>
	<name>Mesh</name>
	<description>
	  <p>Takes a handle to Field object containing properties
	  described in overview section</p>
	</description>
	<datatype>SCIRun::Field</datatype>
      </port>
    </inputs>
    <outputs>
      <!-- one of (device port file) -->
      <port>
	<name>Stiffness Matrix</name>
	<description>
	  <p>Sends a handle to the sparse matrix obtained from
	  discretization of the problem by finite elements</p>
	  <note>
	    <p>The handle is to base class of SparseRowMatrix, namely,
	    Matrix</p>
	  </note>
	</description>
	<datatype>SCIRun::Matrix</datatype>
      </port>
    </outputs>
  </io>
  <gui>
    <description>
      <p></p>
    </description>
    <parameter>
      <widget></widget>
      <datatype></datatype>
      <label></label>
      <description>
	<p></p>
      </description>
    </parameter>
    <img>
    </img>
  </gui>
  <testing>
  </testing>
</component>
